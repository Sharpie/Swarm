<sect1 id="swarm.user.user2.07.sect1">

  <title>Probing and displaying the contents of Swarm objects
   
  </title>
  
  <para>Probes allow the user to
      dynamically interact with the objects in their simulation. As
      the simulation progresses, the user can observe and adjust the
      values of the instance variables.  Furthermore, the user can
      cause objects to execute their methods, taking parameter values
      or input specified by the user during the simulation.
      generating method calls. The main appeal of this approach is
      that these interactions are not hardwired into the program code,
      but occur due to user-generated requests.  This interactive
      process is managed by objects and methods that are, for the most
      part, hidden from the user.  Still, the interaction can be
      customized easily.
    </para>

  <sect2>
    <title>What's a probe?</title>
    
    
    <para>Anyone who has run Heatbugs (or any of the demo programs,
    for that matter) has seen a probe display.  It is a rectangular
    window that has rows which list attributes of the object being
    displayed.  The data being displayed may be gathered from a high
    level object, such as the observer swarm or the model swarm, or it
    may be collected from an individual agent.  Almost all Swarm
    projects have a probe display for the observer and model swarms
    because starting values for the parameters can be set with those
    displays.  Probe displays for individual agents are typically
    created during a run by user interaction with the Swarm program
    (for example, by clicking on a "clickable
    <className>ZoomRaster</className>", as discussed in the previous
    section).</para>

    <para>The key to this capability is the probe. A probe is an
    object that can gather information from one object and relay it to
    other objects, including displays on the screen.  The Swarm
    Toolkit provides two kinds of probes. The Swarm class
    <classname>VarProbe</classname> extracts the value of a specific
    instance variable from an object. The second kind of probe is
    provided by the <classname>MessageProbe</classname> class.  The
    <classname>MessageProbe</classname>.  A message probe gives the
    user the ability to access methods inside an object--to send
    messages to it, in other words:
    </para>

      <itemizedlist>
        <listitem><formalpara><title><classname>VarProbe</classname></title>
            <para>Probes
              an instance variable. A variable probe
              appears to the user in a window with the name of the
              instance variable and a space that may display the value
              of the variable (or show a blank or "nil").  Variable
              probes can display the values of integers and floating
              point numbers, as well as information about the identity
              of object variables.  Variable probes do not display the
              contents of C arrays or
              structs.</para></formalpara></listitem>

        <listitem><formalpara><title><classname>MessageProbe</classname>
            </title> <para>Probes a method. In the same
            window where the Variable Probe is shown, there may be
            "buttons" that have the names of methods on them.  These
            buttons will be executed when they are depressed.  If a
            method takes arguments, there will be spaces in which the
            user can enter them.  This can cause agents to change
            their course of action during a simulation run.
            </para></formalpara></listitem>
      </itemizedlist>
    

      <figure id="simplebug-probes2">
      <title>A <classname>ProbeDisplay</classname> can combine  
         <classname>VarProbe</classname> instances (two in this case)
        and one or more <classname>MessageProbe</classname>s (one in this case))</title>
      <graphic entityref="simplebug-probes2"></graphic>
    </figure>

    <para>There are two main uses for probes: they can be fed into
      data-collection objects and serve as interfaces to the objects
      about which data is being collected (thus keeping the
      data-collection objects as general as possible) - the
      <classname>Averager</classname> class, for example, directly
      subclasses <classname>MessageProbe</classname>. Or, they can be
      used in order to generate a GUI to the individual objects in the
      simulation (the more common usage).
    </para>


    <para>There is a middle-level object between the probe display
      that appears on the screen and the individual probes. It is the
    <classname>ProbeMap</classname>.  A probe map is a set that
    collects up all of the probes for a given object.  The probe
    display does not manage individual probes, but rather it manages
    probe maps.  As we shall see, then, most of the detail in
    tailoring probe displays ends up in steps that add or remove
    probes from the probe map.
     </para>


</sect2>

  <sect2>
    <title>Managing Probe Displays</title>


    <para> The appearance of the probe display can be custom-tailored
    by the programmer.  In order to understand the effect of
    customization, it is probably best to begin with an understanding
    of the "default" appearance.</para>

    <para> The default probe displays for a simulation can be created
    quite easily.  In the <filename>HeatbugObserverSwarm.m</filename>
    file, for example, one finds these lines:</para>

    <programlisting role="ObjC">
CREATE_ARCHIVED_PROBE_DISPLAY (heatbugModelSwarm);
CREATE_ARCHIVED_PROBE_DISPLAY (self);</programlisting>

    <para> These are macro commands that cause actions inside the
    Swarm kernel to create the default probe displays for the model
    swarm and observer swarm, respectively.  That is all that is
    required to create the default probe displays.  </para>


     <para> It might be a good exercise for the user to check this for
     herself. Leave those macro lines in
     <filename>HeatbugObserverSwarm.m</filename>, and comment out
     everything else to do with probes in that file and also in
     <filename>HeatbugModelSwarm.m</filename>.  When heatbugs is
     executed, the user will see that the default probe display
     presents a list of the instance variables of the object and, if
     their values are set at start time, those values will be
     displayed as well. <comment> I need to learn how to insert a jpeg snapshot of the probe display
     would be included here </comment>
     </para>

     <para>This bare-bones setup will not automatically update the display
     as the simulation proceeds.  It presents only a snapshot of the
     creation-time settings.  Many variables that have no value set
     before time 0 will show blanks or the word "nil" and that will
     never change.</para>

    <para> If one wants the probe pisplay to be updated, then an
    update command has to be included in the schedule.  In the
    buildActions method of
    <filename>HeatbugObserverSwarm.m</filename>, this is the command
    that will cause the updating to occur (presumably, it was
    commented out in the bare-bones test described above):</para>

   <programlisting role="ObjC">
[displayActions createActionTo: probeDisplayManager message:
M(update)];</programlisting>

    <para>The <varname>probeDisplayManager</varname> is a global
    object and when it is told to update in the observer swarm's
    schedule, it will update the probes of objects in all other levels
    of the simulation.</para>

    <para>All of this works because the Swarm kernel provides a great
    deal of functionality that the user may never need to inspect or
    worry about.  Most importantly, the object
    "<varname>probeDisplayManager</varname>" is not explicitly created
    by the user.  Rather, it appears automatically in any Swarm
    program that has the GUI mode turned on in its
    <filename>main.m</filename>. The
    <varname>probeDisplayManger</varname> is the object that receives
    messages to create displays for various objects, such as the macro
    statements above.</para>

    <para>The default probe display for an object includes only the
    probes for the instance variables of the object.  It has no
    buttons to click and execute methods inside the object (i.e., it
    has no message probes).  If one wants the message probes, there
    are two alternatives.  While the program is running, a right-click
    on the object's name button in the top-left part of the display
    will cause the message probes to be displayed.  A second
    alternative is to change the macro used to create the probe
    displays.  Use these macro commands instead:
</para>

 <programlisting role="ObjC">
CREATE_ARCHIVED_COMPLETE_PROBE_DISPLAY (heatbugModelSwarm);
CREATE_ARCHIVED_COMPLETE_PROBE_DISPLAY (self);</programlisting>

   <para>This will cause the probe display to include all instance variables
   and methods.</para>

  </sect2>

  <sect2>
   <title>How to Customize Probe Displays</title>

   <para>Why might one want to customize the display?  Well, frankly,
   the default probe display may look ugly.  It may include lots of
   variables the user does not want to see. There are some instance
   variables, such as C arrays, that cannot be probed, and so their
   inclusion in a probe display is uninformative.  The Swarm Toolkit
   is designed to allow the user to pick and choose which variables
   ought to be included in the display.  There are a number of
   strategies for customizing, one of the standard strategiew uses an
   object called <varname>probeLibrary</varname>. </para>

      <para> Like <varname>probeDisplayManager</varname>, the
     <varname>probeLibrary</varname> is a global object provided by the Swarm
     kernel. Customization is achieved by writing code that
     communicates back and forth from objects to the
     <varname>probeLibrary</varname>. In short,
     the programmer "checks out" a unique, shared copy of a
     <classname>Probe</classname>/<classname>ProbeMap</classname>
     from the <varname>probeLibrary</varname> object (of
     class <classname>ProbeLibrary</classname>) provided by
     the kernel. By shared we mean that a similar request
     made at a different point in the code, will return a
     reference to the very same probe instance. </para>

    <para> Here is a skeleton example of the commands that can create a
customized probe display using this approach.
</para>

    <example>
      <title>Generating a probeMap</title>

      <para>To generate a <varname>probeMap</varname> for an instance of the
        class <classname>Agent</classname> called <varname>agent</varname>,
        which consists of two fields: one <classname>VarProbe</classname> for
        the instance variable <varname>someIVar</varname> and one
        <classname>MessageProbe</classname> for the message
        <function>someMessage</function>, use the following: </para>

      <programlisting role="ObjC">
probeMap = [EmptyProbeMap createBegin: self];
[probeMap setProbedClass: [self class]];
probeMap = [probeMap createEnd];

[probeMap addProbe: [probeLibrary getProbeForVariable: "someIVar"
inClass: [agent class]]];
[probeMap addProbe: [probeLibrary getProbeForMessage: "someMessage" 
inClass: [agent class]] setHideResult: 1]];

[probeLibrary setProbeMap: probeMap For: [agent class]];</programlisting>

      <para>Don't forget to execute the
      <function>CREATE_PROBE_DISPLAY</function> for this object in the
      observer swarm. </para>

    </example>

    <para>In the file <filename>HeatbugModelSwarm.m</filename>, one
    can find a fully fleshed out example of these steps.</para>

    <programlisting role="ObjC">
  probeMap = [EmptyProbeMap createBegin: aZone];
  [probeMap setProbedClass: [self class]];
  probeMap = [probeMap createEnd];

  [probeMap addProbe: [probeLibrary getProbeForVariable: "numBugs"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "diffuseConstant"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "worldXSize"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "worldYSize"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "minIdealTemp"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "maxIdealTemp"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "minOutputHeat"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "maxOutputHeat"
				    inClass: [self class]]]; 
  [probeMap addProbe: [probeLibrary getProbeForVariable: "evaporationRate"
				    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForMessage: 
                                      "toggleRandomizedOrder" 
                                    inClass: [self class]]];
  [probeMap addProbe: [probeLibrary getProbeForVariable: "randomMoveProbability"
				    inClass: [self class]]];
  [probeMap addProbe: [[probeLibrary getProbeForMessage: "addHeatbug:"
			     inClass: [self class]]
			setHideResult: 1]];

  [probeLibrary setProbeMap: probeMap For: [self class]];
</programlisting>


    <para> As in the generic example, in the
   <application>heatbugs</application> case the user follows a three
   step procedure that puts a customized probe map in place of the
   standard "variable probes only" default.
  </para>
    

    <orderedlist>

      <listitem><para>A new object called
    "<varname>probeMap</varname>" is created.  The
    <varname>probeMap</varname> is an instance of the the Swarm class
    <classname>EmptyProbeMap</classname>. Next we customize the probe
    map and pass it to the display mechanism.</para></listitem>

      <listitem><para>One-by-one, tell <varname>probeMap</varname> to
    add probes for individual variables and messages, and those probes
    are retrieved from the
    <varname>probeLibrary</varname>.</para></listitem>

      <listitem><para>Tell the <varname>probeLibrary</varname> that,
      when it creates a probe display for this object, to use this special
      object<varname>probeMap</varname> rather than the
      default.</para> </listitem>
    </orderedlist>

    <para>It is important to understand how this customization fits in
    with the default probe map.  The <varname>
    probeDisplayManager</varname> creates a widget
     for every object that you tell it to.  Unless you tell it
     otherwise, it assumes that the widget for every object is be
     based on the "default probemap" which includes probes for all
     instance variables, no message probes.  If you alter the probeMap
     by the methods we have been discussing, you are replacing the
     generic "has it all" probeMap with a customized probeMap.  If
     you right-click on the object name button in a customized
     probeMap, what pops up is a probe display based on the complete
     probeMap specification, a map in which all variables and methods
     are listed.</para>

    <para>The procedure outlined above is clear and methodical. It is
    also open to different kinds of customization.  If there is no
    need for customization of individual probes, there is a "shortcut"
    that can be used to get most of this work done. Swarm has a class
    called <classname>CustomProbeMap</classname>.  The
    <classname>CustomProbeMap</classname> can create the probeMap and
    fill it with the desired probes.  Here is an example as it would
    appear in the <application>heatbugs</application> model.</para>

    <programlisting role="ObjC">
   probeMap = [CustomProbeMap create: aZone forClass: [self class]
                              withIdentifiers: "numbugs",
                              "diffuseConstant", "worldXSize",
                              "worldYSize","minIdealTemp",
                              "maxIdealTemp","minOutputHeat",
                              "maxOutputHeat", "evaporationRate",
                              "toggleRandomizedOrder" 
                              "randomMoveProbability",":",
                              "addHeatbug:", NULL];

  [probeLibrary setProbeMap: probeMap For: [self class]];

   </programlisting>
  
    <para>The last argument to the method
    create:forClass:withIdentifiers: is basically a set of character
    strings that are strung together and used inside the Swarm library
    to do the work of creating the individual probes. The colon
    separates the variable probes from the message probes.  Notice the
    inclusion of NULL at the end of the input, which signals the end
    of the input to the
    <classname>CustomProbeMap</classname>. </para>

    <para> This method will not allow customization of individual
    probes, so the "setHideResult:1" command that appears in the
    <application>heatbugs</application> example cannot be included.
    In order to get specialized probes of that sort, we could break
    this into two steps, one that creates the
    <varname>probeMap</varname> with the default probes and then
    another which adds the special probes.  Consider this:
</para>

    <programlisting role="ObjC">
   probeMap = [CustomProbeMap create: aZone forClass: [self class]
                              withIdentifiers: "numbugs",
                              "diffuseConstant", "worldXSize",
                              "worldYSize","minIdealTemp",
                              "maxIdealTemp","minOutputHeat",
                              "maxOutputHeat", "evaporationRate",
                              "toggleRandomizedOrder" 
                              "randomMoveProbability",
                               NULL];
   [probeMap addProbe: [[probeLibrary getProbeForMessage: "addHeatbug:"
			     inClass: [self class]]
		        	setHideResult: 1]];

   [probeLibrary setProbeMap: probeMap For: [self class]];
  
 </programlisting>


     <comment>Dear Alex: This needs massive work or deletion.  Some of
     it seems to be outmoded to me, some is simply opaque or over my
     head.  Please take a look and see what you think.  I'm simply
     unprepared to do anything with it!  I do not have any idea what
     "Direct Generation" refers to, and it seems to me Object
     Generation is the same thing as Library Generation. In fact, one
     comment indicates exactly that. I've put in emphasis there. Of
     course it is also possible this made sense before I started
     trying to hack it up...
              </comment> 


    <para>There are other methods provided by the Swarm for
              customization of probe displays.
            
  </para>

      <itemizedlist>
        <listitem><formalpara> <title>Direct Generation</title> <para>
            which leaves the user in charge of all the details.</para>

          </formalpara>
        </listitem>

        <listitem><formalpara> 
            <title>Object Generation</title>
            <para>
              (<classname>Probes/ProbeMaps</classname>) - where we use
              method calls (defined in
              <classname>SwarmObject</classname>) on a given target
              object to generate the
              <classname>Probe</classname>/<classname>ProbeMap</classname>
              for that object. This allows the object to be aware that
              it is being probed and to control directly the contents
              of the
              <classname>Probe</classname>/<classname>ProbeMap</classname>
              being requested...</para></formalpara>
        
             <para><emphasis>Note that, by default, Object Generation is
              equivalent to the probeLibrary method described above.
              The default behaviour of SwarmObjects, when requested to
              create a ProbeMap, is to return a reference to the
              probeLibrary's unique copy!!!</emphasis> </para>
            </listitem>
        
        <listitem><formalpara> <title>ProbeDisplayManager
              Generation</title>
            <para>(<classname>ProbeDisplays</classname>) - where the
              programmer generates a ProbeDisplay directly, by
              requesting it from the
              <varname>probeDisplayManager</varname> object (of class
              <classname>ProbeDisplay</classname>) provided by the
              kernel (in graphics mode). The
              <varname>probeDisplayManager</varname> will create the
              <classname>ProbeDisplay</classname> based on a
              <classname>ProbeMap</classname> given to it by the probed
              object. Note: since the
              <varname>probeDisplayManager</varname> is only created in
              graphics mode, it is documented in the simtools area of
              the documentation. Here we emphasise simply that in order
              to generate a <classname>ProbeDisplay</classname> onto an
              object the programmer need only write the following line
              of code:

              <programlisting>
[probeDisplayManager createProbeDisplayFor: anObject];
</programlisting>

              And that the contents of the returned
              <classname>ProbeDisplay</classname> will be based on a
              <classname>ProbeMap</classname> obtained from the probed
              object itself.  </para> </formalpara></listitem>
      </itemizedlist>

  </sect2>
  
  <sect2>
    <title>Controlling Precision of floating-point numbers in
      probe displayss</title>

    <sect3><title>Global setting of precision</title>

      <para>There are two types of global precision setting via
        <!-- <LINK LINKEND="SWARM.OBJECTBASE.PROBELIBRARY.PROTOCOL">ProbeLibrary</LINK> -->:
      </para>

      <itemizedlist>
        <listitem>
          <para><function>-setDisplayPrecision:</function>
            <type>(int)</type> <varname>nSigFigsSaved</varname>

            Sets the number of significant figures for floating
            point (and double-floating) numbers diplayed on a GUI
            widget. Currently this is only implemented for
            VarProbes. The display uses the %*g sprintf-style
            formatting, which can vary slightly from
            implementation to implementation. If you set the
            number of significant figures to 3, then a float of
            value of 0.6344346 is displayed as 0.634 on the GUI
            widget.Note that this in no way affects the underlying
            stored value of the floating point number.</para>
        </listitem>
        
        <listitem><para> <function>-setSavedPrecision:</function>
            <type>(int)</type> <varname>nSigFigsSaved</varname>

            Sets the global default for the saving of floats through
            <classname>ObjectSaver</classname>. All objects with
            floats and doubles as instance variables are saved
            with the precision specified by this method. This is
            <emphasis>independent</emphasis> of the displayed
            precision of the same instance variable on a GUI
            widget.</para>

        </listitem>
      </itemizedlist>

      <para>To actually initialise these defaults: in the top level
        swarm, you should add the calls to the global ProbeLibrary
        instance (which is actually created by the initSwarm call in
        main) during the - createBegin method (this sets the
        precision in the global instance,
        <emphasis>before</emphasis> any probes are checked out of
        the instance. If neither method is called on probeLibrary,
        then the precision defaults to six significant figures in
        both cases.
      </para>

      <example>
        <title>Global setting precision in
          <filename>HeatbugObserverSwarm.m</filename></title> 

        <programlisting>
+ createBegin: aZone
{
   HeatbugObserverSwarm * obj;
   id &lt;ProbeMap&gt; probeMap;

   [...]
   
   probeMap = [EmptyProbeMap createBegin: aZone];
   [probeMap setProbedClass: [self class]];
   probeMap = [probeMap createEnd];
   <emphasis>
     // set the display defaults</emphasis>
   [probeLibrary setDisplayPrecision: 3];
   <emphasis>
     // typically saved precision would be higher than displayed precision
     // for statistical and data analysis purposes</emphasis>
   [probeLibrary setSavedPrecision: 10]; 

   // Add in a bunch of variables, one per simulation parameters
   [probeMap addProbe: [probeLibrary getProbeForVariable: "displayFrequency"
   inClass: [self class]]];
   [...]

   // Now install our custom probeMap into the probeLibrary.
   [probeLibrary setProbeMap: probeMap For: [self class]];
   return obj;
}</programlisting>
        
      </example>
      
    </sect3>
    
    <sect3>
      
      <title>Setting precision for individual probes</title>

      <para> The formatting for an individual probe can be set
        directly, using a sprintf-style formatting
        string. Typically, <classname>customProbeMaps</classname>
        are created in the <function>+createBegin</function> factory
        method for a <classname>Swarm</classname> or a
        <classname>SwarmObject</classname>. To set the formatting
        for a floating point probe, the method from
        <classname>VarProbe</classname> is used:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <function>-setFormatFloat:</function> <type>(const char
              *)</type><varname>floatFormat</varname>
            
            is applied to the instance of the
            <classname>VarProbe</classname> "checked-out" of the
            global <varname>probeLibrary</varname> instance. The
            sprintf-formatting string can "over-ride" the "%g"
            format set by the global precision (as above) (Typically
            "%g" chooses between the "%f" and "%e", depending on the
            size of the exponent - which is implementation-dependent
            - this method allows you to explicitly set the type of
            display).</para>
          
        </listitem>
      </itemizedlist>

      <para>In the following example, it is desired that the number
        of significant figures for the floating point variable
        <function>randomMoveProbability</function> is three (3).
        Currently (Swarm 1.4.1) this is only works for
        <classname>VarProbes</classname> and not
        <classname>MessageProbes</classname>, as yet.
      </para>

      <example>
        <title>Setting precision for individual probes in
          <filename>HeatbugModelSwarm.m</filename>:</title>

        <programlisting>
+ createBegin: aZone
{
   HeatbugModelSwarm * obj;
   id &lt;ProbeMap&gt; probeMap;
   id floatProbe;

   [...]
   <emphasis>
     // the -setFloatFormat is applied to the probe which is 
     // "returned" from the call to probeLibrary</emphasis>
   floatProbe = [[probeLibrary getProbeForVariable: "randomMoveProbability"
   inClass: [self class]]
   setFloatFormat: ".3f"];
   
   // now we have the probe - put it back into the customMap
   [probeMap addProbe: floatProbe];

   [...]
   return obj;
}</programlisting>

        <para>Or, more compactly:</para>

        <programlisting>
+ createBegin: aZone
{
  HeatbugModelSwarm *obj;
  id &lt;ProbeMap&gt; probeMap;

  [...]
  
  [probeMap addProbe: [[probeLibrary getProbeForVariable: "randomMoveProbability"
  inClass: [self class]]
  setFloatFormat: "%.3f"]];
  [...]
  return obj;
}</programlisting>
        
      </example>
    </sect3>
  </sect2>
  
  <sect2>
    <title>SwarmObject Support for Probing</title>
    
    <para>As mentioned earlier, all instances of
      <classname>SwarmObject</classname> can generate instances of
      <classname>Probe</classname>/<classname>ProbeMap</classname>. By
      default, they achieve this by "checking out" the appropriate
      references from the <varname>probeLibrary</varname>.
      
      <!-- 
    <LINK LINKEND="SWARM.OBJECTBASE.SWARMOBJECT.PROTOCOL">Interface
      definition</LINK> from <LINK LINKEND="SWARM.OBJECTBASE.SGML.REFERENCE">objectbase</LINK> library.
      -->
      
    </para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>

          <type>-(const char*)</type><function>getInstanceName</function>

          If you want to put a specific title on the ProbeDisplay
          window associated with your object, simply override this
          method. By default it returns the class name of the
          object. This is why the default ProbeDisplay window title is
          always the class name of the probed
          object. <literal>Note:</literal> Instances of
          <classname>SwarmObject</classname> do not actually have an
          instance variable called <varname>instanceName</varname> -
          so if you want to store a name for your object, you will
          need to provide your own storage at the subclass level and
          rewrite <function>getInstanceName</function> to refer to
          this variable.
        </para>
      </listitem>

      <listitem>
        <para>
          <function>-getProbeForVariable:</function> <type>(const char
            *)</type><varname>aVariable</varname>
        </para>
      </listitem>

      <listitem>
        <para>
          <function>-getProbeForMessage:</function> 
          <type>(const char *)</type><varname>aMessage</varname>
        </para>
      </listitem>

      <listitem>
        <para>
          <function>-getProbeMap</function>
        </para>
      </listitem>

      <listitem>
        <para>
          <function>-getCompleteProbeMap</function>
        </para>
      </listitem>
    </itemizedlist>
    
  </sect2>
  
  <sect2>
    <title>Using probes in a non-GUI context</title> 

    <example>

      <title>Dynamic message calling where message is chosen at runtime</title>

      <para>
        <programlisting>
theProbe = [MessageProbe createBegin: zone];
[theProbe setProbedSelector: theSelector];
theProbe = [theProbe createEnd];

anIndex = [aCollection begin: zone];
while ((aMember = [anIndex next])) 
{
  theData = [theProbe doubleDynamicCallOn: aMember]];
  [self doSomething: theData];
}
[anIndex drop];</programlisting>
      </para>

    </example>

  </sect2>


</sect1>

<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "SECT1")
End:
-->
