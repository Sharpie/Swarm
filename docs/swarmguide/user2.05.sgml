<sect1 id="swarm.user.user2.05.sect1">

  <title>Working with lists</title>

  <para> Programmers who have worked primarily in non-object-oriented
    languages like Fortran, Pascal, or C, are sometimes perplexed at
    the way Swarm programs manage repetitive tasks.  While there is no
    hard rule that iterative chores have to be managed in a certain
    way, one will find a fairly common approach that uses a Swarm
    object called <classname>List</classname>.  Since this usage is
    both widespread in Swarm and different from the usual strategy in
    other languages, it deserves some discussion.  </para>

  <sect2>
    <title>The <classname>List</classname> class</title> 
    
    <para> This section is not intended as a comprehensive review of
      Swarm's Collections library.  That job is left to a later
      chapter.  Instead, the purpose of this section is to introduce
      some popular usages of the <classname>List</classname> class and
      discuss the implications for simulation modeling.  </para>

    <para>The concept of a "linked list" may be familiar to C
      programmers. The motivating idea of a linked list is that one can
      develop a collection of entities by defining a series of structures
      that refer to each other. The first structure contains not only the
      information needed to describe a single entity a pointer to the next
      entity in the series. A linked list has a major advantage that it is
      flexible. Unlike an array that is allocated to allow N members, a
      linked list can grow indefinitely as members are added and it can
      shrink as members are deleted. The complicated problem is to make sure
      that the structures always correctly refer to each other as entities
      are added and removed.</para>

    <para>The Swarm Collections library provides a protocol called
      <classname>List</classname> that provides the swarm program with
      all of the benefits of a linked list and none of the
      hassles. The usage of <classname>List</classname> objects seems
      rather informal. A list can be told to add an object at the end
      or the beginning, or to retrieve an object that is in a certain
      position in a list. Working together with another Swarm
      protocol, the <classname>Index</classname> protocol, the
      <classname>List</classname> object has a great deal of power and
      many uses.  It should be noted that Swarm provides other, more
      structured "container" classes as well
      (<classname>Array</classname>,
      <classname>OrderedSet</classname>, <classname>Map</classname>,
      and so forth), but a treatment of them is left to a later
      chapter.</para>

  </sect2>

  <sect2>
    <title>Basic <classname>List</classname> syntax</title> 

    <para>A list is created by making a call to the
      <classname>List</classname> class object.  Since there are
      probably not going to be any creation-time variables to set, the
      method used is typically create, rather than a
      <function>createBegin</function>/<function>createEnd</function>
      pair. In order to use method calls against the
      <classname>List</classname> object, one can import the header
      file <filename>collections.h</filename> from the Swarm library,
      and then this command will create a <classname>List</classname>
      object:

      <programlisting>
id nameOfSomeList;
nameOfSomeList = [List create: self];
      </programlisting>

      Recall from the discussion of object creation that
      <varname>self</varname> refers to the memory zone in which the
      list is created. This is appropriate in a
      <classname>Swarm</classname> or <classname>GUISwarm</classname>
      instance, while other classes would use <literal>[self
      getZone]</literal> in place of <varname>self</varname>.</para>

    <para>Once a list object exists, it can carry out many
      instructions. In the <classname>List</classname> protocol,
      methods that can add and remove either the first or last object
      in a list are defined.  For example, to add an object called
      <varname>fred</varname> at the end of a list called
      <varname>listOfDogs</varname>, one could write

      <programlisting>
[listOfDogs addLast: fred];
      </programlisting>

      and, if it were necessary to remove the last object in the list,
      one could write:

      <programlisting>
[listOfDogs removeLast];
      </programlisting>

    </para>

    <para>The object of type <classname>List</classname> is able not
      only to carry out the <function>addFirst:</function>,
      <function>addLast:</function>,
      <function>removeFirst:</function>, and
      <function>removeLast:</function> methods, it can also inherits
      methods from the <classname>Collections</classname>
      protocol. Some of the useful methods in the
      <classname>Collections</classname> protocol are:
      <itemizedlist>
	<listitem><para><function>getCount</function>: Use this to
            find out how many items are already in the list </para>
	</listitem>
	<listitem><para><function>begin: aZone</function>: This
            creates an <classname>Index</classname> object that can be
            used to traverse this list. </para></listitem>

        <listitem><para><function>remove: aMember</function>. This
            will search through a list to find aMember and it will
            remove that object (and return it).</para>
	</listitem>
	<listitem><para><function>removeAll</function>: This take all
            elements out of the list, but it will not destroy the list
            or the elements in the list.</para>
	</listitem>
	<listitem><para><function>deleteAll</function>: Be careful:
            this removes the elements from memory as it clears the
            list </para> </listitem>
      </itemizedlist>
    </para>
    
    <para>Lists have many uses in Swarm projects. The following
      sections discuss them, in turn.  First, lists are used to manage
      collections of objects and schedule their activities in the model
      swarm layer of a simulation.  Second, lists are used to pass
      information back and forth between levels of a simulation.  Third,
      lists can be used by individual agents to keep track of their
      experiences and manage their information </para>

  </sect2>

  <sect2>
    <title>Lists: Managing objects in the model swarm</title> 

    <para> In the SwarmApps package, one can find the "Hello World"
      example exercises. This exercise provides a good example of the
      way in which lists are used to organize the agents in a model
      swarm.  In volume 3 of the Hello World package, a list of people
      called <varname>pplList</varname> is created.  Here is a
      skeleton showing the important commands that create and use the
      <classname>List</classname> protocol in the model swarm
      level. The file is called <filename>PplModelSwarm.m</filename>.

      <programlisting>
@implementation PplModelSwarm

-buildObjects
{ 
  //...
  // build the list to keep track of the ppl
  pplList = [List create: [self getZone]];
  for (inci = 0; inci < numPpl; inci++)
   {
    Person * person;
    id name;
    // allocate memory for a temporary person
    person = [Person createBegin: [self getZone]];
    //... 
    [person setWorld: pplList Room: room Party: self];
    //...
    person = [person createEnd];

    // add the person to the list of people
    [pplList addLast: person];
  }
}
- buildActions
{
  //...
  modelActions createActionForEach: pplList message: M(step)];
  //...
}
      </programlisting>

      As in most Swarm examples, the list is created in the
      <function>buildObjects</function> method.  The
      <classname>List</classname> class object is a "factory object,"
      it can create instances that can answer to the
      <classname>List</classname> protocol. In this case, the list is
      called <varname>pplList</varname>.</para>

    <para>In order to instruct the factory object
      <classname>List</classname> to manufacture an object that acts
      like a <classname>List</classname>, one would ordinarily have to
      import the <filename>collections.h</filename> header
      file. However, as in many Swarm examples, the
      <filename>collections.h</filename> file has already been
      included in a file that has been included in this file, and so
      an explicit import statement is not needed. </para>

    <para>After an object that responds to the
      <classname>List</classname> protocol is created, then objects
      can be added onto that list. In this example, after
      <varname>pplList</varname> is created, then the
      <function>buildObjects</function> method proceeds into a for
      loop that creates the people objects.  At the end of that loop,
      each person is added to the <varname>pplList</varname> by the
      command

      <programlisting>
[pplList addLast: person];
      </programlisting>
      The Swarm libraries take care of allocating memory and all the other
      details.</para>

    <para> Once this list of people is created, what happens?  In this
      case, the list of people becomes the central organizing element
      of actions that are to be scheduled. The object
      <varname>modelActions</varname> is told to go through the people
      list, one at a time, and cause each person to carry out its
      <function>step</function> method.  The ins-and-outs of activity
      and schedule design are discussed elsewhere.  This
      <function>createActionForEach</function> method works because
      the target is a Swarm collection item, the
      <varname>pplList</varname>, and the Swarm library knows how to
      traverse through the list of people. </para>

  </sect2>

  <sect2>
    <title>Lists: Passing information among levels in a Swarm model</title> 


    <para>Simplified scheduling is not the only usage for lists. It is
      equally important that list objects can be used to quickly communicate
      a great deal of information between objects. This is done by creating 
      methods that can get a list and pass it to another object. </para>

    <para>
      In the <filename>PplModelSwarm.m</filename> file, for example,
      one finds this method:

      <programlisting>
- getPplList
{
  return pplList;
}
      </programlisting>

      When another object needs a list of people, the
      <classname>PplModelSwarm</classname> is able to supply
      it.</para>
    <para>
      This design is extremely convenient when it comes time to
      consider the observer swarm level of the simulation. The
      <filename>PplObserverSwarm.m</filename> file gets the list of
      people from the <classname>PplModelSwarm</classname> and uses
      that list to collect data in order to construct graphs.
      Consider the <varname>avgFriendGraph</varname> object, for
      example, which charts the average number of friends per person.
      The <function>buildObjects</function> section of
      <filename>PplObserverSwarm.m</filename> has this command:

      <programlisting>
[avgFriendGraph createAverageSequence: "avgNumFriends"
        withFeedFrom: [pplModelSwarm getPplList]
         andSelector: M(getNumFriends)];
      </programlisting>

      The method
      <function>createAverageSequence:withFeedFrom:andSelector</function>
      is equipped to take a list of objects, ask each one to supply a
      piece of data (the <function>getNumFriends</function> returns an
      integer from the person object), and builds an average that is
      plotted.  This powerful, easy method of passing information for
      presentation is possible because the various Swarm libraries are
      designed to work together.  While the user could certainly
      ignore the <classname>List</classname> protocol and design her
      own setup for managing collections, doing so would indeed be
      costly because one would be forced to forfeit the convenient
      features of the other libraries that can handle Swarm
      <classname>List</classname> objects.  </para>

    <para> The ability to pass a list to the observer swarm in order
      to create a graph is just one benefit of Swarm
      <classname>List</classname> protocol.  Note in the
      <classname>PplModelSwarm</classname> example that when people
      are created, one of the set messages
      (<function>setWorld:Room:Party:</function>) tells the individual
      person in which list it is currently residing. When that method
      executes, it sets the value of an instance variable called
      <varname>pplPresent</varname> inside the person. (Look at the
      code in <filename>Person.m</filename> to verify it!)  Since each
      individual person has that list available, it can ask the list
      for information. For example, to find out how many other people
      are still in the list, the <classname>Person</classname> object
      can do this:

      <programlisting>
[pplPresent getCount]-1
      </programlisting>

      which returns an integer equal to the number of objects in the
      <varname>pplList</varname> minus 1. The
      <classname>Person</classname> object does not have to do
      anything to update the <varname>pplPresent</varname> variable to
      reflect current conditions.  Since the
      <varname>pplPresent</varname> variable is actually a pointer to
      the <varname>pplList</varname> as it currently exists in the
      <classname>PplModelSwarm</classname>, this is always "up to
      date."  Some additional usages that the
      <classname>Person</classname> class might include require the
      creation of <classname>Index</classname> objects, which are
      introduced in the next section.
    </para>
  </sect2>

  <sect2>
    <title>Lists: Organizing repetitive chores inside SwarmObjects</title> 

    <para> In the Hello World example, each instance of the
      <classname>Person</classname> class is aware of the
      <varname>pplList</varname> that exists in the
      <classname>PplModelSwarm</classname>.  Inside the individual
      person, the name used to refer to that list is
      <varname>pplPresent</varname>. Because
      <varname>pplPresent</varname> refers to an object that conforms
      to the <classname>List</classname> protocol, and all
      <classname>List</classname> objects follow the
      <classname>Collections</classname> protocol, then a number of
      interesting features can be put to use.</para>



    <para>
      Suppose the we want to have the person go through the list of
      people in the list and make a new list that includes all of the
      people in that list who have a lot of friends, say more than 3.
      In order to carry this out, code has to be designed to traverse
      through the <varname>pplPresent</varname> list, ask each one how
      many friend it has, and then if that person has more than 3,
      then add that person to another list.</para>

    <para> One of the most interesting protocols in Swarm is the
      <classname>Index</classname> protocol. In mathematics, one might
      have seen a variable X<subscript>i</subscript>, and the index
      variable i can range from 1 through the number of possible
      values. In Swarm, <classname>Index</classname> means much more
      than that.  A Swarm <classname>Index</classname> is a "living,
      breathing" object that can be moved around in a list, and the
      <classname>Index</classname> can also respond to requests for
      information.</para>

    <para> For new Swarm users, the most puzzling thing about the
      usage of <classname>Index</classname> is the creation process.
      <classname>Index</classname> objects are not created with the
      standard swarm
      <function>createBegin</function>/<function>createEnd</function>
      pair. Instead, any object from the
      <classname>Collections</classname> class, such as a
      <classname>List</classname>, can spawn an index by using the
      <function>begin:</function> method. In one step, the
      <function>begin:</function> method will create an object that
      conforms to the <classname>Index</classname> protocol and
      positions that index object before the first element of the
      collection.  Here is an example of how the
      <varname>pplPresent</varname> list might create an index called
      <varname>pplIndex</varname>:

      <programlisting>
<![CDATA [
id <Index> pplIndex;
pplIndex = [ pplPresent begin: [self getZone]];
]]>
      </programlisting>

      The first line declares the instance variable that will be the
      index.  It is not necessary to include the protocol name
      &lt;<classname>Index</classname>&gt; in the declaration, so it
      might as well have been just <literal>id pplIndex</literal>.
      Some programmers prefer to include the extra information in the
      declaration because it clarifies the code and also may help to
      catch programming mistakes.
    </para>

    <para> After it is created, the <varname>pplIndex</varname> can
      respond to messages. Many of the methods that
      <classname>Index</classname> objects can carry out will do two
      things at the same time: the <classname>Index</classname> will
      be positioned and the identity of the object at which the index
      currently resides will be returned.  For example, consider this
      code that sets a variable called
      <varname>elementFromList</varname> equal to the next one, as
      provided by the index:

      <programlisting>
elementFromList = [pplIndex next];
      </programlisting>

      When it is first created, the <varname>pplIndex</varname> is
      positioned at the edge of the collection, just before the first
      object in the collection. If we want the index to move to the
      next object, and give us a pointer to the next object in the
      list, it is done with that command. (As in C, collections are
      numbered beginning with the number zero).
    </para>

    <para>
      It is common in Swarm examples to use the
      <function>next</function> method of the index object in a while
      statement that cycles through the elements of a list.  Here is a
      bit of code that would go through the list of people in Hello
      World and ask each one how many friends it has. And, if the
      number is larger than 3, then that object is added to a list
      <varname>popularPeople</varname> (which we assume is created
      somewhere else in the code).

      <programlisting>
<![CDATA [
id <Index> pplIndex = nil;
id         element  = nil;
int numberOfFriends;

pplIndex = [pplPresent begin: [self getZone]];
while ((element = [pplIndex next]) != nil) 
{
  numberOfFriends = [element getNumFriends];
  if (numberOfFriends > 3) 
    [popularPeople addLast: element];
}
[index drop];
]]>      </programlisting>

      This example uses a number of convenient features from the C
      language.  One is that the conditions evaluated in logical
      statements are actually calculated.  Hence, the conditional in
      the while statement causes the <varname>pplIndex</varname> to
      move to the next element, in the process setting the variable
      element equal to that object.  As a result, inside the curly
      braces, the variable element can be used to refer to that
      particular element from the list. In this case, that object is
      asked to give us its number of friends.</para>

    <para>
      The index object, <varname>pplIndex</varname> plays a vital role
      in this example.  The index index is accessed inside the
      <function>while</function> statement so that we can cycle
      through the elements in a list. The while statement in the
      previous example will begin with the first element of the list,
      and one-by-one it will move through the
      <varname>pplList</varname>. What happens when it gets to the
      end?  When it is positioned at the last element of the list,
      then the <literal>[pplIndex next]</literal> command will return
      <varname>nil</varname>.  The logical condition is set so that
      the program exits the while loop at that point.
    </para>

    <para>
      If one inspects a number of Swarm examples, one will find the
      while loop is constructed in slightly different ways, but the
      effect is the same. For example, the logical condition is
      sometimes written simply as (<literal>[pplIndex
      next]</literal>).  This is allowed because of the convention
      that, as long as this does not return <varname>nil</varname>,
      then the while loop will continue.  If that approach is used,
      instead of using element in the while loop, we replace all
      occurrences of element with <literal>[index get]</literal>, like
      so:
      <programlisting>
<![CDATA [
id <Index> pplIndex    = nil;
int numberOfFriends;

pplIndex = [pplPresent begin: [self getZone]];
while ([pplIndex next])) 
{
  numberOfFriends = [[pplIndex get] getNumFriends];
  if (numberOfFriends > 3) 
    [popularPeople addLast: [pplIndex get]];
}
[pplIndex drop];
]]>
      </programlisting>


      This last change would cause a performance penalty because
      the <varname>pplIndex</varname> object is asked to evaluate and
      return on object three times.
    </para>
    
    <para>
     It is hard to overstate the value of the index object in working
     with Swarm lists. One especially important feature of the index
     is that it can be used to manage items in the list itself. That
     is, the index can do more than just point to objects. If an index
     is positioned at an object, and one wants to cut that object from
     the list, then the command <literal>[pplIndex remove]</literal>
     will get the job done. The index will automatically reorient
     itself, so that the next time the index receives the "next"
     instruction, it will point to the next valid member of the
     list.
</para>


    <para>One final note: it is important to drop the index object
      when its use is completed.  That's accomplished by the
      <literal>[pplIndex drop];</literal> command in the last example.
      If this is forgotten, the index will continue to occupy memory
      and waste resources.
    </para>

  </sect2>
</sect1>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "SECT1")
End:
-->
