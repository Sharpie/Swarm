<chapter id="swarm.user.user1.02.chapter">
  <title>Programming and Simulation</title>


   <INDEXTERM>
    <PRIMARY>complex systems</PRIMARY>
    </INDEXTERM>

   <INDEXTERM>
   <PRIMARY>simulation</PRIMARY>
   <secondary>agent-based</secondary>
   </INDEXTERM>
   
   <para>
    Swarm is designed to help researchers build models in which
    low-level actors interact (often called "complex systems"). The
    researcher has to give content to "agents," possibly by thinking
    of them as honey bees, investors, trees, or (the ubiquitous)
    "bugs."  One research goal is to discern overall patterns that
    emerge from these detailed behaviors at the individual
    level. 
  </para>

  <figure id="modeling.figure">
    <title>Agent-based modeling</title> 
    <graphic entityref="modeling" align="center"></graphic>
  </figure>

   <INDEXTERM>
   <PRIMARY>agent-based</PRIMARY>
   </INDEXTERM>
   
   <para>Object oriented programming is ideally suited to represent
    models of this sort. As we shall see, the objects are
    self-contained.  Objects may be designed to convey information
    (answer questions) from other objects and also they can retain,
    categorize, and summarize information.</para>

<sect1 id="swarm.user.user1.02-obj.sect1">
 <title>What is an Object? </title> 

    <INDEXTERM><primary>programming</primary>
      <secondary>object-oriented programming</secondary>
    </INDEXTERM>
    <INDEXTERM><primary><acronym>OO</acronym></primary>
       <see>object-oriented programming</see></INDEXTERM>   
    
    <para>A careful study of either of the object-oriented programming
      languages (Java or Objective-C) is required before any
      significant progress can be made in building a Swarm model. The
      material presented here is intended as a summary or reminder of
      such a study, rather than a substitute.</para>

    <para>An object consists of two kinds of information</para>

    <itemizedlist>
     <listitem><formalpara><title>Variables</title> <para>The list of
          variables summarizes the "state" of the agent--its age,
          wealth, its ability, and so forth.  These variables may be
          of any type that is allowed in C, such as integer
          (<type>int</type>), floating-point number
          (<type>float</type>), an array, a pointer, and so forth.
          These variables might also be of type <type>id</type>, which
          means they might also be instances of classes, and;</para>
        </formalpara>
      </listitem>

      <listitem><formalpara>
          <title>Methods</title><para> Methods determine what the
            object can do. Typically, there will be methods that
            receive information from the "outside world", methods that
            send messages to the outside, and methods that process
            information.</para>
        </formalpara>
      </listitem>
    </itemizedlist>

    <para>Variables and methods are given meaningful names, so code is
      easier to read. The custom is to run words together to make
      meaningful tags, such as <function>goToStore</function> or
      <function>goHome</function>.</para>

    <para>Objects are created through a process called
      "instantiation."  Put tersely, code is written in "classes" and
      then objects are created as instances of their classes. The
      varibles that an instance, or object, keeps inside itself are
      called "instance variables".  The information contained inside
      instance variables is available to all methods inside that
      object. If one of the methods in an object needs to have
      "private" information that is not available to other methods in
      the object, then "method variables" can be created to hold that
      information.</para>
 
    <para>In both Objective-C and Java, the term
      <firstterm>message</firstterm> is often used to refer to an
      instruction that tells an object to carry out one of its
      methods. (For readers more familiar to C++, the term
      <firstterm>member function</firstterm>, refers to the same thing
      as the term method).  Here is an example of a message that tells
      an object known as <varname>bobDole</varname> to execute its
      method <function>runForPresident</function>.</para>
    
    &startlisting-objc;[bobDole runForPresident];&java;bobDole.runForPresident();&endlisting;
    
    <para>In Objective C, some methods have parameters that specify
      details and they are added with colons (<literal>:</literal>)
      after the name of the method to be executed.  In Java, the
      entire method name is listed <emphasis>before</emphasis> the
      parameters are given <footnote> <para>In our Java example we use
      a dollar sign (<literal>$</literal>) inline between the parts of
      the method that are separated in the Objective C case.  This is
      purely a convention introduced to stay as close to conventions
      adopted by the Java Swarm libraries.  This is in no way enforced
      by the Java language itself.</para>
      </footnote>.
      For example, if the method <function>runForPresident</function>
      required additional parameters, such as the year and the name of
      the runningmate, then the message might look like so:</para>

    &startlisting-objc;[bobDole runForPresident:2000 with: RossPerot];&java;bobDole.runForPresident$with (2000, RossPerot);&endlisting;

    <para>We will have plenty of additional examples in the rest of
      the Guide.</para>

</sect1>

<sect1 id="swarm.user.user1.02-obj-types.sect1">
 <title>The Variety of Objects</title>

    <para>In a Swarm model, there can be many types of agents (see
      <xref linkend="modeling.figure">) Obviously, if a model
      is going to describe honey bees, it has to have honey bee
      agents. It will also have objects that represent other actors in
      the model, and not all other actors are animate.  There might be
      other insects and bears, but there will also be objects that
      represent the environment (trees, rainstorms, etc).  The model
      will typically also have objects that facilitate the modeling
      process and collect information about the simulation and relay
      it to the researcher. </para>

  </sect1>

<sect1 id="swarm.user.user1.02-obj-adv.sect1">
 <title>The Advantages of Object Oriented Programming</title> 

    <para>Object oriented programming (<acronym>OOP</acronym>)is well
      suited to describe autonomous agents,so it should have appeal to
      scientists and modelers on that basis alone.  However, that is
      not the end of the subject.  OOP it has virtues that are equally
      important to computer programmers. OOP, as it is found in
      Objective-C, is not exactly the same as OOP in C++ or Java, but
      these languages have some significant features in common.  The
      features we emphasize here are encapsulation and
      inheritance. </para>

    <sect2 id="swarm.user.user1.02-obj-adv-encap.sect2" >

      <INDEXTERM><primary>programming</primary>
       <secondary>object-oriented programming</secondary>       
       <tertiary>encapsulation</tertiary>
      </INDEXTERM>
      
      <title>Encapsulation</title>
      <sidebar>
        <para> The values of the variables inside an object are
            private, unless methods are written to pass that
            information outside of the object.</para>
      </sidebar>

    <para>This has both substantive and practical implications. The
      substantive importance is that the representation of an
      individual actor now presumes that the actor is a self-contained
      entity and that other actors do not automatically have access to
      all information inside that actor. Like humans, objects have to
      take effort to convey information to each other about their
      internal states. The practical advantages of encapsulation,
      however, are just as important.  Computer projects can be broken
      down into separable components (code for the classes) and when
      the code is finished, the details of what goes on inside each
      object may not be important to the programmer.  For example, if
      an object <varname>groceryStore</varname> can respond to an
      message <function>takeMoney</function>, and it gets the job
      done, we might not care how it does it.</para>

      <figure id="interface-vs-implementation.figure">
        <title>Interface vs. Implementation</title>
        <graphic entityref="interface-vs-implementation"></graphic>
      </figure>
 
    <para>This is commonly referred to as the separation of
      "interface" from "implementation." While the interface declares
      what methods the object can execute, the implementation may
      remain hidden (see <xref
      linkend="interface-vs-implementation.figure">), the user only
      has to be familiar with the interface of an object, not it's
      implementation</para>

    </sect2>

    <sect2 id="swarm.user.user1.02-obj-adv-inherit.sect2">
      
      <INDEXTERM><primary>programming</primary>
       <secondary>object-oriented programming</secondary>       
       <tertiary>inheritance</tertiary>
      </INDEXTERM>

      <title>Inheritance</title>
      <sidebar>
        <para>Each subclass inherits all variables and methods of its
          superclass.</para>
      </sidebar>

    <para>Inheritance works because code for each class designates
      that class as a subclass of a superclass.  For example, in the
      GNU Objective-C compiler used in the Swarm project, there is a
      most basic class, "object".  From the object class, the Swarm
      libraries create subclasses, and subclasses are created from
      them, and so forth until the programmer in a swarm project wants
      to create a new class of actors that is subclassed from
      <classname>SwarmObject</classname>.  If the programmer needs to
      create several varieties of that class, there is no need to
      totally rewrite each one. Subclasses can be created that have as
      a base all variables and methods of the class but then new
      methods and variables can be added as well.</para>

    <para>When a method, say <function>takeMoney</function>, exists in
        a class <classname>Store</classname>, and then a subclass is
        created, say <classname>GroceryStore</classname>, then all
        objects instantiated from the subclass will respond to
        <function>takeMoney</function>.  If the programmer wants to
        rewrite the <function>takeMoney</function> method for
        <classname>GroceryStore</classname>s, however, then the method
        can be revised inside the code for the subclass and then all
        instances of the <classname>GroceryStore</classname> class
        will respond to <function>takeMoney</function> in that
        specialized way.  The method inside the
        <classname>GroceryStore</classname> subclass will override the
        super-class's definition of the method.</para>

    </sect2>

</sect1>

<sect1 id="swarm.user.user1.02-des.sect1">
 <title>Discrete Event Simulation</title> 

      <INDEXTERM><primary>simulation</primary>
       <secondary>discrete event</secondary>       
      </INDEXTERM>

    <para>A Swarm simulation proceeds in discrete time steps. Objects
      are created and then interact according to a scheduling
      mechanism.  As the simulation proceeds, the agents update their
      instance variables and they may be asked to report their state
      to the observer swarm layer of the simulation.</para>

    <para>The modeling process in Swarm, then, is quite different from
      simulation modeling in a non-object oriented language, such as
      Fortran or Pascal.  These so-called "procedural languages" do
      not allow the modeler to take advantage of reusable classes
      through inheritance or the preservation of data allowed by
      encapsulation.  Here's an example of a simulation in a
      procedural language:</para>

    <procedure>
      <title>Procedural language pseudo-code</title>
      <step>
        <para><command>get parameters</command></para>
      </step>
      <step>
        <para><command>initialize</command><footnote><para>Generally
              sets up data structures and support for output.</para>
          </footnote>
        </para>
      </step>
      
      <step>
        <para><command>for 1 to timesteps do:</command></para>
        <substeps>
          <step>
            <para><command>for 1 to num_agents do:</command></para>
            <substeps>
              <step>
                <para><command>agent-i-do-something</command>
                  <footnote> <para>Here must provide data structure to save
                      agent's state and implement behavior </para>
                  </footnote>
                </para>
              </step>
            </substeps>
          </step>
          <step>
            <para><command>show state</command>          
              <footnote>
                <para>Implementation of output often left to the programmer
                </para>
              </footnote>
            </para>
          </step>
        </substeps>
      </step>
      <step>
        <para><command>quit</command></para>
      </step>
    </procedure>

  </sect1>

</chapter>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "CHAPTER")
End:
-->

