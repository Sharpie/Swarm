<chapter id="swarm.user.user1.04.chapter">
  <title>The notion of a Swarm</title>
  
  <INDEXTERM>
    <PRIMARY>Swarm</PRIMARY>
  </INDEXTERM>
  
  <para>As explained in an earlier section, Swarm is designed for
    hierarchical creation of computer objects.  The observer swarm
    object is created first, and it creates a user interface and it
    also instantiates the model swarm, and the model swarm then
    creates levels below and schedules their activities.</para>
  
  <para>One of the original intentions of the Swarm project was to
    give users the ability to create high quality code with a minimum
    of fuss. The Swarm library creates a sequence of classes that
    accumulate and refine the ability to create simulation objects,
    manage memory for them, and schedule their activities.</para>
  
  <sect1 id="swarm.user.user1.04-agents.sect1">
    <title>Primary and Auxiliary Agents</title>
    
    <INDEXTERM>
      <PRIMARY>Swarm</PRIMARY>
      <secondary>agents</secondary>
      <see>agents</see>
    </INDEXTERM>
    
    <para>Terminology can cause confusion because computer
      programmers may use the term "agent" in a way that befuddles
      scientists. To the scientist, the term agent refers to a
      theoretically important entity that is modeled by a simulation.
      To a programmer, the term agent is usually broader, something
      like object.  As a result, there is sometimes slippage in a
      discussion of "agent-based modeling" because an understanding of
      the term agent is not shared.</para>
    
    <para>We intend to finesse this (big surprise!) by creating
      terminology for two kinds of agents.  This separation of agents
      into primary and auxiliary groups is created solely for
      discussion in this manual.  The idea is that primary agents
      <indexterm><primary>agents</primary><secondary>primary
        </secondary></indexterm> are the ones that the research
      sets out to model in the first place. They are described in a
      theory, they have substantive importance.  Usually in this sense
      we have representations of important "actors" and one or more
      objects to represent the world in which they interact.</para>
    
    <para>To the surprise of most new users, it is often also
      necessary to create auxiliary agents
      <indexterm><primary>agents</primary><secondary>auxiliary
     </secondary></indexterm> that facilitate the work of the primary
      agents. For example, in a model of majority rule voting, one can
      have primary agents like voters and candidates. There may be a
      need for an auxiliary class called
      <classname>Counter</classname>, a class that can spawn objects
      that can be used to tally the votes that are cast.</para>
    
    <para>In most cases, when we talk about multi-agent systems, we
      are referring to the primary agents.</para>
    
  </sect1>
  
  <sect1 id="swarm.user.user1.04-swarm.sect1">
    <title>The (Swarm) OOP way</title> 
    
    <para>Swarm models follow a common syntax that helps users to
      understand the way their parts interact. The observer swarm and
      the model swarm are typically designed in a similar way.  Methods
      that will appear in many classes, for example, include:</para>

<programlisting>
+createBegin;
-createEnd;
-buildObjects;
-buildActions;
-activateIn
</programlisting>

    <para>There are also methods that allow the input and output of
      information from the object. By custom, these are usually
      prefaced by the words <function>get</function> and
      <function>set</function>. For example:</para>

<programlisting>
-setParameterValue: (int) value;
-(int) getParameterValue;
</programlisting>

    <para>These methods can be written to so that
      <function>setParameterValue</function> causes an object to set
      some internal parameter equal to a value, and
      <function>getParameterValue</function> will cause the agent to
      report back the value. </para>
 
    <para>In addition,there will be methods that carry out the
      specialized actions dictated by the substance of the research
      problem.</para>

     <para>The model swarm object is usually subclassed from Swarm and
     it is the primary object that is responsible for telling
     subclasses to build their agents. The model swarm also give those
     agents a place in memory, and schedules their activities.</para>

  </sect1>
  
  <sect1 id="swarm.user.user1.04-memory.sect1">
    <title>Managing Memory in Swarms</title>
    
    <para>The allocation and deallocation of memory is a necessary
      feature in any simulation project. Allocating and deallocating
      memory is one of the most troublesome elements of designing
      software and Swarm is well equipt to deal with that problem.
      Swarm provides libraries for this purpose which make the process
      transparent to user.</para>
    
    <para>In Swarm, objects are created and dropped using a notion of
      memory zones, and the "dirty work" of allocating memory is handled
      inside the libraries. In the next sections, we discuss the way
      objects are created and given a place in memory.  When those
      objects are no longer needed, the program can send that object the
      <function>drop</function> message, which removes it from
      memory.</para>
    
  </sect1>
  
  <sect1 id="swarm.user.user1.04-buildobj.sect1">
    <title>What goes on in the <function>buildObjects</function> method?</title>
    
    <para>If the reader inspects just a few of the sample Swarm
      programs, the importance of the building objects should become
      apparent.  Objects are named and memory is set aside for them in
      this stage. In the <function>buildObjects</function> method, one
      typically finds commands that not only create the objects being
      used in the current class, but there will also be a command
      which instructs the next-lower level of agent to create its
      objects.</para>

    <para>Consider the rich example provided by the code from the
      <application>Arborgames</application> model. In the
      <function>buildObjects</function> method of the observer swarm,
      one finds a large number of commands that create graphical
      display objects (objects subclassed from the graph library).
      One also finds commands that create the simulation control
      panel, which will appear on the screen and offer the user the
      ability to start and stop the simulation.</para>

    <para>It is vital to note also that the
      <function>buildObjects</function> method in the observer swarm
      file triggers the creation of the next lower level of agents.
      It creates a memory zone and creates a model swarm in that
      memory zone. Using the current style, the code would look like
      so:</para>

<programlisting>
  forestModelSwarm = [ForestModelSwarm create: self ];  
  [forestModelSwarm buildObjects];</programlisting>

    <para>Users may find older versions of this code which accomplish
      the same purpose, but are slightly more verbose and do not take
      into account the fact that the observer swarm object is iself a
      memory zone.</para>

<programlisting>
  modelZone = [Zone create: [self getZone]];
  forestModelSwarm = [ForestModelSwarm create: modelZone];  
  [forestModelSwarm buildObjects];
</programlisting>

    <para>Note the importance of the last line in either of these
      excerpts. The first line of the code creates the model swarm
      object (in this case, it is called
      <varname>forestModelSwarm</varname>), but the last line tells
      that object to create its own objects by telling the
      <varname>forestModelSwarm</varname> to execute its own
      <function>buildObjects</function> method.  To find out what that
      implies, one must go look in the implementation file for the
      <classname>ForestModelSwarm</classname> to see what objects it
      creates.</para>

  </sect1>
  
  <sect1 id="swarm.user.user1.04-buildaction.sect1">
    
    <title>What goes on in the <function>buildActions</function> method?</title>
    
    <para> In the standard case, the <function>buildActions</function>
      method has two important components.  It creates objects of
      these two classes.

      <itemizedlist>
        <listitem><para><classname>ActionGroup</classname>: an ordered
            set of "simultaneous" events and </para></listitem>

      <listitem><para><classname>Schedule</classname>: controls how
          often the elements in the action group are
          executed</para></listitem>

      </itemizedlist>

    </para>

    <para>In the <function>buildActions</function> methods of the
      Arborgames model, there are plenty of interesting examples.  In
      the observer swarm, for example, there are commands that
      schedule the updating of the graphical display and also there
      are commands that instruct the lower level classes to execute
      their own <function>buildActions</function> methods.</para>

    <para> In the <classname>ModelSwarm</classname>'s
      <function>buildActions</function> method, one typically finds
      the heart of the substantive action of the simulation.  Commands
      tell agents, or lists of agents, that they should carry out
      their methods.  These commands are placed into instances of the
      <classname>ActionGroup</classname> class, which means that they
      will all be repeated whenever the group is repeated. The
      repetition is controlled by commands that create schedules and
      indicate how often those schedules will be repeated.</para>

  </sect1>
  
  <sect1 id="swarm.user.user1.04-schedule.sect1">
    <title>Merging Schedules in Swarms</title> 
    
    <para>As mentioned above, there can be
      <function>buildActions</function> methods in many different
      classes.  Since each one can create action groups and schedules,
      it is important that all of these activities are coordinated in
      a logical way.  One of the strengths of the Swarm toolkit is
      that it maintains a coherent, master schedule. The schedules of
      each sub Swarm are merged into the schedule of next higher
      level. Finally all schedules are merged in the top level
      Swarm</para>

    <para>This multi-level integration of swarm schedules means that
      the model can indeed be thought of as a nested hierarchy of
    models.</para>

    <figure>
      <title>Nested hierarchy of Swarms</title>
      <graphic entityref="recursive-swarm" scale="80"></graphic>
    </figure>

    <bridgehead>A Swarm as a Virtual Computer</bridgehead>

    <figure id="system-diagram.figure">
      <title>Swarm virtual computer</title>
        <graphic entityref="system-diagram" scale="80"></graphic>
      </figure>

    <para>At an even more abstract level, the Swarm libraries can be
      thought of as a layer on top of the operating system's
      kernel. This notion is especially relevant when the user can
      pause a simulation and individually interact with agents,
      reviewing and changing their internal values.
    </para>

</sect1>

</chapter>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "CHAPTER")
End:
-->
