<APPENDIX ID="SWARM.USER.TECH.APPENDIX">  
  <TITLE>Swarm Tools</TITLE>
  
  <sect1 id="swarm.user.tech-resources.sect1">
    <TITLE>Web Resources for Object-Oriented Languages</TITLE>
     
    <PARA>The main technical skill currently <footnote> <para>As we
        continue extend Swarm's multilanguage features, further
        language bindings may become available.
        </para>
      </footnote>
      
      required of a Swarm user is the ability to write in at least one
      of following object oriented languages: Java or Objective
      C. Other recommended skills include the ability to use tools
      such as <application>gdb</application> and
      <application>emacs</application>.  For the record, if you know C
      and have some form of experience in either C++ or Smalltalk,
      then learning Objective C should take no more than a day or
      so.</PARA>

    <para>Here are some Objective C resources:</para>

    <ITEMIZEDLIST>
      
      <LISTITEM><PARA>
          
        <ULINK
               URL="http://www.swarm.org/resources-objc.html">Objective
               C references</ULINK> List of Objective C references on
               the Web. Includes a 10 minute overview to Objective C
               that is most of what you need to know about Objective
               C.  Originally contributed by Nelson Minar</PARA>
      </LISTITEM>

    <LISTITEM><PARA>

        <ULINK
          URL="http://developer.apple.com/techpubs/macosxserver/ObjectiveC/index.html">
          <CITETITLE>Object-Oriented Programming and the Objective-C
          Language</CITETITLE></ULINK> An excellent (online!) book on
          Objective C. This is for generic NeXT Objective C: Swarm
          uses GNU Objective C in addition to our defobj extensions
          (see defobj library in : &refbook;)
        </PARA>
        
      </LISTITEM>
      
    </ITEMIZEDLIST>
    
    <para>Unlike Objective C, the market is literally bursting at the
    seams with books on Java, so we merely point out a few relevant
    sites:
    </para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="http://www.gnu.org/software/java/java.html">GNU and the
        Java language</ulink> is a page run by the <ulink
        url="http://www.gnu.org">Free Software Foundation</ulink> that
        details many free/open source Java tools, most notably the
        reimplementation of Sun's JDK: <ulink
                                              url="http://www.kaffe.org"><application>Kaffe</application></ulink>.</para>
      </listitem>

      <listitem>
        <para><ulink url="http://java.sun.com">JavaSoft</ulink>, Sun
        Microsystems main Java page, and a new users section: <ulink
                                                                     url="http://developer.java.sun.com/developer/onlineTraining/new2java/">New-to-Java Programming Center</ulink></para>
      </listitem>

    </itemizedlist>

</SECT1>

<SECT1 ID="SWARM.TECH.SGML.SECT1.DEBUG">

  <TITLE>Debugging Tips for Swarm</TITLE>

  <PARA>Debugging software is an art, perhaps even more so than
    writing the software itself. All software we write will have
    bugs: it is important to know how to diagnose a bug when it
    happens and how to write code defensively so you have less bugs
    in the first place.</PARA>
    
  <SECT2 id="swarm.user.tech-resources-bugs-finding.sect2" renderas=SECT3>
    <TITLE>Finding bugs</TITLE>

    <PARA>Bugs come in two categories: those that crash your program
    and those that don't. Bugs that crash your program are friendlier
    because they're obvious.  Bugs that you don't notice are much more
    dangerous: one nagging question in every programmer's mind should
    be "is the program doing what I think it is doing?"</PARA>

    <FORMALPARA>
      <TITLE>gdb</TITLE>
      
      <PARA>By far the most useful tool for finding bugs is a good
        debugger, a shell you can run a program under and set
        breakpoints, inspect the values of variables, etc. The best
        free debugger for Unix is probably gdb, available from the
        <ULINK url="ftp://prep.ai.mit.edu/pub/gnu/">GNU ftp
        site</ULINK>. gdb seems unfriendly and confusing at first, but
        it is definitely worth your time to learn it.</PARA>
    </FORMALPARA>

    <PARA>The most important gdb commands are
      <LITERAL>help</LITERAL>: browse online help,
      <LITERAL>where</LITERAL>: show me a stack trace, where did we
      crash?, <LITERAL>list</LITERAL>: show me the source code where
      we are, <LITERAL>break</LITERAL>, set a breakpoint, and
      <LITERAL>print</LITERAL>: show me the value of of some
      expression. If your program is crashing on you, run it under
      gdb and look at the stack trace. If it looks to be buggy but
        you don't know where, start setting breakpoints and see when
      things go awry.</PARA>
        
    <FORMALPARA><TITLE>gdb and Objective C</TITLE> 
      
      <PARA>Unfortunately, at this time gdb does not directly support
        Objective C.  There are <ULINK
          url="http://www.cons.org/cracauer/objc-hint-gdb.html">some
          workarounds</ULINK> that make debugging Objective C programs
        possible. They are based on the knowledge that Objective C is
        little more than a glorified syntax for structs (objects) and
        strange function names (methods).</PARA>
      
      </FORMALPARA>

    <FORMALPARA>
      <TITLE>defobj: xprint(), xprintid(), xfprint(), xfprintid(),
        xexec(), and xfexec()</TITLE> 

      <PARA>Swarm also has a few functions defined that can be used to
        make debugging easier. In particular, the function
        xprint(object) prints out the class of an object, and
        xexec(object, "message") calls the message specified on the
        object. These can be invoked under gdb as <LITERAL>call
        xprint(aHeatbug)</LITERAL>.  Note that you can't pass
        arguments to a message, nor can you see the return
        value. There are also methods xfprint(collection) and
        xfexec(collection, "message") that print or exec foreach
        member of a collection.</PARA>

    </FORMALPARA>

      <formalpara>
        <title>gdb and Java</title> 

        <para>Swarm models written in Java will ultimately use the
          Swarm libraries which are still written in Objective C.  The
          Java Native Interface (JNI) is the magic glue that binds
          these languages together.  Thus if the crash occurs is the
          user (Java) portion of the code then the user is advised to
          use the standard Java debugging tools
          <application>jdb</application> and the like.  (If a crash
          happens in the Java virtual machine (JVM), it should
          generally be clear from the error message that it is a
          Java-related problem).  gdb is only useful when the crash
          occurs inside the Swarm libraries (i.e. outside the user's
          Java code).  In this case you can invoke gdb in the
          following way:</para>
      </formalpara>
      <para>
        <screen><prompt>$</prompt><envar>JAVASWARMGDB=</envar><command>gdb</command> <command>javaswarm</command> Start<replaceable>ModelName</replaceable></screen>
         From then on the preceeding information on the use of gdb in
         the Objective C context, continues to apply.
      </para>

    </SECT2>

    <SECT2 id="swarm.user.tech-resources-bugs-preventing-objc.sect2">
      <TITLE>Preventing Bugs: Objective C</TITLE> <PARA>Defensive
      programming can help prevent a good number of bugs. When writing
      code, try to test it incrementally: make small changes whose
      effects you think you can predict and then test them. Don't
      outsmart yourself with cleverness: write code correctly first,
      then go in and hack it up if you need it to be more
      efficient. Put in sanity checks for conditions that shouldn't go
      wrong in normal usage, but might if you make a mistake.</PARA>

      <FORMALPARA>
        <TITLE>-Wall</TITLE> 

        <PARA>Swarm currently compiles all code with "gcc -Wall",
          which tells gcc to emit warnings for a lot of things that it
          wouldn't normally complain about.  Warnings are not
          (necessarily) errors - warnings will be generated for legal
          code if gcc thinks that what you're doing could easily be a
          mistake.  You might find this frustrating at first, but it
          helps catch a lot of common errors, including forgetting to
          include a prototype or forgetting to return a value from a
          function. Passing -Wall is good discipline.</PARA>

        </FORMALPARA>

      <FORMALPARA>
        <TITLE>nil_method</TITLE> 

        <PARA>Objects in Objective C are
          essentially pointers to structs. So what happens if you send
          an object to the pointer 0x0, "nil" in Objective C parlance?
          Unfortunately, most implementations of Objective C, including
          gcc, define methods to nil as having no effect. The code:
        </PARA>

      </FORMALPARA>          

      <PROGRAMLISTING>
aHeatbug = [Heatbug create: aZone]; 
aHeatbug = 0; // oops! bug.  
[aHeatbug setIdealTemperature: idealTemp];
      </PROGRAMLISTING> 

      <PARA>will <EMPHASIS>not</EMPHASIS> generate any errors.</PARA>

      <PARA>The reason this is unfortunate is that it's a common bug
        to trash a pointer accidentally, set it to 0. It would be
        nice if your program then crashed when you tried to send a
        message to that mangled object: instead, the message send
        will fail silently and the program will continue to execute.
        This can make it hard to find bugs.</PARA>
      
      <PARA>There are two ways to make messages sent to nil crash
        your program.  The simplest is to put a breakpoint on
        <LITERAL>nil_method</LITERAL> under gdb: nil_method is
        invoked every time a message is sent to nil. Alternately,
        you can make a copy of the libobjc runtime source and edit
        nil_method to do whatever you want. The source code in
        <LITERAL>src/defobj</LITERAL> contains a file
        <LITERAL>objc.patch</LITERAL> that patches the runtime from
        gcc 2.7.2.</PARA>

    </SECT2>

    <sect2 id="swarm.user.tech-resources-bugs-preventing-java.sect2">
      <title>Preventing Bugs: Java</title> 

      <para>The good news for Java programmers is that since Java is a
        strongly typed language, many of the pitfalls that beset
        Objective C programmers, never materialize in the Java
        context.  Nevertheless the reader is cautioned to use as many
        of the standard defensive programming techniques as
        possible.</para>
    </sect2>
  </SECT1>

  <SECT1 ID="swarm.user.tech-emacs.sect1">
    <TITLE>Emacs and Swarm</TITLE>
    
    <PARA>Emacs is the world's best editor, infinitely configurable
      and powerful and free. If you're not used to a Unix text editor
      and want to write programs, emacs is probably best to learn. The
      information here will show you how to set up emacs to use an
      Objective C or Java specific mode for editing source code and
      how to get emacs to colour your source code for you nicely.
      Emacs can also help you find compilation errors, run a debugger,
      and even act like a class browser. Documentation for those
      things are not here, see the Emacs documentation itself.</PARA>

    <sect2 ID="swarm.user.tech-emacs-objc.sect2">
      <title>Objective C</title> 
    <FORMALPARA>
      <TITLE>objc-mode</TITLE>
      <PARA>One of the best things about emacs is that one can load
        different "major modes" to edit types of files. Major modes making
        editing files easier by providing structure to your editing. In
        particular, there are programming language modes that do nice things
        like indentation for you.</PARA>
    </FORMALPARA>
    
    <PARA>Starting with emacs-19.30, the default C mode is
      <filename>cc-mode.el</filename>, a nice rewrite of the original
      c-mode.el. Luckily for us, <filename>cc-mode.el</filename>
      supports Objective C directly. The basic function to invoke it
      is <LITERAL>objc-mode</LITERAL>. The following bit of code in
      your .emacs will cause emacs to automatically enter objc-mode on
      all files that end in <LITERAL>.m</LITERAL> or
      <LITERAL>.h</LITERAL>:</PARA>
    
<PROGRAMLISTING>
(setq auto-mode-alist
(append '(("\\.h$" . objc-mode)
("\\.m$" . objc-mode))))
</PROGRAMLISTING>

  <FORMALPARA><TITLE>Highlighting code</TITLE> 

    <PARA>Emacs running
      under X has the ability to colour your source code according to
      syntax. There are two packages to do this:
      <LITERAL>font-lock</LITERAL> and
      <LITERAL>hilit19</LITERAL>.</PARA>
  </FORMALPARA>

  <FORMALPARA><TITLE>font-lock</TITLE> 

        <PARA>emacs-20 and later also has a font-lock mode for
          Objective-C that supports the method syntax unique to
          Objective-C.  We recommend the use of font-lock, over
          hilit19, now that the identification of Objective C syntax
          in emacs is better supported, as font-lock supports
          'lazy-fontification' (i.e. as you type fontification), a
          feature that hilit19 never offered.  See the manual provided
          with emacs for how to turn on this feature to highlight .h
          and .m files in 'objc-mode' automatically.</PARA>
      </FORMALPARA>
    </sect2>

    <sect2 ID="swarm.user.tech-emacs-java.sect2">
      <title>Java</title>

      <formalpara>
        <title><application>jde</application></title> <para> The
          aforementioned <filename>cc-mode.el</filename> also supports
          Java directly. But in the Java case we can go one better,
          with the complete free/open source Integrated Development
          Environment (IDE) known as the Java Development Environment
          (<application>jde</application>).  It's available from the
          <ulink url="http://sunsite.auc.dk/jde/">Sunsite</ulink> in
          Denmark</para>
      </formalpara>
    </sect2>
  </SECT1>

</APPENDIX>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "APPENDIX")
End:
-->













