<SECT1 id="SWARM.USER.USER2.04.SECT1">
  <TITLE>Initializing Swarms</TITLE>

<SECT2>
 <TITLE>Step I: Initializing</TITLE> 




<H2>+createBegin: (id) aZone {
</TITLE><PARA>
<BR></UL><UL>
<H2>  ModelSwarm * obj;
</TITLE><PARA>
</UL><UL>
<H2>  
</TITLE><PARA>
</UL><UL>
<H2>  obj = [super createBegin: aZone];
</TITLE><PARA>
</UL><UL>
<H2>  obj-&#062worldXSize = 80;
</TITLE><PARA>
</UL><UL>
<H2>  obj-&#062worldYSize = 80;
</TITLE><PARA>
</UL><UL>
<H2>  obj-&#062seedProb = 0.1;
</TITLE><PARA>
</UL><UL>
<H2>  obj-&#062xPos = 40;
</TITLE><PARA>
</UL><UL>
<H2>  obj-&#062yPos = 40;
</TITLE><PARA>
</UL><UL>
<H2>  
</TITLE><PARA>
</UL><UL>
<H2> return obj;
</TITLE><PARA>
</UL><UL>
<H2>}</TITLE><PARA>
1<BR></UL></P>
2<BR></UL></P>
3<BR></UL></P>
4<BR></UL></P>
5<BR></UL></P>
</PARA></FORMALPARA> 




</SECT2>

<SECT2>
 <TITLE>Details on createBegin method</TITLE> 




<FORMALPARA><TITLE>The ô+ö indicates that this is a class method as opposed to ô-ö which indicates an instance method
</TITLE><PARA>
</PARA></FORMALPARA>
<FORMALPARA><TITLE>ModelSwarm * obj
</TITLE><PARA>
<UL>
indicates to compiler that obj is statically typed to ModelSwarm class
</UL></UL></P>
<FORMALPARA><TITLE>[super ...]
</TITLE><PARA>
<UL>
Executes createBegin method in the super class of obj (Swarm) and returns an instance of ModelSwarm
</UL></UL><UL>
<FORMALPARA><TITLE>obj-&#062varName=val
</TITLE><PARA>
<UL>
Abuses OOP paradigm and ôpokesö values directly into object</UL></UL></P>
1<BR></UL></P>
5<BR></UL></P>
3<BR></UL></P>
4<BR></UL></P>
</PARA></FORMALPARA> 




</SECT2>

<SECT2>
 <TITLE>Memory zones</TITLE> 




<FORMALPARA><TITLE>The Defobj super class provides facilities to create and drop an object through
</TITLE><PARA>
</PARA></FORMALPARA>
<FORMALPARA><TITLE>In either case the object is created ôin a memory zoneö
</TITLE><PARA>
</PARA></FORMALPARA>
<FORMALPARA><TITLE>Effectively this means that the underlying mechanism provides enough memory for the instance, itÆs variables and methods.
</TITLE><PARA>
</PARA></FORMALPARA>
<FORMALPARA><TITLE>The zone also keeps track of all objects created in it and allows you to reclaim memory simply by dropping a zone. It will signals to all objects in it to destroy themselves</TITLE><PARA>
2<BR></UL></P>
</PARA></FORMALPARA> 




</SECT2>

<SECT2>
 <TITLE>Where did that zone come from?</TITLE> 




In main.m: modelSwarm= [ModelSwarm create: globalZone];<BR></UL></P>
<H2>In main.m : initSwarm (argc, argv);</TITLE><PARA>
<BR></UL></P>
In ModelSwarm.m: +createBegin:<BR></UL></P>
Executes various
<BR></UL><UL>
functions in defobj and simtools
</UL><UL>
which create a global memory zone
</UL><UL>
among other things</UL></P>
create: method is implemented
<BR></UL><UL>
in defobj, superclass of the Swarm class
</UL><UL>
and it calls the createBegin:
</UL><UL>
method in ModelSwarm</UL></P>
</PARA></FORMALPARA> 




</SECT2>
</SECT1>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "SECT1")
End:
-->
