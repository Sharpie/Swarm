<chapter id="swarm.user.user2.06.chapter">
  <title>Checking on a Swarm's progress: The Observer</title>

  <sect1 id="swarm.user.user2.06-monitor.sect1">
    <title>Monitoring a Swarm </title>

    <para> When a Swarm program is running in the GUI mode, what the
      user sees is controlled by the top level Swarm that we often
      call the observer swarm.  The observer swarm adopts the
      <classname>GUISwarm</classname> protocol, which means that it
      has all of the features of a Swarm plus some "optional added
      extras."  The file that contains the source that controls the
      user interface for a specific project may be called simply
      <filename>ObserverSwarm.m</filename>.  In many examples, authors
      have customized the name of the file to include the name of
      their project, as in <filename>HeatbugObserverSwarm.m</filename>
      or <filename>ForestModelSwarm.m</filename>
    </para>

    <para>
      The most prominent of the extra features of the observer swarm
      is the control panel.  The control panel is the familiar set of
      buttons that can <guibutton>Start</guibutton> and
      <guibutton>Stop</guibutton> a swarm model.  The control panel
      also can "step" the simulation through its paces one time-unit
      at-at-time using the <guibutton>Next</guibutton> button.  The
      <guibutton>Save</guibutton> button on the control panel is
      intended to save the window positions of objects that are able
      to do so.</para>

    <para>Apart from the control panel, what the user sees at run-time
      is completely dependent on the particular example that is being
      considered.  It is probably safe to say, however, that if one
      stays within the Swarm library, without adding external support
      from the Graph library or other toolkits, then there two
      especially important kinds of display objects that can be
      created in <filename>ObserverSwarm.m</filename>. These two
      are:</para>

      <itemizedlist>
        <listitem>
          <formalpara><title>The <classname>ZoomRaster</classname></title>

            <para>In just about any of the common swarm applications,
              there is some sense of geometry or spatial position. The
              <classname>ZoomRaster</classname> graph is the tool that
              is used to represent the positioning of agents and other
              objects in that space.
            </para>

          </formalpara>
        </listitem>

        <listitem>

          <formalpara>
            <title>The Data Display Graphs</title>
            
          <para>For the visual presentation of summary information,
            Swarm provides a set of tools for presenting information
            in graphic format.  Two of the most common sorts are the
            histogram, which shows the relative frequency of various
            values occurring in a stream of data, and a line graph
            which displays the changes over time in one or more
            variables as a simulation progresses.  These
            capabilities are provided by the Swarm protocols
            <classname>EZDistribution</classname> and
            <classname>EZGraph</classname>, respectively.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>

    <para>The following sections discuss the achitecture of these two
      classes of displays in greater depth. Most of the examples for
      discussion are taken from the
      <application>Arborgames</application> code provided by Melissa
      Savage.
    </para>
  </sect1>

  <sect1 id="swarm.user.user2.06-zoomraster.sect1">
    <title>Making a clickable
    <classname>ZoomRaster</classname></title>

    <para>There is no doubt that one of the most impressive aspects of
      a Swarm presentation is the visually intriguing movement of
      agents on a landscape.  The ability to stop a simulation from
      the control panel and then click on objects, open up displays
      that reveal their internal variables and allow them to be
      changed, is one of the main strengths of the Swarm library.
    </para>

    <para>In order to introduce the way in which these
      <classname>ZoomRaster</classname> displays are created, we have
      to introduce a number of inter-linked Swarm toolkit items.
      Before we are done, we have to talk about objects created using
      the <classname>space</classname> library, as well as objects
      from the <classname>gui</classname> library.  In the
      <application>Arborgames</application> simulation, there is a set
      of standard examples that quite nicely illustrate the vital
      steps.  For emphasis, we now consider these elements
      individually.

      <orderedlist>

        <listitem>
          <formalpara>
            <title>Create a <classname>ColorMap</classname></title>

            <para>Swarm was first developed for the Unix operating
              system. Programmers who have worked in X will probably
              already know that the X server offers a long list of
              possible colors.  If we want to access those colors, we
              can build a <classname>ColorMap</classname> object in
              Swarm.  After it is defined, and commands are executed
              which draw on the screen, then the
              <classname>ColorMap</classname> object will control
              which colors are displayed.
            </para>
          </formalpara>

          <para>Here is an excerpt from the file
            <filename>ForestObserverSwarm.m</filename> in which an
            object, called <varname>colormap</varname>, is created and
            then told to remember that the numbers 25, 26,and 27 refer
            to the colors "white","LightCyan1" and "PaleTurquoise"
            which is defined deep in the bowels of the video
            display.</para>

<programlisting>colormap = [Colormap create: [self getZone]];

[colormap setColor: 25 ToName: "white"];
[colormap setColor: 26 ToName: "LightCyan1"];
[colormap setColor: 27 ToName: "PaleTurquoise"];</programlisting>

          <para><classname>ColorMap</classname>s can have fancier
            items. For example, colors need not be referred to by
            simple names. Rather, each color can be referred to in a
            numerical format. All colors can be referred to by the
            intensity of their red, blue, and green components, for
            example.  If one needs to assign the many available shades
            of red to the numbers between 100 and 150, it can easily
            be done with commands that use the RGB format.  There is
            an example of such a use of the
            <classname>ColorMap</classname> protocol in the
            <application>heatbugs</application> source code.
          </para>
        </listitem>

        <listitem>          
          <formalpara>
            <title>Create a <classname>ZoomRaster</classname></title>

            <para>A <classname>ZoomRaster</classname> is a visual
              placeholder, a rectangular entity of a certain size.
              After trimming out some of the detail, the steps that
              create the <classname>ZoomRaster</classname> called
              <varname>forestRaster</varname> in
              <application>Arborgames</application> look like this:</para>
          </formalpara>

<programlisting>forestRaster = [ZoomRaster createBegin: [self getZone]];
SET_WINDOW_GEOMETRY_RECORD_NAME (forestRaster);
forestRaster = [forestRaster createEnd];

[forestRaster setColormap: colormap];
[forestRaster setZoomFactor: 4];
[forestRaster setWidth: [forestModelSwarm getWorldSize] 
   Height: [forestModelSwarm getWorldSize]];
[forestRaster setWindowTitle: "The Forest"];
[forestRaster pack];</programlisting>
          
          <para>This code should be viewed as foundation-building.  The
            <classname>ZoomRaster</classname> object is created, and
            the macro
            <function>SET_WINDOW_GEOMETRY_RECORD_NAME</function> is
            executed.  This means that, when the user clicks
            <guibutton>save</guibutton> on the control panel, the
            window position of the <varname>forestRaster</varname>
            object will be saved in a file in the user's account.
          </para>
          
          <para>To briefly summarize the effect of the other commands, we
            note the following.  The fourth line tells the new raster
            object to use the colormap we just created.  The fifth
            line controls the magnification of the display, which in
            this case is 4.  The sixth line asks the
            <varname>forestModelSwarm</varname> object to report back
            the horizontal and vertical dimensions of the grid on
            which trees exist and then uses those to set the width and
            height of the <classname>ZoomRaster</classname> object's
            display.  The eighth line gives the display window a name
            and the last line, which tells the
            <varname>forestRaster</varname> to
            <function>pack</function> itself, causes the display to be
            initialized according to the settings we just provided.
          </para>
        </listitem>

        <listitem><formalpara>
            <title>Map a Swarm Space object onto the 
              <classname>ZoomRaster</classname></title>
            
            <para>By itself, a <classname>ZoomRaster</classname> is just a
              nice looking set of edges around a blank background.  In
              order to display things inside that window, we need to
              create a connection between the agents who live in the
              model swarm (and lower level swarms) and then display
              them in the observer swarm.  This is done most commonly
              by telling each agent that it lives in a Swarm object
              known as a <classname>Grid2d</classname>.  As the agent
              goes through its lifetime, one of its activities is to
              put itself at a position in the grid and then (possibly)
              erase itself from the old spot and put itself in the new
              spot.</para>
          </formalpara>

          <para>The Swarm protocol <classname>Object2dDisplay</classname>
            can handle the work of drawing the positions of agents in
            a <classname>Grid2d</classname> object on a
            <classname>ZoomRaster</classname>.  In the
            <application>Arborgames</application> example, the
            <varname>forestRaster</varname> is used by an object
            called <varname>treeDisplay</varname> which connects the
            agents in the <classname>Grid2d</classname> to the graphical 
            display.</para>
            
<programlisting>treeDisplay = [Object2dDisplay createBegin: [self getZone]];
[treeDisplay setDisplayWidget: forestRaster];
[treeDisplay setDiscrete2dToDisplay: 
[[forestModelSwarm getTheForest] getTreeGrid]]; 
[treeDisplay setObjectCollection:
[[forestModelSwarm getTheForest] getTreeList]]; 
[treeDisplay setDisplayMessage: M(drawSelfOn:)];
treeDisplay = [treeDisplay createEnd];</programlisting>

          <para>This example is slightly more complicated than most,
            because the <classname>Grid2d</classname> object is not
            retrieved directly from
            <varname>forestModelSwarm</varname> , but rather from
            another object that is defined in the
            <varname>forestModelSwarm</varname> .  Except for that
            wrinkle, this is a standard example.  The
            <classname>Object2dDisplay</classname> protocol is told to
            use the <varname>forestRaster</varname> as its "display
            widget."  It is necessary to tell the
            <varname>treeDisplay</varname> which
            <classname>Grid2d</classname> to use, and this chore is
            accomplished by the setDiscrete2dDisplay command.
          </para>

          <para>Why the <function>setObjectCollection</function>
            message and the <function>setDisplayMessage</function> are
            used is interesting and important.  The
            <classname>Object2dDisplay</classname> protocol has a
            method called <function>display</function>, which can be
            put in a schedule by the user.  When the display method is
            executed, the <varname>treeDisplay</varname> (since it
            follows the <classname>Object2dDisplay</classname>
            protocol) will send each of the agent-objects in the
            <classname>Grid2d</classname> a message telling it to draw
            itself in the <varname>forestRaster</varname>. How does it
            tell the object to draw itself? We tell it how by passing
            it the selector for the agent-object's
            <function>drawSelfOn:</function> method.  Each agent must
            be able to respond to a message of this sort:</para>

<programlisting>
[anAgent drawSelfOn: aRaster];</programlisting>

          <para>The program will crash if each agent that is
            positioned in the <classname>Grid2d</classname> is not
            able to respond to <function>drawSelfOn:</function>.
          </para>

          <para>The message <literal>setObjectCollection:
              [[forestModelSwarm getTheForest] getTreeList]]</literal>
              is not strictly necessary and the program will run
              without it.  It may not run so quickly, however.
              Without this command, the <varname>treeDisplay</varname>
              will respond to the <function>display</function> message
              by searching in each possible position of the
              <classname>Grid2d</classname> and sending each object it
              finds the <function>drawSelfOn:</function> message.  If
              the grid is large relative to the number of agents, then
              this might be a very slow process. The
              <function>setObjectCollection</function> method
              eliminates the need for <varname>treeDisplay</varname>
              to search through the whole grid.  When the object
              collection is set, then the
              <varname>treeDisplay</varname> will simply go through
              the list of objects and tell each one to display
              itself.</para>
        </listitem>

        <listitem>
          <formalpara>
            <title>Tell the <classname>ZoomRaster</classname> 
             Where to Send Mouse Clicks</title>

            <para>A <classname>ZoomRaster</classname> object is highly
              self-aware.  If you stop a simulation and right-click on
              an object, you may see a probe display pop up.  That
              does not happen by magic, of course.  It is necessary to
              tell the raster that, when there is a certain kind of
              click, that it is supposed to pass that click to some
              other object that knows what to do with it.  That's why
              there is a command like this in the
              <function>buildObjects</function> phase:</para>
          </formalpara>

<programlisting>
[forestRaster setButton: ButtonRight 
                 Client: treeDisplay 
                Message: M(makeProbeAtX:Y:)];</programlisting>
          
          <para>The <varname>treeDisplay</varname> is told to make a
            probe for the object that exists at a particular point
            in the grid.
          </para>
        </listitem>

        <listitem>
          <formalpara>
            <title>Schedule the Display</title>

            <para>This is one of the aspects of Swarm that could use
              some standardization. In the schedule, one generally
              includes steps that erase the raster, then the
              <classname>Object2dDisplay</classname> is told to update
              itself by the <function>display</function> command, and
              then that display is drawn to the screen by telling the
              <classname>ZoomRaster</classname> to
              <function>drawSelf</function>.
            </para>
          </formalpara>

          <para>In a simple model, one in which we only have one
            <classname>ZoomRaster</classname> to update, then the
            schedule could be as simple. In the
            <function>buildActions</function> part of the code, one
            could create an <classname>ActionGroup</classname> like
            this:</para>

<programlisting>displayActions = [ActionGroup create: self];
[displayActions createActionTo: forestRaster message: M(erase)];
[displayActions createActionTo: treeDisplay message:M(display)];
[displayActions createActionTo: forestRaster message: M(drawSelf)];</programlisting>

          <para>(Of course, that action group has to be put into a
            schedule, which will probably execute it at each time
            point.) The <function>buildActions</function> method in
            <application>arborgames</application> is a bit more
            complicated than that since a large number of displays are
            managed.
          </para>
        </listitem>

        <listitem>
          <formalpara>
            <title>Make sure the Agents Put Themselves in the Grid!</title>
            <para>
              Inside the code that creates the individual agents who
              are to be drawn on the grid, one must be careful to
              accomplish two things.  First, the
              <function>drawSelfOn:</function> method must be created.
              Second, if one wants to have a clickable
              <classname>ZoomRaster</classname> that allows agents to
              be probed, it is also vital to have the agents report
              their positions.
            </para>
          </formalpara>

          <para>It is fairly standard in Swarm models to manage this
            by creating a <classname>Grid2d</classname> object in the
            model swarm level and then, when an agent is created, use
            a <function>setWorld</function> method to notify the agent
            where it lives. In <application>heatbugs</application>,
            for example, each heatbug has a <function>step</function>
            method that controls how it searches for heat and moves to
            find a better spot.  When it has decided where to go, the
            heatbug puts "nil" at it spot in the grid where it used to
            be and then it puts itself at the new coordinates.  Here
            is the relevant code from
            <filename>Heatbug.m</filename>:</para>

<programlisting> [world putObject: nil atX: x Y: y];
[world putObject: self atX: newX Y: newY];</programlisting>
          
          <para>In the <application>Arborgames</application> example,
            the trees don't consciously move themselves. Rather, they
            are created and destroyed according to a set of rules that
            put them in a spot for a while.  When a tree is created,
            it is added to the grid with this command that is in the
            <filename>Forest.m</filename> file:</para>

<programlisting>- addTree: aTree atX: (int) xVal Y: (int) yVal
{
  [treeList addFirst: aTree];
  [treeGrid putObject: aTree atX: xVal Y: yVal];
  return self; 
}</programlisting>

          <para>Trees don't move (so far as we know), so we only need
            to update this tree's position arises when the tree
            dies. The <filename>Forest.m</filename> file creates a
            class of methods common to the different kinds of forests,
            and then the subclasses like
            <classname>MatureForest</classname> are created to provide
            additional detail.  There are methods that remove a tree
            from the simulation and take it off the grid.  The trees
            that are supposed to die are added to a Swarm list called
            the <varname>exitQ</varname>. For each timestep, the
            forest tells each kind of tree to do its
            <function>step</function> method, which adds trees to the
            <varname>exitQ</varname> list, and then the forest's
            <function>step</function> method removes those trees from
            the grid. In the <filename>MatureForest.m</filename>
            file,</para>

<programlisting>- step 
{
  id aTree, index;

  [treeList forEach: M(step)];

  index = [exitQ begin: [self getZone]];
  while( (aTree = [index next]) )
   {
    [treeList remove: aTree];
    [treeGrid putObject: nil atX: [aTree getX] Y: [aTree getY]];
    [index remove];
    [aTree drop];
  }
  [index drop];
  return self;
}</programlisting>

        </listitem>
      </orderedlist>
    </para>
  </sect1>

  <sect1 id="swarm.user.user2.06-graphs.sect1">
    <title>Displaying Results in Graphs</title>

    <para>The most commonly used graphs in Swarm are histograms, which
      display the frequency distribution of a variable, and line
      plots, which show changes over time in real-valued numbers.
      There are some little details that arise in some applications,
      but for the most part creating graphs is easy. </para>

    <para>The Swarm protocol that can create line plots is called
      <classname>EZGraph</classname>.  The essential steps require the
      user to create a graph object, and optionally to assign labels
      for various display attributes.  For example, returning to the
      <application>Arborgames</application> simulation, one can create
      a graph showing the numbers of trees of various sorts.  The
      first step is to create the graph object, in this case called
      <varname>popGraph</varname>.
    </para>

<programlisting>popGraph = [EZGraph createBegin: [self getZone]];
SET_WINDOW_GEOMETRY_RECORD_NAME (popGraph); 
[popGraph setTitle: "population"]; 
[popGraph setAxisLabelsX: "time" Y: "population"];
popGraph = [popGraph createEnd];
    </programlisting>

    <para>After the <classname>EZGraph</classname> object is in existence,
      then it can be instructed to prepare itself to plot some lines.
      A stream of numbers is thought of as a sequence, and internal to
      the Swarm library there is an object type called sequence that
      is used by the graph tools to keep track of the numbers they are
      to present. </para>

    <para>When the graph object is told to create the sequence, it can
      be told to formulate a summary statistic and plot it. In the
      <application>Heatbugs</application> simulation, the aim is to
      plot a summary of the unhappiness of all bugs.  The average
      level of unhappiness of all bugs is the chosen indicator.  Here
      is a code excerpt that shows how an object called
      <varname>unhappyGraph</varname> is told to create a sequence for
      plotting:
    </para>

<programlisting>[unhappyGraph createAverageSequence: "unhappiness"
             withFeedFrom: [heatbugModelSwarm getHeatbugList]
              andSelector: M(getUnhappiness)];</programlisting>    
      
    <para>This uses the
      <function>createAverageSequence:withFeedFrom:andSelector</function>
      method.  Note that the sequence is assigned the name
      "unhappiness".  The quotation marks are needed because the name
      of the sequence is a character string.  The
      <varname>unhappyGraph</varname> is told to take data from the
      list of bugs, which is found by asking the
      <varname>heatbugModelSwarm</varname> to get the list.  Each bug
      in the list responds to a method
      <function>getUnhappiness</function>.  The combined effect of
      these elements is to create the sequence which will collect the
      average values.
    </para>

    <para>
      We hasten to point out that not all sequences need be averages.
      Output from individual objects can be plotted as well.  For an
      example, we return to the <application>Arborgames</application>
      <classname>EZGraph</classname> object called
      <varname>popGraph</varname>.  The population graph is intended
      to show how numbers for each sort of tree. There is a Swarm list
      of all species called <varname>speciesList</varname>.  The
      following code iterates through the list of all species and
      tells the <varname>popGraph</varname> to create a sequence for
      each one.
    </para>

<programlisting>for (i = 0; i < speciesNumber; i++)
{
  id aSpecies;
  aSpecies = [speciesList atOffset: i];
  [popGraph createSequence: [aSpecies getSpeciesName]
              withFeedFrom: aSpecies  andSelector: M(getCount)];
}</programlisting>

    <para>Each species is able to give its name (respond to
      <function>getSpeciesName</function>) and provide a count of the
      number of trees (respond to <function>getCount</function>). If
      some kind of mistake occurs, say a different kind of object is
      added into the <varname>speciesList</varname>, then the program
      will crash during the run (and there probably will also be a
      compiler warning).
    </para>

    <para>The work to this point has created the graph object, and
      told it what to graph, but it does not cause the graph to be
      presented as the simulation runs.  In order to see the plots,
      the commands have to be part of the observerSwarm's scheduled
      activity.  As it turns out, an <classname>EZGraph</classname>
      has a very simple method called <function>step</function> that
      can do the necessary work, so somewhere in the
      <function>buildActions</function> method, a command such as this
      is required:
    </para>

    <programlisting>[displayActions createActionTo: popGraph message: M(step)];</programlisting>

    <para>
      This is often part of an <classname>ActionGroup</classname> that
      is scheduled to update all graphs and
      <classname>ZoomRasters</classname>.
    </para>

  </sect1>

</chapter>

<!-- 
Local Variables: 
sgml-parent-document:("userbook.sgml" "CHAPTER")
End: 
-->
