<chapter id="swarm.user.user2.03.chapter">
  <title>Doing the Chores: <function>set</function> and
  <function>get</function></title>

  <para> Object-oriented programming organizes the way programmers
    think about information in a new way.  The objects maintain their
    variables (the "instance variables", or IVARs for short) and the
    information contained in those variables is private,
    self-contained within the object. This has benefits in the design
    of code and it also captures some intuitions the autonomy of
    individual agents in a simulation exercise.
  </para>

  <para>Objects are thus insulated, more or less, and although this
    makes some things easier to code, it also makes some things more
    difficult.  For example, in C a variable can be set and its value
    can be changed anywhere in the program. In object-oriented
    languages like Objective-C, an object can hold several variables
    and those values can only be changed by the object itself if we
    remain within the recommended limits of good programming habits.
    Some ways to go outside those bounds will be discussed below, but
    generally speaking it is a good idea to respect the fact that
    objects maintain their own data.</para>

  <para>If objects are maintaining their own data, how do we manage
    information in a Swarm project.  Early on in the development of
    Swarm, the coders adopted a convention (common to Objective C,
    Java, Smalltalk and numerous other object-oriented languages) that
    the term <function>set</function> starts a method name that sets a
    value inside an object, such as
    <function>setIdealTemperature</function> or
    <function>setAge</function>.  The term <function>get</function> is
    used as the beginning of a method that causes the agent to return
    some value, such as <function>getIdealTemperature</function> or
    <function>getAge</function>.
  </para>

  <sect1>
    <title>Get and Set Methods</title> 

    <para>Get and set methods are needed to pass information among
      objects.  For example, consider
      <application>Heatbugs</application>.  In the
      <filename>Heatbug.m</filename> code, one finds a methods that
      set information inside the bug and also methods that retrieve
      information from it.  Consider the method
      <function>setIdealTemperature</function> </para>

<programlisting> 
- setIdealTemperature: (HeatValue)i
{
  idealTemperature = i;
  return self;
}
</programlisting>

    <para>The <classname>Heatbug</classname> object has an instance
      variable called <varname>idealTemperature</varname>, and this
      sets the value of that variable.</para>

    <para>If some other object needs to know the heatbug's ideal
      temperature, what has to be done?  We would have to add a method
      to the <filename>Heatbug.m</filename> that returns the value of
      <varname>idealTemperature</varname>.  Something like this might
      suffice:</para>

<programlisting>
- (double) getIdealTemperature
{
  return idealTemperature;
}</programlisting>


    <para>As much as possible, it is recommended that information be
      exchanged in this way.  Hence, when the observer swarm needs a
      list of all the agents in a simulation in order to create a
      graph, the model swarm should have a method, such as
      <function>getAgentList</function>, that returns a list of agents
      that the observer swarm can use.</para>
  </sect1>
  
  <sect1>
    <title>Using Set Methods During Object Creation</title> 

    <para>Consider the way the model swarm level of a simulation can
      be designed.  If the values of many variables are set inside the
      <filename>ModelSwarm.m</filename> file, and those values are to
      be passed to the individual agents at the time of creation, then
      the code that creates individual objects might be designed like
      this:</para>

<programlisting>
aBug = [Bug createBegin: globalZone];
aBug = [aBug createEnd];
[aBug setWorldSizeX: xsize Y: ysize];
[aBug setFoodSpace: foodSpace];
[aBug setX: xPos Y: yPos];
[aBug setIdealTemp: [uniformDblRand getDoubleSample]];
</programlisting>

    <para>This code presupposes that the
      <filename>ModelSwarm.m</filename> file has pre-existing
      variables (probably integers) <varname>xsize</varname>,
      <varname>size</varname>, <varname>xPos</varname>, and
      <varname>yPos</varname>, as well as an object
      <varname>foodSpace</varname> and an object
      <varname>uniformDblRand</varname> that can give back a random
      number.  This code also presupposes that set methods exist for
      the <classname>Bug</classname> class that can get these jobs
      done.
    </para>

    <para>There are some matters of "taste" and "judgment" that affect
      model design.  One might ask, for example: <quote>why does this
      code set the ideal temperature in this way?</quote> Why not
      create a method inside the <filename>Bug.m</filename> file, such
      as <function>initializeValues</function> like so:</para>

<programlisting>
- initializeValues
{
  idealTemperature= [uniformDblRand getDoubleSample] 
  return self;
}
</programlisting>

    <para> If this method existed, then the code that creates the bug
      and sets values in it could have the command</para>

<programlisting>
 [aBug setIdealTemp: [uniformDblRand getDoubleSample]];
</programlisting>

    <para>replaced with this:</para>

<programlisting>
 [aBug initializeValues];
</programlisting>

    <para>This would achieve the purpose of setting the
      <varname>idealTemperature</varname> variable inside the object
      called <varname>aBug</varname>.  And, from the
      information-hiding perspective of object-oriented programming,
      it seems better because the value drawn for the variable
      <varname>idealTemperature</varname> is never exposed to any
      other object.
    </para>

    <para>There are a few practical reasons why the first way of
      setting the ideal temperature might be preferred. First, for the
      programmer's convenience, it is nice to have as many of the
      "parametric" changes in a single file as possible.  The Bug
      class can be written and never edited again if all of the
      changes needed are kept in the <filename>ModelSwarm.m</filename>
      file.  Second, you might save memory dealing with these things
      in the <filename>ModelSwarm.m</filename> file. Suppose that the
      object <varname>uniformDblRand</varname> has to be created in
      order to draw a random number.  If you insist on writing a
      method like <function>initializeValues</function> inside the
      <filename>Bug.m</filename>, then you need to worry about how
      that random number generator object is created inside each bug
      object. It certainly saves memory to create just one random
      generator in the <filename>ModelSwarm.m</filename> file and then
      draw numbers from it inside the model swarm itself.  There are
      some good arguments for this approach in the literature on
      random number generation.  The issue seems somewhat esoteric,
      but the argument is that one is better off making repeated draws
      from the same random number generator than making one call
      against each of the many random number generators. For reasons
      like this, Swarm examples tend to have information translated
      into objects from the model swarm level, even though it is
      technically allowable to have that information-creation process
      completely isolated within the object.</para>
  </sect1>

  <sect1>
    <title>Passing Information Around</title>
    <subtitle>Getting the Import Statements Right</subtitle>

    <para>In order to send messages to objects from another class, it
      is necessary not only to use the correct message, but also to
      import that class's header file into the code.  The
      <filename>ObserverSwarm.m</filename> file can only tell the
      <classname>HeatbugModelSwarm</classname> to run its
      <function>createBegin</function> method if
      <filename>ObserverSwarm.m</filename> includes the header file
      for the <classname>HeatbugModelSwarm</classname>. In
      <classname>HeatbugObserverSwarm.m</classname>, we find
      this:</para>

<programlisting>
#import "HeatbugModelSwarm.h"
</programlisting>

    <para>
      The inclusion in the "m" file is sufficient if no reference to
      the <classname>HeatbugModelSwarm</classname> is necessary in the
      <filename>HeatbugObserverSwarm.h</filename> file.  It may be
      necessary to move the import statement into the header file (the
      "h" file), however, if any references to a class are contained
      in the "h" file. In <filename>HeatbugModelSwarm.h</filename>,
      for example, one finds these import statements:</para>

<programlisting>
#import "Heatbug.h"
#import "HeatSpace.h"
</programlisting>

    <para>Since these are included, the variable and method
      definitions can refer to elements of these classes. The variable
      list declares a pointer to an object of type
      <classname>HeatSpace</classname>:</para>

<programlisting>
HeatSpace *heat
</programlisting>

    <para>and there is a method that has an object of type
    <classname>Heatbug</classname> as an argument:</para>

<programlisting>
-addHeatbug: (Heatbug *)bug;
</programlisting>

    <para>Many Swarm programmers have run into the following problem.
      As we have seen, It is not difficult to have the model swarm
      level create an object.  Through the set methods, various values
      can be set inside the object by commands in the model swarm.
      However, the programmer wants the agent to be able to access
      variables inside the model swarm as the simulation progresses.
      Suppose the <classname>HeatbugModelSwarm</classname> has an
      instance variable called <varname>numberOfBugsAlive</varname>,
      and inside HeatbugModelSwarm<classname></classname> we define a
      method <function>getNumberOfBugsAlive</function> that returns
      that number.  Suppose further we want any heatbug to be able to
      find out how many bugs are alive at any instant.  It is tempting
      to write inside <filename>Heatbugs.m</filename> something
      like:</para>

<programlisting>
[heatbugModelSwarm getNumberOfBugsAlive];
</programlisting>

    <para>to access that information.  That construction will not
      work, however, unless we take some special precautions.  First,
      each <classname>Heatbug</classname> has to be made "aware" of
      what model swarm it belongs to. Inside
      <filename>Heatbug.h</filename>, a variable would have to be
      defined:</para>

<programlisting>
id heatbugModelSwarm;
</programlisting>

    <para>To set the value of this variable, the
      <filename>Heatbug.m</filename> file needs to have a method like
      this:</para>

<programlisting>
- setModelSwarm: (id) nameOfSwarm
{
heatbugModelSwarm = nameOfSwarm;
return self;
}
</programlisting>

    <para>The value of the instance variable
      <varname>heatbugModelSwarm</varname> has to be set in the model
      swarm when other values are set.  When the
      <classname>HeatbugModelSwarm</classname> is creating bugs, it
      sets the other values like the ideal temperature and the
      position, but further it would set itself as the model swarm to
      which that bug belongs, like so:</para>

<programlisting>
aBug = [Bug createBegin: globalZone];
aBug = [aBug createEnd];
[aBug setWorldSizeX: xsize Y: ysize];
[aBug setFoodSpace: foodSpace];
[aBug setX: xPos Y: yPos];
[aBug setIdealTemp: [uniformDblRand getDoubleSample]];
[aBug setModelSwarm: self];
</programlisting>

    <para>This assures that, inside aBug<varname></varname>, the value
      of the instance variable <varname>heatbugModelSwarm</varname> is
      defined.</para>

    <para>
      The final precaution is that the header file
      <filename>HeatbugModelSwarm.h</filename> must be imported into
      <filename>Heatbug.m</filename>.  It is very important that the
      import statement is added to <filename>Heatbug.m</filename>, not
      <filename>Heatbug.h</filename>.  If it is added to
      <filename>Heatbug.h</filename>, then the program will not
      compile because the inclusion causes a circularity:
      <filename>Heatbug.h</filename> is included in
      <filename>HeatbugModelSwarm.h</filename>, but
      <filename>HeatbugModelSwarm.h</filename> is also included in
      <filename>Heatbug.h</filename>.  Putting the import statement in
      the "m" file avoids that ciruclarity.  And, since the import has
      to be in the "m" file, the definition of the variable
      <varname>heatbugModelSwarm</varname> in
      <filename>Heatbug.h</filename> uses the generic type
      <type>id</type>, rather than a specific type, such as
      <classname>HeatbugModelSwarm</classname>.</para>

    <para>Many swarm examples are designed to avoid the need to allow
      objects created by model swarm to also access information
      directly from it. This is usually done by creating a "space"
      object that keeps records on the model swarm.  Individual agents
      report their positions to the space and the space calculates any
      necessary statistics about the swarm.  The code for the space
      object can include get methods that the individual agents can
      execute when they need information about their environment. This
      approach has the added advantage that additional methods can be
      inherited from the general space objects in the Swarm library.
    </para>
  </sect1>

  <sect1 id="swarm.user.user2.03-avoid.sect1">
    <title>Circumventing the Object-Oriented Guidelines</title> 

    <para>If one wants to avoid treating objects as containers that
      hold both data and methods, one can do so.  The C language
      allows the creation of global variables, ones that can be
      accessed in any part of the code. These
      <literal>external</literal> variables exist outside a particular
      class and are thus available to it.  The names used for external
      variables must be unique.  One cannot have a global variable
      called <varname>temperature</varname> as well as a temperature
      variable defined as an instance variable for each object.  There
      are some occasions in which a program can be made to run more
      quickly if the whole
      <function>get</function>/<function>set</function> exercise is
      circumvented by creating a global variable.</para>

    <para>Another way in which the object-oriented guidelines can be
      circumvented is the use of the <literal>-></literal> operator.
      Suppose we have an object called <varname>dog</varname> and it
      has instance variables <varname>numberOfBones</varname> and
      <varname>timeSpentSleeping</varname>.  Ordinarily, within the
      object-oriented paradigm, the <varname>numberOfBones</varname>
      would have to be set by a method such as
      <varname>setNumberOfBones</varname>.  However, the language does
      allow a shortcut of the following sort. The syntax
      <literal>dog->numberOfBones</literal> refers to the value of the
      instance variable <varname>numberOfBones</varname> inside the
      object named <varname>dog</varname>.  Hence, one could have a
      statement:</para>

<programlisting>
dog->numberOfBones = 3;
</programlisting>

    <para>that sets the <varname>numberOfBones</varname> to 3 inside
      the dog.  This kind of code is considered to be heavy-handed and
      brutish because it does not use the methods written for the dog
      class with which it can set that value and update it.  A mistake
      made with the <literal>-></literal> operator can corrupt the
      values inside an object.  Nevertheless, one does find examples
      of this syntax in Swarm code.  Almost all Swarm examples use
      this kind of shortcut in the <function>createBegin</function>
      phase of the model swarm file, for example.  

<!-- Here create a world for the bug to roam around in. -->

    </para>
  </sect1>
</chapter>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "CHAPTER")
End:
-->
