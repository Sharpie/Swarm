<sect1 id="swarm.user.user1.05.sect1">

  <title>The Graphical User Interface</title>

  <sect2>

    <title>Elements of the Swarm GUI</title>

    <para>Swarm provides a number of classes and protocols which
      generate a graphical user interface (GUI) to the user running a
      Swarm simulation, including:

      <itemizedlist>
        <listitem>
            <figure id="gui-graph.figure">
              <title>Line graphs (in this case, a time series)</title> 
              <graphic entityref="gui-graph" align="center"></graphic>
            </figure>
          </listitem>
        <listitem>
          <figure id="gui-histogram.figure">
            <title>Histograms</title>
            <graphic entityref="gui-histogram" align="center"></graphic>
          </figure>
        </listitem>
        <listitem>
          <figure id="gui-raster.figure">
            <title>Rasters of discrete two-dimensional data</title>
            <graphic entityref="gui-raster" align="center" scale="80"></graphic>
          </figure>
        </listitem>
        <listitem>

          <figure id="simplebug-probes1">
            <title>Example <classname>ProbeMaps</classname> for the
              <application>tutorial</application>
              <classname>ModelSwarm</classname> and <classname>ObserverSwarm
              </classname></title> 
            <graphic entityref="simplebug-probes1" scale="80"></graphic>
          </figure>
          
        </listitem>
      </itemizedlist>

      All except the last (probes) are fairly self-explanatory and
      will be dealt with in subsequent chapters.  This section
      describes how probes appear to the user running a Swarm
      simulation, and how the user can manipulate them.  Probes also
      serve purposes <emphasis>other</emphasis> than assisting
      graphical widgets that the user can manipulate, however in this
      section we will focus only on their role in the context of the
      GUI of a running simulation.  The construction of the probes
      using the Swarm libraries is also left to a subsequent chapter.

    </para>

  </sect2>

  <sect2>
    <title>GUI Probe Displays</title>

    <para>Graphical `probes' allow a user to view a snapshot of any
      object in a Swarm simulation in a graphical form.  There are two
      distinct kinds of displays the user might see:</para>

    <itemizedlist>

      <listitem><formalpara><title>DefaultProbeMaps</title> <para>If
          an object to be probed is specified
          <emphasis>without</emphasis> any particular
          <classname>ProbeMap</classname> being specified, then the
          ProbeDisplay generated will provide a window of class
          DefaultProbeDisplay, which displays all the variables
          resident in that class structure.

            <figure id="gui-probemap-complete.figure">
              <title>Default ProbeMap (also showing the superclass)</title>
              <graphic entityref="gui-probemap-complete" scale="80"></graphic>
            </figure>

          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara><title>CustomProbeMaps</title> <para>If a
          <classname>ProbeMap</classname> <emphasis>is</emphasis>
          specified then the <classname>ProbeDisplay</classname>
          follows exactly the specification as represented by the
          contents of a `ProbeMap'. When used in this manner,
          ProbeDisplays can generate tailored interfaces to objects
          (so for example, we have purposefully hidden certain
          instance variables in the
          <classname>MousetrapModelSwarm</classname> class, and have
          shown only one of the methods which the class understands).
            <figure id="gui-probemap-customized.figure">
              <title>Custom ProbeMap</title>
              <graphic entityref="gui-probemap-customized"></graphic>
            </figure>
          </para>
        </formalpara>
      </listitem>

    </itemizedlist>

  </sect2>

  <sect2>
    <title>Using the GUI Probe Display</title>

    <para>Common to both the standard ProbeDisplay and the
      CompleteProbeDisplay:</para>
    
    <itemizedlist>
      <listitem> <para>The different fields in the ProbeDisplay can be
          updated by typing in new values and pressing
          <literal>Return</literal>.  However, certain fields
          (containing pointers or ids, for example) cannot be modified
          and will generate a beep if such a modification is
          attempted.</para></listitem>

      <listitem><para> If an instance variable/argument slot is
          defined to hold an object, then that object can be
          drag&amp;dropped into another variable/argument slot by
          clicking on it with the <literal>first mouse
            button</literal> (a small rectangle with the name of the
          object will appear - simply drag it to another
          object-typed variable/argument slot and release the mouse
          button).</para></listitem>

      <listitem><para> Also, if an instance variable/argument slot
          is defined to hold an object, then that object can be
          inspected by clicking the entry for that variable/argument
          slot with the <literal>third mouse button </literal>(a
          ProbeDisplay for that object will be
          generated).</para></listitem>
    </itemizedlist>

    <para>Available only on the customized ProbeDisplay:</para>
    
    <itemizedlist>
      <listitem><para> Note that the sunken label at the top of the
          ProbeDisplay is also active.  By clicking on it with the
          <literal>first mouse button</literal> you get a
          drag&amp;drop'able representation of
          <varname>self</varname>. By clicking on it with the
          <literal>third mouse button</literal> you get a
          CompleteProbeDisplay to
          <varname>self</varname>.</para>
      </listitem>

    </itemizedlist>

    <para>Available only on the CompleteProbeDisplay:</para>
    
    <itemizedlist>
      <listitem><para> The green "superclass" button can be used to
          display the succesive superclasses of the object being
          probed.</para></listitem>

      <listitem><para> The red "hide" button can be used to hide
          classes which are irrelevant thus reducing
          clutter.</para></listitem>

      <listitem><para> The hide button on the lowest class in the
          hierarchy has a special meaning since clicking on it
          dismisses the entire ProbeDisplay.</para></listitem>

    </itemizedlist>

  </sect2>
  
</sect1>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "SECT1")
End:
-->
