<chapter id="swarm.user.user1.03.chapter">

  <indexterm significance="preferred">
    <primary>object-oriented programming</primary>
  </indexterm>

  <title>Nuts and Bolts of Object-Oriented Programming</title>

  <sect1 id="swarm.user.user1.03-multi-lang.sect1">
    <title>Multilanguage support and Swarm</title>

    <para>Swarm is not a single application that is `turned on'. Swarm
      is a set of libraries that you can pick and choose features
      from. In order to use the Swarm libraries, it is necessary to
      create or use code that calls Swarm features.</para>

    <sect2 id="swarm.user.user1.03-multi-lang-objc.sect2">
      <indexterm significance="preferred">
        <primary>Objective C</primary>
      </indexterm>
      
      <title>Objective C</title>

      <para>Until recently, there was one way to use Swarm features:
        write and compile a program in Objective C. This is a flexible
        and way to write a model using Swarm. Objective C models tend to
        have good performance because they are compiled by a native code
        optimizing compiler, namely
        <application>GCC</application>.</para>

      <para>Objective C was created by Brad Cox 
        <citation>NeXT, 1993</citation>. The aim was to create
        an elegant, object-oriented extension of C in the style of the
        Smalltalk language <citation>Goldberg & Robson, 1989</citation>.  
        Objective C was used most intensively in the design of the
        NeXT computer operating system, which is now owned by Apple
        and is basis of Apple's runtime environment WebObjects.</para>
    </sect2>

    <sect2 id="swarm.user.user1.03-multi-lang-java.sect2">
      <indexterm significance="preferred">
        <primary>Java</primary>
      </indexterm>
      
      <title>Java</title> 

      <para>Since Swarm 2.0, modellers can use Java. For new users of
        Swarm, writing models in Java is considerably harder to get
        wrong. Java is also a more attractive languages for new users
        to learn since it is a popular language that has benefits
        outside of Swarm modelling.</para>

      <para>Java was created by Sun Microsystems, initially to provide
        a platform-independent layer or interface for embedded devices
        (such as set-top boxes for digital television) and was
        originally known as <firstterm>Oak</firstterm>.  With the
        advent and growth of the world wide web from 1992 onwards, Oak
        was renamed <emphasis>Java</emphasis> and redirected at the
        market created by the web.  <quote>Write once, run
        anywhere</quote> was the motto of the original Java
        developers, the idea being to create an abstraction layer
        between the programmer and the underlying chip architecture
        (ix86, Sparc, Alpha) known as a <firstterm>virtual
        machine</firstterm> (or interpreter)<footnote> <para>In theory
        all programmers needed to do was to write so-called "pure
        Java" code that targeted the virtual machine, whilst the
        virtual machine itself only needed to ported once to each new
        architecture or chip, by the maintainers of the language
        itself (rather than the applications programmer).  With
        certain caveats, this has been largely realized, and Java is
        now a robust platform that is used in both web client GUI
        programming (applets) as well as server applications
        (servlets).  Use of Java does come at a cost, the extra step
        of translating the virtual machine instructions into the
        native machine instructions at run-time does have a
        performance penalty at run-time, but with the advent of
        so-called <firstterm>native compilers</firstterm> which do
        this translation at compile-time (rather than at run-time),
        many applications can, in principle, run much faster than they
        currently do.</para> </footnote></para>

      <para>The purpose of the Java layer of Swarm (actually it is a
        system that is potentially extensible to other languages such as
        Scheme or C++) is to mirror the <firstterm>protocols</firstterm>
        of the Swarm libraries as Java
        <firstterm>interfaces</firstterm>.</para>
    
    <note>
      <para>For more details on the ongoing work of integrating
        Swarm with other languages and simulation technologies such
        as XML and Scheme, see the paper <citetitle>Integrating
          Simulation Technologies With Swarm</citetitle>
        <citation>Daniels, 1999</citation>.
        </para>
    </note>

    </sect2>
    
    <sect2 id="swarm.user.user1.03-multi-lang-why.sect2">
      <title>Why is Swarm Written in Objective C?</title>
      
      <para>Since Objective C is not currently a mainstream
        programming language, it is natural to ask why the Swarm
        project chose Objective C. There are a number of reasons:

      <itemizedlist>
       <listitem>
          
          <formalpara><title>Objective C is easier to learn</title>
            <para>Objective C takes the familiar C language and adds a
              few simple elements. Objective C does not allow
              overloading or multiple inheritance of classes (although
              the use of protocols enables this, to an extent)</para>
          </formalpara>

        </listitem>

	<listitem>
          <formalpara><title>Objective C allows run-time binding</title> 

            <para>In contrast to other languages which check the match
            between the receiver of a command and its ability to carry
            out the command when a program is compiled, Objective C
            leaves that matching exercise until the program is
            running.  This means, for example, that one can have a
            program that builds a list of objects and then sends a
            message to each one.  In Objective C, the compiler won't
            worry about which type of object is in the list. The
            advantage, conceptually, is that one can put commands in
            their code without knowing the precise identity of the
            receiver, so code can be written to allow an environment
            and set of objects to change and evolve. The disadvantage,
            as critics of run-time binding will quickly point out, is
            that programs crash when an object recieves a message and
            it does not have the method that it is being told to
            execute.  The organization of Swarm into protocols reduces
            the risk of these crashes, however, because the compiler
            does check and issue a warning if a method is not
            implemented in a class that advertises a certain
            protocol.</para>
          </formalpara>
        </listitem> 
        </itemizedlist>
      </para>
    </sect2>
  </sect1>
  
  <sect1 id="swarm.user.user1.03-objc.sect1">
    <title>Objective C Basics</title>
    
    <sect2 id="swarm.user.user1.03-objc-id.sect2">
    <title>The <type>id</type> Variable Type</title>

    <para>The variable type that is added by Objective C is
      <type>id</type>.  It is the default type for objects in
      Objective C. Think of this as a special variable type (which is
      actually a pointer to a special data structure - namely the
      object)</para>

    <para>All objects can refer to themselves by using the label
      <varname>self</varname>.  This is necessary if, in the code that
      defines the object, the programmer wants to make the object
      execute one of its methods.  For example, suppose an object has
      a method called <function>updateRecords</function>.  If a
      command</para>

    <programlisting role="ObjC">[self updateRecords];</programlisting>

    <para> is received, then the <function>updateRecords</function>
      command will be executed, presumably to cause the updating of
      instance variables. </para>
    
    <para>All objects can refer to superclass by the name
      <varname>super</varname>. For example:</para>

    <programlisting role="ObjC">[super updateRecords]</programlisting>

    </sect2>
  
    <sect2 id="swarm.user.user1.03-objc-interface.sect2">
      <title>Interface File: Declaration of a Class</title> 
      
      <para>If you look in a directory where some Objective C Swarm
      code resides, you will see files in pairs, such as
      <filename>ObserverSwarm.h</filename> and
      <filename>ObserverSwarm.m</filename>, ModelSwarm.h and
      <filename>ModelSwarm.m</filename>, and so forth.  The "h" files
      are the interface files (commonly called <firstterm>header
      files</firstterm>), while the "m" files are the
      <firstterm>implementation files</firstterm></para>
      
      <figure id="objc-basics.figure">
        <title>Objective C Basics</title>
        <graphic entityref="objc-basics"></graphic>
      </figure>
      
      <para>As illustrated in <xref linkend="objc-basics.figure">, the
      interface declares the name of the class and the name of its
      superclass.  Then it gives a list of variable types and names
      enclosed by braces ({}), and then the names of the methods that
      the class can implement are listed. The variables defined in
      this list can be used by any of the methods defined for the
      class.  (These are often called "ivars", short for instance
      variables.)
    <example id="swarm.user.user1.03.objc-class.example">
          <title>Objective C class</title>
          
<programlisting role="ObjC">
<co id="objc-decl">@interface Bug<co id="objc-subclass"> : SwarmObject<co id="objc-superclass"> 
{
  int xPos, yPos;
  int worldXSize, worldYSize;<co id="objc-instances">
  id foodSpace;
}
- setX: (int) x Y: (int) y;<co id="objc-method1">
- step;<co id="objc-method2">
- (return_type)look: (direction_type) d;<co id="objc-method3">

@end</programlisting>
          
            <calloutlist>
              <callout arearefs="objc-decl">
                <para>Declarations of instance variables and methods</para>
              </callout>
              <callout arearefs="objc-subclass">
                <para>Sub class</para>
              </callout>
              <callout arearefs="objc-superclass">
                <para>Super class</para>
              </callout>
              <callout arearefs="objc-instances">
                <para>Instance Variables</para>
              </callout>
              <callout arearefs="objc-method1">
                <para>declares method called <function>set</function> 
                that takes two arguments</para>
              </callout>
              <callout arearefs="objc-method2">
                <para>declares a method called <function>step</function>.</para>
              </callout>
            <callout arearefs="objc-method3">
              <para>declares a method called <function>look</function>
                that takes one argument of type
                <type>direction_type</type> and returns an argument of
                type <type>return_type</type>.</para>
            </callout>

            </calloutlist>
        </example>

    </para>
      
    </sect2>

    <sect2 id="swarm.user.user1.03-objc-impl.sect2">
      <title>Implementation File: Defining a Class</title> 
      
      <para>Each implementation file--the <filename>.m</filename> that
      parallels the <filename>.h</filename> -- must import its header
      file.  For the header file described above, called
      <filename>Bug.h</filename>, for example, the implementation
      looks like:</para>

    <programlisting role="ObjC">
#import "Bug.h"
@implementation  Bug
- setX: (int) x Y: (int) y
{
 xPos = x;
 yPos = y;
 return self;
}
- step
{
 // body 
 return self;
}

- (return_type)look: (direction_type)d
{
  return_type returnval;
  // body of method
  return returnval;
}
</programlisting>

      <para>This example shows a number of important features.  First,
      note that the method <function>look</function> specifies a
      return type, (<type>return_type</type>). In this example,
      <replaceable>return_type</replaceable> would have to be replaced
      by a variable type, such as <type>int</type>,
      <type>float</type>, or whatever, and
      <replaceable>returnval</replaceable> would have to be a variable
      of that type.  When that method is called, the receiving code
      must be able to accept a return of that type.  In contrast, the
      method <function>step</function> does not specify a return type.
      That means the default type, <type>id</type>, is returned.  The
      code that calls this method must be consistent with that return
      type.</para>
      
      <para>The <literal>return self</literal> command is used for two
      types of situations.  Suppose the method is not intended to
      create any output, but rather it changes some instance
      variables. For example, suppose there is some program that
      creates an instance of <classname>Bug</classname> called
      <varname>aBug</varname>. Then that object is sent this
      message:</para>
      
<programlisting role="ObjC">[aBug step]</programlisting>

      <para>In such a case, the code that calls that method does not
        expect anything back from it (except itself).  Rather than fuss
      with <type>void</type> as the return type, as one might in C,
        one can simply return <varname>self</varname>.</para>
      
      <para>In another case, one might actually intend to return the
        object to a list or another object. In such a case, return self
        will also be appropriate. If one is making a list of collected
        bugs, for example, then the usage of <literal>return
          self</literal> in that method will give back
        <varname>aBug</varname> <type>id</type> to the calling
        program. To be perfectly concrete about it, suppose the calling
        code has a list called <function>collectedBugs</function>.  Then
        using the <function>addLast</function> notation from the Swarm
        collections library, the command to add <varname>aBug</varname>
        to the list after being collected might look like this:</para>

<programlisting role="ObjC">[collectedBugs addLast: [aBug look:
aDirection]];</programlisting>
    </sect2>

    <sect2 id="swarm.user.user1.03-objc-c.sect2">
      <title>C Functions vs. Objective C Methods </title> 
      
      <para>For readers who are already familiar with C, perhaps a
        comparison of C functions against Objective C methods is in
        order. Since Objective C is a superset of C, an Objective C
        method can include any valid C commands. A method can return
        any type that a C function can return, and in addition it can
        an id (which, strictly speaking, is a pointer to an object).
        </para>

      <para>In the abstract, an Objective C method has this structure:</para>
    
<programlisting role="ObjC">
- (type)name: (type)arg1 argName2: (type)arg2 
{
 (body)
 return returnval;
}</programlisting>

    <para>In comparison, a C function would look like this:</para>

    <programlisting role="C">
(type)name((type) arg1,(type) arg2)) 
{
 (body)
 return returnval;
}</programlisting>

    <para>The code in body of an Objective C method can be exactly the
        same as in C.  The two languages are compared side-by-side in
        the following example, which describes how a function
        <function>rand_move()</function> might compare to a method
        <function>rand_move:</function>.  Of course, each of these
        assumes there are other functions and variables that can be
        accessed, but the contrast in style should be
        informative.</para>
    
      <example id="swarm.user.user1.03.c-vs-objc.example">
        <title>C vs Objective C</title>

          <informaltable frame="none" role="proglist-objc-java">
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>C </entry>
                  <entry>Objective C</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><programlisting>
void rand_move(int i) {    

 int tmp_loc;

 do{
 tmp_loc=get_rand_loc();
 } while(val[tmp_loc]!=0);

 val[location[i]]=0;
 val[tmp_loc]=i;
}</programlisting></entry>
<entry><programlisting>
- rand_move: p 
{
  id loc;

  do{
   loc=[self getRandLoc];

  } while([world at: loc]!=nil);

 [p moveTo: loc];
 return self;
}</programlisting></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </example>
      
    </sect2>

  </sect1>

  <sect1 id="swarm.user.user1.03-java.sect1">
    <title>Java Basics</title>

    <para>One of the most obvious and immediate differences between
    Objective C (and incidentally C++) and Java, is that Java does not
    partion classes into "declarations" (header files) and
    "implementations" (implementation files).  All information for any
    Java class is contained in a single <filename>.java</filename>
    file.</para>

    <para>Perhaps the best way to illustrate this is to consider the
     Java equivalent of the previous Objective C <xref
     linkend="swarm.user.user1.03.objc-class.example">.</para>
    
    <example id="swarm.user.user1.03.java-class.example">
          <title>Java class</title>
      
<programlisting>
<co id="java-decl">public class Bug<co id="java-subclass"> extends SwarmObject<co id="java-superclass"> 
{
  int xPos, yPos;
  int worldXSize, worldYSize;<co id="java-instances">
  FoodSpace foodSpace;

 public Object setX$Y (int x, int y)<co id="java-method1">
  {
    xPos = x;
    yPos = y;
    return this;
  }
 public Object step()<co id="java-method2">
  {
    // body of step() code
    return this;
  }
 public return_type look(direction_type d)<co id="java-method3">
  {
    return_type returnval;
    // body of look() code
    return returnval;
  }
}</programlisting>
          
        <calloutlist>
          <callout arearefs="java-decl">
            <para>Complete class defintion</para>
          </callout>
          <callout arearefs="java-subclass">
            <para>Sub class</para>
          </callout>
          <callout arearefs="java-superclass">
            <para>Super class</para>
          </callout>
          <callout arearefs="java-instances">
            <para>Instance Variables</para>
          </callout>
          <callout arearefs="java-method1">
            <para>declares method called <function>set$Y()</function> 
                that takes two arguments</para>
          </callout>
          <callout arearefs="java-method2">
            <para>declares a method called <function>step()</function>
            takes no arguments.</para>
          </callout>
        <callout arearefs="java-method3">
          <para>declares a method called <function>look()</function>
            that takes one argument of type
            <type>direction_type</type> and returns an argument of
            type <type>return_type</type>.</para>
        </callout>
        </calloutlist>
    </example>
    
    <para>One important distinction to notice is that Java does not
    have a notion of an <type>id</type> or "generic" data type.  All
    variables must be assigned a type, in the above example the
    <varname>foodSpace</varname> instance variable is declared as
    being of type <classname>FoodSpace</classname>.  This is because
    Java is a <firstterm>strongly typed</firstterm> language.  The
    compiler checks all types of all variables to ensure all receiver
    objects respond to the messages that are sent to them by the
    programmer.  Most of the rest of the other differences between the
    Objective C and Java examples given, lie almost purely in
    deviations of syntax.  Here are a few obvious ones (this list is
    by no means exhaustive and the reader is encouraged to consult
    their Java or Objective C reference manual for all the detailed
    syntax):
 
      <itemizedlist>
        <listitem>
          <para>In Objective C, method names and the parameters are
            interspersed, whilst in Java, the entire method name is
            given before the parameters.</para>
        </listitem>
        <listitem>
          <para>In Java <varname>self</varname> is referred to as
            <varname>this</varname> (<varname>super</varname> retains its
            meaning and syntax in both languages).  </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect1>
  
  <sect1 id="swarm.user.user1.03-inst.sect1">

    <title>Giving Life to Classes: Instantiation</title>

    <indexterm significance="preferred">
      <primary>object creation</primary>
    </indexterm>

    <indexterm>
      <primary>instantiation</primary>
      <see>object creation</see>
    </indexterm>

    <para>After the code is written to implement the class (with
      <filename>.h</filename> and <filename>.m</filename> files for
      Objective C and <filename>.java</filename> in the Java case),
      there is still work to be done. Instances of the class must be
      created. The creation of instances of a class is one of the
      specialized features of Swarm. Since the instantiation process
      can be sometimes different from the that described in the
      Objective C and Java literature, it is worth some special
      attention.</para>

    <para>The creation of the substantively important objects is often
      handled in the model swarm.  This process uses the specialized
      memory management and object creation code in the Swarm
      library.</para>
    
    <sect2 id="swarm.user.user1.03-inst-objc.sect2">
      <title>Instantiation: Objective C Style</title>

      <indexterm>
        <primary>object creation</primary>
        <secondary>in Objective C</secondary>
      </indexterm>

    <para>The objects that represent the actors in a simulation--the
      substantively important entities--are usually subclassed from
      the <classname>SwarmObject</classname> class. The "inheritance
      hierarchy" that leads to the class
      <classname>SwarmObject</classname> passes through classes that
      allow the creation and deletion of objects from a simulation.
      Objects are often created by a pair of "bookend" commands,
      <function>createBegin</function> and
      <function>createEnd</function>. This is not part of the
      Objective C syntax.  Rather, it is unique to Swarm. </para>

    <para>Suppose the <filename>Bug.h</filename> and
      <filename>Bug.m</filename> files from previous exist, and one
      wants to create an instance of that class.  In a file
      <filename>ModelSwarm.m</filename>, one would typically have a
      method called <function>buildObjects</function>, which is
      usually a method that houses all object creation. For
      example:</para>
    
     <indexterm>
        <primary>object creation</primary>
        <secondary>createBegin/createEnd</secondary>
      </indexterm>

<programlisting role="ObjC">
// Excerpt from ModelSwarm.m that creates a Bug instance
#import "Bug.h"
// {other imports and code that defines schedules, etc}
- buildObjects 
{    
    id  aBug;
    bug = [Bug createBegin: self];
    // commands that set permanent features of the agent can apppear here
    bug = [Bug createEnd];
}</programlisting>

    <para> The class's "factory object", <classname>Bug</classname>,
      is told to create an object in a memory zone that is provided by
      <classname>ModelSwarm</classname>
      (<classname>ModelSwarm</classname> is the
      <varname>self</varname>.). Then the object
      <varname>aBug</varname> is instructed to finish the creation
      process, after optional commands are added to define the
      features of the object (typically, to set permanent structural
      aspects of the class).  Many of these subtleties are explained
      in depth in later sections (see also <xref
      linkend="SWARM.USER.SWARMOBJC.APPENDIX">).</para>

    <para>Object instances need not be created by the
      <function>createBegin</function>/<function>createEnd</function>
      pair.  Objects can often be created by a simple create command
      <footnote>
          <para>For example, the Swarm collections library includes a
      class called <classname>List</classname>, which is most often
      created this way.</para></footnote>.</para>

<programlisting role="ObjC">
aBug = [Bug create: self];</programlisting>

     <para>In code written for older versions of Swarm, one will often
      see a slightly different syntax in
      <filename>ModelSwarm.m</filename>:</para>

<programlisting role="ObjC">
aBug = [Bug create: [self getZone]];
</programlisting>

      <para>In Objective C, this usage is still valid, although it is
        deprecated.  Since now the objects of type
        <classname>Swarm</classname>, like the model swarm itself, are
        memory zones, there is no need to get a zone in which to put
        the bug.  Rather, the bug can be put in the zone that is
        provided by the model swarm itself.
      </para>
      
    </sect2>

    <sect2 id="swarm.user.user1.03-inst-java.sect2">
      <indexterm>
        <primary>object creation</primary>
        <secondary>in Java</secondary>
      </indexterm>

      <indexterm>
        <primary>Java</primary>
        <secondary>constructor</secondary>
        <see>object creation</see>
      </indexterm>

      <title>Instantiation: Java Style</title> 

      <para>For most stock objects created in application Java code
        (including user-created Java classes), the entire
        <function>createBegin/createEnd</function> apparatus can be
        dispensed with.  Java uses the term
        <firstterm>constructor</firstterm> for the method that creates
        an instance of a class.  The Java interface to the Swarm
        libraries have "convenience" constructors which essentially
        bracket the entire set of create-time messages in a single
        call to the constructor (or call the constructor with no
        arguments as in the present case).  The simplest method to
        create a Java <classname>Bug</classname> object is to invoke
        the following:</para>

<programlisting>aBug = Bug (this.getZone());</programlisting>

      <para>This is equivalent to the final Objective C example given
        in the last section.  In summary here is the comparison:</para>

&startlisting-objc;aBug = [Bug create: [self getZone]];&java;aBug = Bug (this.getZone());&endlisting;

      <para>Note that the explicit <function>create:</function> method
        in the Objective C case, is made implicit in the Java case.
        <caution>
          <para>It is still possible to use the
            <function>create</function> and
            <function>createBegin/createEnd</function> apparatus in
            Java, but due to Java's strongly-typed nature, it can
            require considerably more coding overhead than in
            Objective C, and will be left to later version of the
            Guide.</para>
        </caution>
      </para>
      
    </sect2>
    
  </sect1>
  
  <sect1 id="swarm.user.user1.03-classes.sect1">
    <title>A Brief Clarification: Classes and Protocols in Objective
      C</title>
    
    <indexterm>
      <primary>protocols</primary>
      <see>Objective C</see>
    </indexterm>

    <indexterm>
      <primary>Objective C</primary>
      <secondary>protocols</secondary>
      <tertiary>usage inSwarm</tertiary>
    </indexterm>

    <para>There is one additional complication that readers should be
      aware of.  Objective C allows the creation of entities called
      protocols.  A protocol, as readers will recall from their study
      of Objective C, is a list of methods that an object is able to
      execute.  Swarm is structured by protocols, which means that
      there are lists of methods assigned to various names and classes
      inside the library "adopt" those protocols and then implement
      the methods listed in the protocols.  Hence, in the Swarm
      Reference materials present the libraries as a collection of
      classes, each of which adheres to a given set of
      protocols.</para>

    <para>To the Swarm user, the distinction between class and
      protocol is not vital most of the time.  The most important
      Swarm protocols, such as the type <classname>Swarm</classname>
      (from <filename>objectbase/Swarm.h</filename>) or
      <classname>SwarmObject</classname> (from
      <filename>objectbase/SwarmObject.h</filename>), can be used as
      if they were classes.  In the Swarm Reference Guide, there is a
      list of all protocols.  The protocols that adopt the
      <classname>CREATABLE</classname> protcol are the ones that users
      can use as if they were factory objects.  For example, the
      <classname>EZGraph</classname> protocol adopts the
      CREATABLE protocol, so when the user needs to create an
      instance, so the observer swarm file can use the EZGraph to
      create graphs.</para>  

    <indexterm><primary>object creation</primary><secondary>CREATABLE protocol</secondary></indexterm>
    
    <para> Almost all of the Swarm protocols adopt the CREATABLE
      protocol, so they can be used as if they were classes from
      which users subclass to make model swarms or individual
      agents.  It should not matter to the user that these are
      abstract defined types that have
      adopted protocols (taken on the obligation to implement methods
      listed in protocols).  The class
      <classname>SwarmObject</classname>, for example, adopts
      protocols <classname>Create</classname> and
      <classname>Drop</classname> as well as CREATABLE. This means
      that the user can act as if there is a class called
      <classname>SwarmObject</classname>, and that the SwarmObject
      will be able to respond to class methods like
      <function>createBegin</function>, and that instances created by
      SwarmObject will be able to respond to 
      <function>createEnd</function>, <function>drop</function>, or
      any other method that is listed in a protocol listed by SwarmObject.</para>
      
    <para> One of the principal advantages of protocol usage is that
      there will be compile-time warnings if the user's code tries to
      send a "bad message" to an object.  If a message tells an object
      to <function>goOutside</function>, and none of the protocols
      adopted by that agent have a method called
      <function>goOutside</function>, then the compiler will warn the
      user about it.  In a crude way, adopting a protocol is like
      advertising that a class can do certain things, and the compiler
      enforces a `truth in advertising' policy. If the compiler flags
      include -WERROR, causing all warnings to be treated as errors,
      then these warnings will stop the compilation.</para>

    <indexterm><primary>variable declarations</primary><secondary>protocol usage in</secondary></indexterm>

    <para>The fact that many of the important components of the Swarm
      library are organized as protocols can, however, be important in
      some notation. Early versions of Swarm had less emphasis on
      protocols than the current version.  As a result of the
      introduction of protocols, usage conventions have changed.  In
      Swarm, there is a class <classname>List</classname> that can be
      used to create collections.  In the "old days" of Swarm, one
      would create a statically typed object of class
      <classname>List</classname>, as this code indicates:</para>

<programlisting role="ObjC">
List * listOfPuppies;
listOfPuppies=[List create: [self getZone]];
</programlisting>

    <para>Swarm no longer allows users to statically allocate objects
    in this way.  This code will make the compiler crash, because
    there is no class inside Swarm called List, there is only a
    protocol. The compiler will fail, and the user will get a vague
    warning about a parse error in the vicinity of the List usage. </para>

    <para>We know from the Swarm Reference Guide that the <classname>List</classname> protocol
      advertises that it adopts the <classname>CREATABLE</classname>
      protocol, so the mistake is not in the usage of List to
      create the listOfPuppies.  Rather, the mistake is in the
      declaration of the listOfPuppies itself.  If one
      needs to define a variable <varname>listOfPuppies</varname> that
      has the properties of a <classname>List</classname> class item,
      the recommended approach is to create a variable of type
      <type>id</type> and indicate the protocols adopted by that
      object in brackets:</para>

    <programlisting role="ObjC">
id &lt; List &gt;  listOfPuppies;
listOfPuppies=[List create: [self getZone]];
      </programlisting>

    <para>It is also legal to define listOfPuppies as a generic
    object, as in </para>
<programlisting role="ObjC">
id listOfPuppies;
listOfPuppies=[List create: [self getZone]];
</programlisting>

    <para>This usage is legal, and the program should compile without
    difficulty.  The only shortcoming is that the user will not be
    warned if the listOfPuppies object is sent any inappropriate
    messages within the program.  When these inappropriate messages
    are sent during the run, then the program will crash, possibly
    with a message that the object listOfPuppies does not respond to
    the message it was sent. </para>
    
    <para>Since almost all of the important pieces of functionality in
      the Swarm library are now written in the protocol format and are
      CREATABLE, these details may be important. However, these
      details do not significantly change the way applications are
      designed.  Swarm entities can still be treated as classes.</para>
  </sect1>
</chapter>

<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "CHAPTER")
End:
-->
