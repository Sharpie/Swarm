<sect1 id="swarm.user.user3.02.sect1">
  <title>Collection Library</title>

<sect2>
 <title>Some Collection syntax</title> 


    <formalpara><title>getCount</title><para>
        Gives number of members</para>
    </formalpara>

    <formalpara><title>atOffset: i</title><para>
        Retrieves member at location i
      </para></formalpara>

    <formalpara><title>atOffset:i put: obj</title><para>
        Inserts obj at location i
      </para></formalpara>

    <formalpara><title>addFirst: o addLast: o</title>
      <para>Adds o at start/end of list</para></formalpara>

    <formalpara><title>getFirst,getLast</title>
      <para>Returns first/last member</para></formalpara>

    <formalpara><title>contains: o</title>
      <para>Returns 1 if o is member</para></formalpara>

    <formalpara><title>remove: o</title><para>
        Removes object o
      </para></formalpara>

    <formalpara><title>removeAll</title><para>
        Removes all</para></formalpara>

    <formalpara><title>forEach:M(message)</title><para>
        Sends message to all members</para></formalpara>

    <formalpara><title>removeFirst/Last</title><para>
        removes and returns first/last member
      </para></formalpara> 

</sect2>

<sect2>
 <title>Accessing Collections with Index</title> 

    <formalpara><title>Any collection can generate an index of
        itself</title><para> </para></formalpara>

    <formalpara><title>The index behaves as an object, and understands
        messages such as:</title><para>prev,next
        findNext: o,findPrev: o</para></formalpara>

    <formalpara><title>Using index to loop over all members:</title>
      <para>

        <programlisting>
index = [list begin: zone];
while ( o = [index next]) 
  value = [o getValue];
[index drop];
</programlisting>
</para></formalpara> 

</sect2>

<sect2>
 <title>Typical use of List</title> 

    <formalpara><title>Typical use of a List instance is to keep track
        of agent population</title><para></para></formalpara>

    <formalpara><title>At create time Model initializes each agent and
        puts him on agentList</title><para></para></formalpara>

    <formalpara><title>The agentList is then accessed by Schedule, GUI
        objects and so on...</title><para></para></formalpara>

    <example>
      <title>List</title>
      <programlisting>
<![CDATA[
for (i = 0; i < numAgents;i++) 
{
   a = [Agent create: zone];
   [a setVar1: var1];
   [a setVar2: var2];
        ...
   [a setVarN: varN];
   [agentList addLast: a];
}
]]>
</programlisting>
    </example>

</sect2>

<sect2>
 <title>The KeyedCollection</title> 

    <formalpara><title>Use KeyedCollection if you want a List that is
    continously sorted</title>
      <para></para></formalpara>
    
    <formalpara><title>Can either have seperate key objects for each
        member (Map) or treat the members as keys
        (Set)</title><para></para></formalpara>

    <formalpara><title>Important: You must provide the key object
      yourself</title> 

      <para>A key object knows how to respond to a <literal>[compare:
          obj]</literal> method call. It then retrieves the value in
          obj and responds with {-1,0,1} depending on if it is less
          than, equal to, greater than obj
      </para>
    </formalpara>

</sect2>

<sect2>
 <title>RankedList: Example of Map</title> 

<!-- image ??? -->

    <literallayout>
RankedList

Map
...
...
Agent
Agent
Agent
Key
Key
Key
</literallayout>

</sect2>
</sect1>
<!--
Local Variables:
sgml-parent-document:("userbook.sgml" "SECT1")
End:
-->
