<partintro>  <title>Simtools Introduction</title>

  <sidebar>    <title>Overview</title>

    <para>Simtools is the stdlib of Swarm. In other words, it is the
      library where we have parked many miscellaneous classes which,
      while very useful, are not specific enough to be placed in any
      other library. So, for example, simtools contains InFile,
      ObjectLoader and other I/O classes.  Simtools contains all
      <emphasis>non-GUI</emphasis> classes - for the miscellaneous
      classes that do depend on a GUI toolkit being present at
      link-time, see the documentation for the <link linkend="SWARM.SIMTOOLSGUI.SGML.REFERENCE">simtoolsgui</link> library.

    </para>

  </sidebar>

  <sect1 xreflabel="Simtools Dependencies" id="SWARM.SIMTOOLS.SGML.SECT1.DEPEND">        <title>Dependencies</title> 

    <para>Following are the other header files imported by
    <filename>simtools.h</filename>:

<programlisting>#import &lt;objectbase.h&gt;</programlisting>

      The <emphasis>objectbase</emphasis> library interface is
      included to provide the basic object support. The
      <emphasis>random </emphasis>library is <emphasis>no longer
      included</emphasis> by default.  You will need to explicitly
      include it to use the default random number generators.
    </para>

    <para>Special global functions - global.h. Users need to include
      simtools.h in their code in order to call
      <literal>initSwarm()</literal> but also in order to get access
      to a set of important pre-initialized objects which are
      generated in every simulation (e.g. <literal>      probeDisplayManager</literal>).
    </para>


  </sect1>

  <sect1 xreflabel="Simtools Compatibility" id="SWARM.SIMTOOLS.SGML.SECT1.COMPAT">        <title>Compatibility</title>

    <itemizedlist>
      <listitem>        <formalpara>          <title>1.0.5 - 1.1</title> <para>simtools has been split
          into two: simtools and <link linkend="SWARM.SIMTOOLSGUI.SGML.REFERENCE">simtoolsgui</link>.  The latter
          now contains all the classes which were GUI-related, so that
          users can compile and link pure-batch mode simulations
          (i.e. simulations that don't require Tk/Tcl/BLT, Java AWT or
          any GUI toolkit).</para>
        </formalpara>
      </listitem>

      <listitem>        <formalpara><title> 1.0.4 - 1.0.5</title>

          <para>GUISwarm now inherits from GUIComposite.  Because
            GUIComposite handles the passthru of archiving keys to
            tkobjc primitives, the method
            setControlPanelGeometryRecordName is no longer needed;
            instead, the macro SET_WINDOW_GEOMETRY_RECORD_NAME is
            provided.</para>
        </formalpara>
      </listitem>

      <listitem>        <formalpara> <title>1.0.3 - 1.0.4</title>
          <para>All functions maintain backward compatibility.  There
            are additional features, however, and features previously
            undocumented.</para>
        </formalpara>
      </listitem>
    </itemizedlist>
      
  </sect1>
<!-- 

  <SECT1 xreflabel="Simtools Usage Guide" ID="SWARM.SIMTOOLS.SGML.SECT1.USAGE">
        <TITLE>Usage Guide</TITLE>

    <PARA>Unavailable</PARA>

  </SECT1>

  <SECT1 xreflabel="Simtools Advanced Usage Guide" ID="SWARM.SIMTOOLS.SGML.SECT1.ADVUSAGE">
        <TITLE>Advanced Usage Guide</TITLE>

    <PARA>Unavailable</PARA>

  </SECT1>

  <SECT1 xreflabel="Simtools Subclassing Reference" ID="SWARM.SIMTOOLS.SGML.SECT1.SUBCLASS">
        <TITLE>Subclassing Reference</TITLE>

    <PARA>Unavailable</PARA>

  </SECT1>

  <SECT1 xreflabel="Simtools Interface Design Notes" ID="SWARM.SIMTOOLS.SGML.SECT1.DESIGN">
        <TITLE>Interface Design Notes</TITLE>

    <PARA>Unavailable</PARA>

  </SECT1>

  <SECT1 xreflabel="Simtools Implementation Notes" ID="SWARM.SIMTOOLS.SGML.SECT1.IMPL">
        <TITLE>Implementation Notes</TITLE>

    <PARA>Unavailable</PARA>
  </SECT1>

-->
</partintro>
<!--
Local Variables:
sgml-parent-document:("simtoolscont.xml" "partintro")
End:
-->
