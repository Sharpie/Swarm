<!--
// Random rel. 0.81 (Swarm rel. 1.4)
// 
// Features and changes planned for future versions
// 
// Sven Thommesen <sthomme@humsci.auburn.edu>
//
// 1999-02-05
-->

<para>The following changes and additions are contemplated for the
next release of Random for Swarm (though I don't promise they'll all
make it in -- nor when that next release will be):

<orderedlist numeration="Loweralpha">

<listitem><para>ADD a few more generators. It's good to have many
different types of generators, so you can test your model's results
with different generators and ensure that the results aren't artifacts
of the generator used. And people seem to insist on inventing new,
better ones with longer periods!</para></listitem>

<listitem><para>ADD more distributions. NOTE: if you have any strong
opinions about what distributions or generators need to be added,
please e-mail me!</para></listitem>

<listitem><para>TEST the generators, using Marsaglia's Diehard
battery, or L'Ecuyer's tests when/if those become available. This will
allow us (a) to make a choice between the implemented generators on
the basis of their statistical quality, (b) to decide what old and bad
generators to remove, and (c) to detect any bugs in my
implementation.</para></listitem>

<listitem><para>TEST the distributions, to make sure they actually
put out numbers according to the probability distribution and
parameters used.</para></listitem>

<listitem><para>ELIMINATE 'bad' old generators on the basis of
statistical tests</para></listitem>

<listitem><para>RETAIN PMMLCG as the only short-period generator, for
convenience</para></listitem>

<listitem><para>ADD an 'empirical' distribution, whose f is defined
by a set of user- supplied data</para></listitem>

<listitem><para>IMPLEMENT a version of getState/setState that is
portable across machine architectures, so that simulations may be
moved to or duplicated on other machines. (The problem: integers and
doubles are stored in different byte orders on different
systems.)</para></listitem>

<listitem><para>IMPLEMENT a proper -drop method for generators that
allocate their state vectors dynamically, freeing the state vector
memory to avoid `memory leakage'</para></listitem>

<listitem><para>REVIEW all objects for ways to make the crucial
methods run faster</para></listitem>

<listitem><para>ADD code to make all objects meter their own usage
and send the author monthly e-mails in a stealthy manner, so he can
monitor usage and perhaps start collecting a usage fee for his efforts
... ;-) (Suggested by Rick Riolo. Thanks, Rick!)</para></listitem>
</orderedlist>

Can you think of anything else? Drop me a note! -- Sven Thommesen
<email>sthomme@humsci.auburn.edu</email></para>
