<PREFACE ID="SWARM.COMPATIBILITY.SGML.PREFACE">
  <TITLE>Swarm Changes and Compatibility</TITLE>

  <SIDEBAR>
    <TITLE>Notes on Porting</TITLE>
    
    <PARA>New versions provide new features, but may have the
      unfortunate side-effect of breaking many existing
      applications. This document is intended to provide a
      step-by-step guide to updating your Swarm applications to use
      the latest version as quickly and painlessly as possible.
    </PARA>

    <PARA>This document contains detailed examples for porting
      versions equal to, or later than, Swarm 1.0.5.
    </PARA>

    <PARA>Users trying to port from versions
      <EMPHASIS>earlier</EMPHASIS> than 1.0.5, are advised to first
      view the compatibility section of the 1.0.5 swarmdocs.  First
      perform those changes in sequence, (i.e. if you have apps
      compatible with Swarm 1.0.3 - first make the 1.0.3 => 1.0.4
      changes, followed by the 1.0.4 => 1.0.5 changes) and then
      perform the changes described here. You may notice that some of
      the changes overlap as earlier versions may have merely
      deprecated some functionality, whilst later versions actually
      disabled it. This has been done to phase new functionality in,
      and old functionality out over several releases, so the user
      isn't hit with an enormous burden every minor release.
    </PARA>

    <PARA>We intend that most application changes should be covered,
      but given that we can never know in advance how a user has
      employed the software, we cannot guarantee that all potential
      application changes will be covered in the document explicitly.
    </PARA>

    <PARA><EMPHASIS>Key for changes:</EMPHASIS>
  
     <ITEMIZEDLIST>

      <LISTITEM><PARA>(*) = absolutely necessary changes (if not
        performed, will fail to compile)</PARA></LISTITEM> 
      
      <LISTITEM><PARA>(x) = not-strictly necessary, but highly
        recommended changes (deprecated coding practice, or will
        produce a compiler warning, if not performed)</PARA>
      </LISTITEM>
    
     </ITEMIZEDLIST>
    </PARA>
  </SIDEBAR>

  <sect1>
    <title>Porting from 2.0 or 2.0.1 to 2.1</title>
    <itemizedlist>
      <listitem>
        <para>Backward-compatibility Random module protocol names have
          been removed.  (Generators have the name suffix "gen" and
          distributions have the suffix "Dist".)
        </para>
      </listitem>
      <listitem>
        <para>The Archiver method
          <function>getWithZone:object:</function> was renamed to
          <function>getWithZone:key:</function>.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <title>Porting from 1.4 or 1.4.1 to 2.0</title>
    <itemizedlist>
      <listitem>
          <para>The method <function>setNumBins:</function>, found in
            the analysis library protocol <link
            linkend="swarm.analysis.ezbin.protocol">
            <classname>EZBin</classname></link> and also in the
            underlying <link linkend="SWARM.GUI.HISTOGRAM.PROTOCOL">
            <classname>Histogram</classname></link> protocol from the
            gui library, has changed its name to
            <function>setBinCount:</function>.  You will need to
            change all invocations of <function>setNumBins:</function>
            on objects that conform to either of these protocols, to
            <function>setBinCount:</function>.
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

  <sect1>
    <title>Porting from 1.3 or 1.3.1 to 1.4</title>
    <itemizedlist>
      <listitem>
        <para>The <classname>Arguments</classname> protocol has moved
          from the <literal>objectbase</literal> library to the
          <literal>defobj</literal> library.  If you were subclassing
          from the <classname>Arguments</classname> class you will now
          need to subclass from <classname>Arguments_c</classname> and
          import the <filename>defobj.h</filename> header file.</para>
      </listitem>
      <listitem>
        <para>The <classname>ListShuffler</classname> class has been
          moved from <literal>simtools</literal> to
          <literal>collections</literal>.  You must now import
          <filename>collections.h</filename>.  Alternatively you can
          use the new <function>[beginPermuted: aZone]</function>
          index creation method on a collection from the <link
          linkend="swarm.collections.collection.protocol">
          <classname>Collection</classname></link> protocol in place
          of the <classname>ListShuffler</classname> protocol.
        </para>
      </listitem>
      <listitem>

        <para>The <literal>-setLabels::</literal> and
        <literal>-setColors::</literal> methods in the <link
        linkend="SWARM.GUI.HISTOGRAM.PROTOCOL"><classname>Histogram</classname></link>
        protocol now each must be given a new <literal>count:
        (unsigned)labelCount</literal> and <literal>count:
        (unsigned)colorCount</literal> argument, respectively.  So,
        for example, the code formerly in
        <filename>MarketObserverSwarm.m</filename> in the
        <application>market</application> application was:
<programlisting role="ObjC">
[useHisto setLabels: pred];
[useHisto setColors: predictorColors];
</programlisting>
        is now changed to:
<programlisting role="ObjC">
[useHisto setLabels: pred count: numPredictorsToShow];
[useHisto setColors: predictorColors count: numPredictorsToShow];
</programlisting>
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <SECT1>
    <TITLE>Porting from 1.2 to 1.3</TITLE>
    <ITEMIZEDLIST>
      <LISTITEM>
        <PARA>The location for <filename>Makefile.appl</filename> is
          now <filename>$(SWARMHOME)/etc/swarm</filename> instead of
          <filename>$(SWARMHOME)</filename>.  Change the `include'
          directive in your application or library make file to the
          new pathname.
          </PARA>
        </LISTITEM>
      <LISTITEM>
        <PARA>ActiveGraph and ActiveOutFile have been moved to the
          analysis library.  The accommodate this, ensure that any
          source file that uses these protocols includes
          <filename>analysis.h</filename>.
        </PARA>
        </LISTITEM>
      </ITEMIZEDLIST>
  </SECT1>
  <SECT1>

    <TITLE>Porting from 1.1 to 1.2</TITLE>
    <SECT2>
      <TITLE>Major changes</TITLE>

      <PARA>There are really only two main changes which are likely to
        affect existing users, and all other changes required in
        user's applications mostly flow from these two changes:
      </PARA>

      <ITEMIZEDLIST>

        <LISTITEM>
          <PARA>All Swarm functionality is now exported through a
            single, well-defined interface: Objective C protocols.
            Essentially this means that all creatable or subclass-able
            protocols now follow the same conventions as those in the
            defobj, activity and collections libraries.  This means
            that static typing of Swarm protocols is now obsolete
            across the whole package.</PARA></LISTITEM>

        <LISTITEM>
          <PARA>Library header files no longer include any of their
            individual class header files.</PARA></LISTITEM>

        <LISTITEM>
          <PARA>The <classname>XPixmap</classname> protocol has now
            been changed to <classname>Pixmap</classname> to divorce
            itself from it's association with
            X-Windows.</PARA></LISTITEM>

      </ITEMIZEDLIST>

    </SECT2>
    
    <SECT2>
      <TITLE>Porting Guide</TITLE>

      <ITEMIZEDLIST>
        <LISTITEM><PARA>Any subclass of a class defined as a Swarm
          protocol now requires the *specific* importation of that
          protocol's header file.  Previously, only a warning was
          raised.  This particularly affects
          <classname>Swarm</classname> and
          <classname>SwarmObject</classname>.  If you define something
          like:

<PROGRAMLISTING>
  @interface MyObject: SwarmObject
</PROGRAMLISTING>

  then you need to include:

<PROGRAMLISTING>
  #import &lt;objectbase/SwarmObject.h&gt;
</PROGRAMLISTING>
 
          Similarly, if you subclass from Swarm, you will require
            <filename>objectbase/Swarm.h</filename> </PARA></LISTITEM>

        <LISTITEM><PARA>All references to objects conforming to Swarm
          protocols should either be defined to conform to the
          appropriate Swarm protocol, or be left untyped.  In no
          circumstance should it be statically typed.  In practice,
          this means that you can write, either:

<PROGRAMLISTING> 
   id &lt;Grid2d&gt; world;  OR
   id world;
</PROGRAMLISTING>

    but NOT

<PROGRAMLISTING>
   Grid2d *world;
</PROGRAMLISTING>
 
            Note that this only applies to protocols defined by Swarm
            proper, not to your own classes, although it is good
            practice to adopt a convention and stick to it.
          </PARA></LISTITEM>

      </ITEMIZEDLIST>
      
    </SECT2>

    <SECT2>
      <TITLE>Porting example:
      <application>heatbugs</application></TITLE>

      <PARA><FILENAME>HeatSpace.h</FILENAME></PARA>

      <ITEMIZEDLIST>
        <LISTITEM>
          <PARA>Include header file for
          <LITERAL>space/Diffuse2d</LITERAL> (x)</PARA>
        </LISTITEM>
      </ITEMIZEDLIST>

      <PARA><FILENAME>Heatbug.h</FILENAME></PARA>

      <ITEMIZEDLIST>
        <LISTITEM>
          <PARA>Make instance variable world conform to protocol:
              <LITERAL>id &lt;Grid2d&gt; world</LITERAL> NOT
              <LITERAL>id Grid2d *;</LITERAL> (x)</PARA>
        </LISTITEM>
      </ITEMIZEDLIST>

      <PARA><FILENAME>Heatbug.m</FILENAME></PARA>

      <ITEMIZEDLIST>
        <LISTITEM>
          <PARA>In <LITERAL>[Heatbug -setWorld:]</LITERAL> method:
          make cast to protocol not static (x)</PARA>
        </LISTITEM>
      </ITEMIZEDLIST>

      <PARA><FILENAME>HeatbugModelSwarm.h</FILENAME></PARA>
      
      <ITEMIZEDLIST>
        <LISTITEM>
          <PARA>HeatbugObserverSwarm.h</PARA>
          <ITEMIZEDLIST>
            
            <LISTITEM>
              
              <PARA>Make instance variable <LITERAL>id &lt;Grid2d&gt;
                  world</LITERAL> NOT <LITERAL>Grid2d *world</LITERAL> (x)</PARA>
              
            </LISTITEM>
            
            <LISTITEM>
              
              <PARA>Change static cast of <LITERAL>[HeatbugObserverSwarm
                  -getWorld:]</LITERAL> method to protocol version (x)</PARA>
              
            </LISTITEM>
            
            <LISTITEM>
              <PARA>Change all the below to conform to their respective
                protocols (x)
                
                <PROGRAMLISTING>
                  EZGraph *unhappyGraph;
                  Value2dDisplay *heatDisplay;
                  Object2dDisplay *heatbugDisplay;
                </PROGRAMLISTING>
              </PARA>
            </LISTITEM>
          </ITEMIZEDLIST>
        </LISTITEM>
      </ITEMIZEDLIST>
      
    </SECT2>

    <SECT2>
      <TITLE>Porting example: <APPLICATION>mousetrap</APPLICATION></TITLE>

      <PARA><FILENAME>MousetrapModelSwarm.h</FILENAME></PARA>

      <ITEMIZEDLIST>
        <LISTITEM>

          <PARA>Import <LITERAL>&lt;objectbase/Swarm.h&gt;</LITERAL>
          for subclassing from Swarm (*)</PARA>
        </LISTITEM>

        <LISTITEM>
          <PARA>Remove imports of <LITERAL>&lt;activity.h&gt;
            &lt;collections.h&gt; &lt;simtools.h&gt;
            &lt;objectbase.h&gt;</LITERAL> irrelevant, as not used in
            the interface. (x)</PARA>

        </LISTITEM>

        <LISTITEM>
          <PARA>Make instance of <LITERAL>Grid2d</LITERAL> conform to
          protocol, not static typed. (x)</PARA>
        </LISTITEM>
      </ITEMIZEDLIST>

      <PARA><FILENAME>MousetrapObserverSwarm.h</FILENAME></PARA>

      <ITEMIZEDLIST>
        <LISTITEM>
          <PARA>Make instances of <LITERAL>EZGraph,
            Object2dDisplay</LITERAL> conform to protocol, rather than
            be statically typed. (x)
          </PARA>
        </LISTITEM>
      </ITEMIZEDLIST>

      <PARA><FILENAME>Mousetrap.h</FILENAME></PARA>

      <ITEMIZEDLIST>
        <LISTITEM>
          <PARA>Remove import of
          <LITERAL>&lt;objectbase.h&gt;</LITERAL> (x)</PARA>
        </LISTITEM>
      </ITEMIZEDLIST>

    </SECT2>
  </SECT1>

  <SECT1>
    <TITLE>Porting from 1.0.5 to 1.1</TITLE>

    <SECT2>
      <TITLE>Major changes</TITLE>

      <PARA> The major changes which are likely to affect existing
      users are the following:</PARA>

      <ITEMIZEDLIST>

        <LISTITEM><PARA>Addition of a new library class "gui" which replaces
          the existing "tkobjc" library.</PARA></LISTITEM>
        
        <LISTITEM><PARA>All direct references to any Tcl/Tk code such as the
          "globalTkInterp" variable have been completely removed from
          any library code and should not be used in any
          application.</PARA></LISTITEM>

        <LISTITEM><PARA> Splitting of simtools into two separate libraries:
          simtools and simtoolsgui.  Classes that intrinsically depend
          on a GUI toolkit being present (either Tcl/Tk or Java AWT)
          were put into simtoolsgui.  This allows a user who never
          intends to use a GUI toolkit, to be able to compile, link
          and run Swarm applications <EMPHASIS>without any</EMPHASIS>
          GUI toolkit installed at all.  This was not previously
          possible.</PARA></LISTITEM>

        <LISTITEM><PARA> The above change has been made possible by the fact
          that the dependency of Tcl/Tk in the Probing mechanism has
          been completely removed. It has been replaced by the
          libffi/ffcall libraries.  Other than the fact that the user
          will need to install this new library if they are not using
          a binary distribution, this new dependence should
          <EMPHASIS>not</EMPHASIS> break any user code.</PARA></LISTITEM>

        <LISTITEM><PARA> The header file to the random library is no longer
          included in simtools.h you need to explicitly import
          random.h when you use a default random number
          generator.</PARA></LISTITEM>

        <LISTITEM><PARA>The XColormap class is now just Colormap to divorce
          it from its association with X-Windows.  Similarly, BLTGraph
          is now just Graph.</PARA></LISTITEM>
        
        <LISTITEM><PARA>The class named Histo is now named
            Histogram.</PARA></LISTITEM>

        <LISTITEM><PARA>Certain classes now enforce their defining by the
            protocol method.  For example an instance of the Raster
            class must be defined as <LITERAL>(id &lt;Raster&gt;
              r)</LITERAL> rather than <LITERAL>(Raster *
              r)</LITERAL>.</PARA></LISTITEM>

        <LISTITEM><PARA> Backwardly-compatible references to the old
            swarmobject library are no longer supported.  You should
            always use objectbase.</PARA></LISTITEM>

      </ITEMIZEDLIST>
    </SECT2>
    
    <SECT2>
      <TITLE>Porting guide</TITLE>
      <ITEMIZEDLIST>
        <LISTITEM><PARA> Always use the "gui" protocol when calling
            doing any GUI events:
            
            <ITEMIZEDLIST>
              <LISTITEM><PARA>Replace all occurences of tkobjc.h with
                  gui.h</PARA></LISTITEM>
              
              <LISTITEM><PARA><EMPHASIS>never</EMPHASIS> explicitly
                reference any Tcl/Tk-specific code, in particular
                  module with a call to globalTkInterp will no longer
                  compile.</PARA></LISTITEM>
              
            </ITEMIZEDLIST>
          </PARA>
        </LISTITEM>
        
        <LISTITEM><PARA> Using simtools/simtoolsgui: 
            
            <ITEMIZEDLIST>
              <LISTITEM><PARA>Add the header file simtoolsgui.h to
                  your list of imports whenever you are referencing
                  any of the following classes:
                
                <PROGRAMLISTING>
ActionCache, ControlPanel, SimpleProbeDisplay, ActionHolder,
GUIComposite, VarProbeWidget, ActiveGraph, GUISwarm,
ClassDisplayWidget, MessageProbeWidget, CommonProbeDisplay,
ProbeDisplay, CompleteProbeDisplay,
ProbeDisplayManager</PROGRAMLISTING>

                </PARA>
              </LISTITEM>
              
            </ITEMIZEDLIST>
          </PARA></LISTITEM>
        
        <LISTITEM><PARA> Explictly import the header when you are
            subclassing from a given class:
            
            <ITEMIZEDLIST> 
              
              <LISTITEM><PARA>You also need to import the header
                  file for any class for which you are
                subclassing.  In particular, when you are
                  creating a GUISwarm you are subclassing from
                  GUISwarm so you need to explicitly import both
                &lt;simtoolsgui.h&gt; AND
                  &lt;simtoolsgui/GUISwarm.h&gt;. The same is true
                  for &lt;objectbase/SwarmObject.h&gt; and
                  &lt;objectbase/Swarm.h&gt;</PARA></LISTITEM>
            </ITEMIZEDLIST></PARA></LISTITEM>
        
        <LISTITEM><PARA> Colormap class name change:
            
          <ITEMIZEDLIST>
              <LISTITEM><PARA>Change all references of
                  XColormap to Colormap as it is no longer
                  specific to X11.</PARA></LISTITEM>
              
              <LISTITEM><PARA> Change all method references to set the
                  Colormap for the Value2dDisplay class ([Value2dDisplay
                  -Colormap]) to lowercase ([Value2dDisplay -colormap])
                  to avoid namespace conflicts with Colormap class.  For
                  example, in <APPLICATION>heatbugs</APPLICATION>:
                  
                  <PROGRAMLISTING>
[heatDisplay setDisplayWidget: worldRaster Colormap: colormap];      
                  
                 should now be:
                  
[heatDisplay setDisplayWidget: worldRaster colormap: colormap];      

                  </PROGRAMLISTING>
                </PARA></LISTITEM>
            </ITEMIZEDLIST>
            
          </PARA></LISTITEM>
        
        <LISTITEM><PARA> Ensure that all required classes
            conform to their protocol:
            
            <ITEMIZEDLIST>
              <LISTITEM><PARA>Make all occurences of
                  (Raster *) to the protocol i.e. (id
                  &lt;Raster&gt;)</PARA></LISTITEM>
              
              <LISTITEM><PARA>Similarly change any
                  references to Colormap, ZoomRaster,
                  InFile and OutFile.</PARA></LISTITEM>
            </ITEMIZEDLIST>
          
          </PARA></LISTITEM>
        
      <LISTITEM><PARA> Import random.h explicitly:
            
            <ITEMIZEDLIST>
              <LISTITEM><PARA>The header file
                  &lt;random.h&gt; is no longer
                  included by &lt;simtools.h&gt;
                  should always <EMPHASIS>explicitly</EMPHASIS>
                  reference the random library if you
                  use it in a given module (.m) file.
                  This again reduces the inter-library
                  dependence, if you don't need to use
                  the random library in your
                  application, you shouldn't be
                  including it.  </PARA></LISTITEM>
            </ITEMIZEDLIST></PARA></LISTITEM>

        <LISTITEM><PARA> ActionCache and ControlPanel:

            <ITEMIZEDLIST>
              <LISTITEM><PARA>Make all references to -doTkEvents and
                  -waitForControlEvent be to actionCache NOT
                  controlPanel.</PARA></LISTITEM>
            </ITEMIZEDLIST>
          </PARA></LISTITEM>

      </ITEMIZEDLIST>

    </SECT2>

    <SECT2>
      <TITLE>Porting example: <APPLICATION>heatbugs</APPLICATION></TITLE>

      <PARA>To help users port their applications to 1.1, I have
        included a checklist of changes that were required to update
        <APPLICATION>heatbugs</APPLICATION> from 1.0.5 to 1.1.  This
        may help some users as a kind of "template" for changes they
        may require for their applications.  The
        <FILENAME>ChangeLog</FILENAME> entries in in the<application>
        heatbug-1.1</application> distribution also provide further
        specific information.</PARA>

      <PARA><FILENAME>Heatbug.h</FILENAME></PARA>

      <ITEMIZEDLIST> 
        <LISTITEM><PARA>
          Replace &lt;tkobjc/Raster.h> with &lt;gui.h>
          <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
          
          <LISTITEM><PARA>
            Make all occurences of (Raster *) to the protocol (id
            &lt;Raster>) <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        </ITEMIZEDLIST>
        
      <PARA><FILENAME>Heatbug.m</FILENAME></PARA>

      <ITEMIZEDLIST> 
        
        <LISTITEM><PARA>Make all occurences of (Raster *) to the protocol
          (id &lt;Raster>) <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>Removed &lt;simtools.h> altogether - not
        used. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>Added &lt;random.h> - no longer included by
          &lt;simtools.h> - should always <EMPHASIS>explicitly</EMPHASIS>
          reference the random library if you use it in your
          code. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
      </ITEMIZEDLIST>
 
      <PARA><FILENAME>HeatbugBatchSwarm.h</FILENAME></PARA>

      <ITEMIZEDLIST> 
        <LISTITEM><PARA>
          Changed &lt;swarmobject.h> to &lt;objectbase.h>
          <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
      </ITEMIZEDLIST>

      <PARA><FILENAME>HeatbugBatchSwarm.m</FILENAME></PARA>

      <ITEMIZEDLIST> 
        <LISTITEM><PARA>
          Removed redundant &lt;collections.h> <EMPHASIS>(x)</EMPHASIS></PARA></LISTITEM>
      </ITEMIZEDLIST>
      
      <PARA><FILENAME>HeatbugModelSwarm.h</FILENAME></PARA>
      
      <ITEMIZEDLIST>
        <LISTITEM><PARA>Removed &lt;tkobjc.h> irrelevant in this context - tkobjc should
          never be included directly in any case, if required use &lt;gui.h>
          <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>
          Changed &lt;swarmobject.h> to &lt;objectbase.h>. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>
          Note we need to <EMPHASIS>separately</EMPHASIS> include &lt;objectbase/Swarm.h>
          since you always need to the header file for a class if you need to
          subclass from it. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
      </ITEMIZEDLIST>
      
      <PARA><filename>HeatbugModelSwarm.m</filename></PARA>
      
      <ITEMIZEDLIST> 
        <LISTITEM><PARA>
          Include &lt;random.h> explicitly since we use the default
          random number generators. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
      </ITEMIZEDLIST>
      
      <PARA><FILENAME>HeatbugObserverSwarm.h</FILENAME></PARA>
      
      <ITEMIZEDLIST> 
        <LISTITEM><PARA>
          Change &lt;simtools.h> to &lt;simtoolsgui.h> since we are using GUI
          widgets <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>
          Explicitly import &lt;simtoolsgui/GUISwarm.h> since we subclass from
          it <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>
          Remove: &lt;swarmobject.h> &lt;space.h> &lt;activity.h>
          &lt;collections.h> all are irrelevant in the header
          file. <EMPHASIS>(x)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>&lt;tkobjc.h> has been relocated to the (.m) file as
          no gui classes are referenced directly in the header (.h)
          file.  It is now changed to
          &lt;gui.h&gt;. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>
            Change all references of XColormap to Colormap and use
            protocol form: <EMPHASIS>(*)</EMPHASIS>

<PROGRAMLISTING>
 XColormap * colormap TO
 id &lt;Colormap> colormap
</PROGRAMLISTING>

          </PARA></LISTITEM>
 
      <LISTITEM><PARA>Make ZoomRaster conform to protocol, ie:
          <EMPHASIS>(*)</EMPHASIS>
      
<PROGRAMLISTING>
 ZoomRaster * worldRaster TO
 id &lt;ZoomRaster> worldRaster
</PROGRAMLISTING>

</PARA></LISTITEM>
    </ITEMIZEDLIST>
      
      <PARA><FILENAME>HeatbugObserverSwarm.m</FILENAME></PARA>
        
      <ITEMIZEDLIST> 
        
        <LISTITEM><PARA>Change swarmobject to objectbase
          <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>Import the &lt;gui.h> in the implementation file -
          since it is not referenced in the header file
          <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>Change XColormap to Colormap - no longer specific
          to X11 - so name should not suggest
          so. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>Message to set colormap for worldRaster changed
          name from (uppercase) Colormap to (lowercase)
          colormap.<EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
        
        <LISTITEM><PARA>Call -enableDestroyNotification method on
          worldRaster after createEnd.
          <EMPHASIS>(x)</EMPHASIS></PARA></LISTITEM>
        
      </ITEMIZEDLIST>
      
      <PARA><FILENAME>main.m</FILENAME></PARA>
      
      <ITEMIZEDLIST> 
        
        <LISTITEM><PARA>Need to import &lt;simtoolsgui.h&gt; in
          addition to &lt;simtools.h&gt; since we reference GUISwarm
          methods. <EMPHASIS>(*)</EMPHASIS></PARA></LISTITEM>
      </ITEMIZEDLIST>
      
    </SECT2>

  </SECT1>

  <SECT1>
    <TITLE>Porting from 1.0.4 to 1.0.5</TITLE>

    <ITEMIZEDLIST>

      <LISTITEM><PARA>EZGraph's setGraphWindowGeometryRecordName and
          GUISwarm's setControlPanelGeometryRecordName have been
          retired.  The macro SET_WINDOW_GEOMETRY_RECORD_NAME can now
          be used in any geometry archiving context.</PARA></LISTITEM>

      <LISTITEM><PARA>After adjusting an application per previous
          item, be aware that the new internal naming conventions used
          by `GUIComposite' classes (e.g. EZBin and GUISwarm) will
          probably differ from the archiving keys in your application.
          Such widgets will probably lose their saved
          placements.</PARA></LISTITEM>

    </ITEMIZEDLIST>

  </SECT1>

  <SECT1>
    <TITLE>Porting from 1.0.3 to 1.0.4</TITLE>

    <ITEMIZEDLIST>

      <LISTITEM><PARA>doTkEvents has been moved from ControlPanel to
          ActionCache.  Be sure to direct all doTkEvent messages to
          the Swarm's instance of ActionCache and not the ControlPanel
          (a warning message will be generated
          otherwise).</PARA></LISTITEM>

      <LISTITEM><PARA>The swarmobject library has been renamed to
          objectbase.  Although the build procedure creates a link to
          maintain compatibility, applications should include
          &lt;objectbase.h&gt; instead of
          &lt;swarmobject.h&gt;.</PARA></LISTITEM>

      <LISTITEM><PARA>Avoid calling globalTkInterp in all future
          applications, it will not be supported from version 1.1
          onwards.</PARA></LISTITEM>

      <LISTITEM><PARA>If there exists a &lt;LIBRARY.h&gt; file,
          e.g. &lt;simtools.h&gt;, that file is the advertised
          interface to LIBRARY, and it will defined in terms of
          protocols.  Whenever possible, define variables in terms of
          the protocol they respond to:

          <PROGRAMLISTING> id &lt;ProbeMap&gt; probeMap; </PROGRAMLISTING>

          rather than using a static type:

          <PROGRAMLISTING>ProbeMap *probeMap; </PROGRAMLISTING>

          (One advantage of this is that fewer imports will be needed in your
          application.)  </PARA></LISTITEM>

    </ITEMIZEDLIST>
  </SECT1>

  <SECT1>
    <TITLE>Porting from 1.0.2 to 1.0.3</TITLE>

    <ITEMIZEDLIST>

      <LISTITEM><PARA>Activity Library: Reference Release-Note #3: The
          AutoDrop option for any concurrent groups is automatically
          set to the same as the schedule in which it is
          contained. (Any existing setting of the option on the
          concurrent group type is ignored.) So, in 1.0.2, if you
          didn't set the AutoDrop flag for a concurrentGroup
          initialized under a schedule, it defaulted to NO or false.
          </PARA></LISTITEM>

      <LISTITEM><PARA>Random Library: 13, 14

          <ORDEREDLIST>

            <LISTITEM><PARA>Reference Release-Note #13 This release
                includes Random v0.7, written by Sven Thommesen. This
                version adds several new bit generators and
                distributions and rearranges the
                library. (Ref. $SWARMHOME/src/random/docs/WHATS.CHANGED.in.0.7
                and WHATS.NEW.in.0.7)</PARA></LISTITEM>

            <LISTITEM><PARA>Reference Release-Note #14: With the
                addition of the ability to make use of the default
                random number generators and distributions such that
                different runs start with a different seed or with the
                same seed, the static seed was changed. This means
                that runs with 1.0.3 will not match runs made with the
                static seed for 1.0.2. This is acceptable because the
                use of the default generators and distributions is
                <EMPHASIS>DEPRECATED</EMPHASIS>.</PARA></LISTITEM>
          </ORDEREDLIST>

        </PARA></LISTITEM>
    </ITEMIZEDLIST>
  </SECT1>

  <SECT1>

    <TITLE>Porting from 1.0.0 to 1.0.1</TITLE>

    <PARA>There should not be any imcompatibilities between 1.0.1 and
      1.0.0. There are a couple of changes that affect the behavior of
      Swarm, however. The big ones are:

      <ITEMIZEDLIST>

        <LISTITEM><PARA>The automatic dropping of probe displays upon
            the dropping of an object to which those probe displays
            were attached. This could break your application code if
            you leave in the
            <PROGRAMLISTING>dropProbeDisplaysFor:</PROGRAMLISTING>
            message where you drop such an object.</PARA></LISTITEM>

        <LISTITEM><PARA>The default probeMap has changed. This is only
            an issue when
            <PROGRAMLISTING>createProbeDisplayFor:</PROGRAMLISTING> is
            called without having previously created and installed a
            probeMap for that class. The new behavior is to create a
            probeMap on-the-fly that contains only the instance
            variables for that class.</PARA></LISTITEM>

      </ITEMIZEDLIST>
    </PARA>
  </SECT1>

  <SECT1>
    <TITLE>Beta to 1.0.0</TITLE>

    <PARA>As can be expected with any software package, it is sometimes
      unavoidable that changes in the functionality of the package will
      cause incompatibilities with earlier versions. This is especially true
      when a package is a "proof-of-principle" package like Swarm.</PARA>

    <PARA>We've made an attempt to compile all the problems a user might have
      moving to the new release and put them here. Please read this thoroughly
      to decide what you might need to do to your app to get it to work with
      the new release.

      <ORDEREDLIST>

        <LISTITEM><PARA>The biggest and most pervasive problems will
            be due to the new <EMPHASIS>random</EMPHASIS>
            library. Notes on how to deal with this problem are
            provided in the <LINK LINKEND="SWARM.RANDOM.SGML.REFERENCE">documentation for the
            <EMPHASIS>random</EMPHASIS>
            library</LINK>.</PARA></LISTITEM>

        <LISTITEM>
          <PARA>A rather benign problem results from the repackaging
            of the <EMPHASIS>swarmobject</EMPHASIS> library. The
            interface to this library was brought into sync with the
            <EMPHASIS>defobj</EMPHASIS>and
            <EMPHASIS>collections</EMPHASIS> libraries. (The rest of
            the errant libraries will follow in a later release.) The
            solutions to the problems associated with this interface
            change are detailed in the <LINK LINKEND="SWARM.OBJECTBASE.SGML.REFERENCE">documentation for
            the <EMPHASIS>objectbase</EMPHASIS> library</LINK>.</PARA>
        </LISTITEM>

        <LISTITEM><PARA>There are a couple rather benign
            incompatibility introduced with 1.0 in the new
            <EMPHASIS>activity</EMPHASIS> library. Many parts of
            <EMPHASIS>activity</EMPHASIS> have changed.  But, for the
            most part, everything works exactly the same. For details
            on the incompatibilities please see the <LINK LINKEND="SWARM.ACTIVITY.SGML.REFERENCE">documentation for
            the <EMPHASIS>activity</EMPHASIS> library</LINK>. Briefly,
            the incompatibilities are:

            <ITEMIZEDLIST>

              <LISTITEM><PARA>The high-level structural changes in the
                  activity library has led to the renaming of the
                  variable
                  <PROGRAMLISTING>swarmActivity</PROGRAMLISTING>. It
                  is recommended that 

<PROGRAMLISTING>[self getActivity]</PROGRAMLISTING>

                  be used in its place
                  (if your app even used this variable, it was
                  probably in the
                  <EMPHASIS>BatchSwarm</EMPHASIS>). This is a new
                  message and it takes the place of the
                  <PROGRAMLISTING>getSwarmActivity</PROGRAMLISTING>
                  message.  But, the obsolete message has been left in
                  place for backwards compatibility.</PARA></LISTITEM>

              <LISTITEM>
                <PARA>The
                  <PROGRAMLISTING>getCurrentActivity()</PROGRAMLISTING>
                  macro is gone. If you used the old
                  getCurrentActivity() in your code, it won't work
                  now. Use of this macro was not very widespread,
                  since its main use is to access activity library
                  internals. One of the other macros should be
                  sufficient for any application.</PARA>
              </LISTITEM>

            </ITEMIZEDLIST>
            
          </PARA></LISTITEM>

        <LISTITEM><PARA> The functionality of
            <CLASSNAME>Zone</CLASSNAME>s has been greatly improved and
            expanded upon. Most of the aspects of the idea behind
            <CLASSNAME>Zone</CLASSNAME>s are now in place.  However,
            there is one incompatibility that must be noted in case
            your code is fairly old. The dropFrom: message has been
            removed. Even though it was still present in recent
            releases, its behavior was identical to drop. Any existing
            usage should be replaced by a simple drop message without
            any zone argument. SwarmObject subclasses are now
            restricted from accessing the zone that was once contained
            in an instance variable; the message getZone must be used
            instead.</PARA></LISTITEM>

      </ORDEREDLIST></PARA>

  </SECT1>
  
</PREFACE>

<!--
Local Variables:
sgml-parent-document:("refbook.sgml" "PREFACE")
End:
-->
