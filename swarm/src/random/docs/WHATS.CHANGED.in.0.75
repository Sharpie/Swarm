// ------------------------------------------------
// 
// Random rel. 0.75 (Swarm rel. 1.0.4)
// 
// CHANGES to the random library since version 0.7
// 
// Sven Thommesen <sthomme@humsci.auburn.edu>
//
// 1997-12-08
// 
// ------------------------------------------------

The following changes have been made since version 0.7:

1. Minor changes to the documentation have been made.

2. Generators and distributions: changed "%Lu" and "%qu"
to "%llu" in all printf() statements to make Solaris 
happy. Affected most .m files.

3. The method 'getDoubleSample' in the generators has
been redefined. It *was* defined as:
   return (double) [self getLongDoubleSample];
which rendered this method non-portable between architectures.
Also, the -getLongDoubleSample method takes *much* longer time
than -getDoubleSample on the UltraSparc platform under Solaris.

The method now uses only double variables.

4. Generators: the macros defining 'random' seeds have
changed, for two reasons: 

(a) in 0.7, if '-varySeed' was not specified on the 
command line, all generators created using the
-createWithDefault method were created with the *same*
seed (DEFAULTSEED). This could lead to many generators
running in lockstep, which we want to avoid.

(b) the RANDOMSEED macro sometimes returned 0 
(notably, under Solaris).

The new usage is as follows:

A. If the program is started without '-varySeed', the default
generator (randomGenerator, an MT19937 object) is started with
the fixed seed DEFAULTSEED, as before.

B. If the program is started with the '-varySeed' switch, the
default generator is started with seed PIDTIMESEED, which
depends on the process id and calendar time and will generally
be different between program runs.

C. If further generators are created using the -createWithDefaults
method, then these generators are created with the STARTSEED seed.
This seed value depends on the '-varySeed' flag:
  (a) if '-varySeed' is set, STARTSEED invokes RANDOMSEED, which
depends in an unpredictable way on program runtime. (This macro
has changed from 0.7.)
  (b) if '-varySeed' is not set, STARTSEED invokes NEXTSEED, which
creates a sequence of seed values using an inline LCG and hence is
predictable and repeatable.

If you want, you can of course specify '-varySeed' to get a different
starting seed, but create other generators using NEXTSEED explicitly.

D. Generators can of course be created using seed values supplied 
by the programmer or by the user/researcher.

E. The following macros are available for generating seed values:
  STARTSEED (=> NEXTSEED or RANDOMSEED, depending on -varySeed)
  NEXTSEED: a sequence of values created by an inline LCG
  RANDOMSEED: values that depend on the program's runtime

F. Fixed seed values DEFAULTSEED, DEFAULTSEED1, DEFAULTSEED2,
DEFAULTSEED3, DEFAULTSEED4 remain unchanged. There is also macro 
FIRSTSEED, which returns the value that the default generator was
started with.

s.t.
