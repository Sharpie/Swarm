       NOTE: Most of the tests in DIEHARD return a p-value, which            
       should be uniform on [0,1) if the input file contains truly           
       independent random bits.   Those p-values are obtained by             
       p=F(X), where F is the assumed distribution of the sample             
       random variable X---often normal. But that assumed F is just          
       an asymptotic approximation, for which the fit will be worst          
       in the tails. Thus you should not be surprised with                   
       occasional p-values near 0 or 1, such as .0012 or .9983.              
       When a bit stream really FAILS BIG, you will get p's of 0 or          
       1 to six or more places.  By all means, do not, as a                  
       Statistician might, think that a p < .025 or p> .975 means            
       that the RNG has "failed the test at the .05 level".  Such            
       p's happen among the hundreds that DIEHARD produces, even             
       with good RNG's.  So keep in mind that " p happens".                  
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            This is the BIRTHDAY SPACINGS TEST                 ::     
     :: Choose m birthdays in a year of n days.  List the spacings    ::     
     :: between the birthdays.  If j is the number of values that     ::     
     :: occur more than once in that list, then j is asymptotically   ::     
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::     
     :: must be quite large, say n>=2^18, for comparing the results   ::     
     :: to the Poisson distribution with that mean.  This test uses   ::     
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::     
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::     
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::     
     :: provides a p value.  The first test uses bits 1-24 (counting  ::     
     :: from the left) from integers in the specified file.           ::     
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::     
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::     
     :: Each set of bits provides a p-value, and the nine p-values    ::     
     :: provide a sample for a KSTEST.                                ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for SWB3gen.bin    
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  1 to 24   3.552
  duplicate       number       number 
  spacings       observed     expected
        0          12.       67.668
        1          47.      135.335
        2          83.      135.335
        3         117.       90.224
        4         103.       45.112
        5          71.       18.045
  6 to INF         67.        8.282
 Chisquare with  6 d.o.f. =   777.64 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  2 to 25   3.622
  duplicate       number       number 
  spacings       observed     expected
        0          13.       67.668
        1          43.      135.335
        2          87.      135.335
        3         119.       90.224
        4          91.       45.112
        5          65.       18.045
  6 to INF         82.        8.282
 Chisquare with  6 d.o.f. =   958.65 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  3 to 26   3.736
  duplicate       number       number 
  spacings       observed     expected
        0          20.       67.668
        1          42.      135.335
        2          63.      135.335
        3         115.       90.224
        4          95.       45.112
        5          82.       18.045
  6 to INF         83.        8.282
 Chisquare with  6 d.o.f. =  1099.37 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  4 to 27   3.652
  duplicate       number       number 
  spacings       observed     expected
        0          16.       67.668
        1          54.      135.335
        2          78.      135.335
        3         102.       90.224
        4          83.       45.112
        5          84.       18.045
  6 to INF         83.        8.282
 Chisquare with  6 d.o.f. =  1061.16 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  5 to 28   3.424
  duplicate       number       number 
  spacings       observed     expected
        0          15.       67.668
        1          51.      135.335
        2         101.      135.335
        3         108.       90.224
        4          96.       45.112
        5          67.       18.045
  6 to INF         62.        8.282
 Chisquare with  6 d.o.f. =   644.41 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  6 to 29   3.436
  duplicate       number       number 
  spacings       observed     expected
        0          16.       67.668
        1          48.      135.335
        2         111.      135.335
        3          99.       90.224
        4          88.       45.112
        5          76.       18.045
  6 to INF         62.        8.282
 Chisquare with  6 d.o.f. =   676.38 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  7 to 30   3.464
  duplicate       number       number 
  spacings       observed     expected
        0          18.       67.668
        1          43.      135.335
        2          90.      135.335
        3         120.       90.224
        4          97.       45.112
        5          75.       18.045
  6 to INF         57.        8.282
 Chisquare with  6 d.o.f. =   650.51 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  8 to 31   3.582
  duplicate       number       number 
  spacings       observed     expected
        0          16.       67.668
        1          59.      135.335
        2          92.      135.335
        3          90.       90.224
        4          95.       45.112
        5          59.       18.045
  6 to INF         89.        8.282
 Chisquare with  6 d.o.f. =  1031.22 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB3gen.bin      using bits  9 to 32   3.490
  duplicate       number       number 
  spacings       observed     expected
        0           8.       67.668
        1          53.      135.335
        2         100.      135.335
        3         105.       90.224
        4         100.       45.112
        5          67.       18.045
  6 to INF         67.        8.282
 Chisquare with  6 d.o.f. =   730.26 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
       1.000000  1.000000  1.000000  1.000000  1.000000
       1.000000  1.000000  1.000000  1.000000
  A KSTEST for the 9 p-values yields 1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::     
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::     
     :: ion 32-bit random integers.  Each set of five consecutive     ::     
     :: integers can be in one of 120 states, for the 5! possible or- ::     
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::     
     :: each provide a state. As many thousands of state transitions  ::     
     :: are observed,  cumulative counts are made of the number of    ::     
     :: occurences of each state.  Then the quadratic form in the     ::     
     :: weak inverse of the 120x120 covariance matrix yields a test   ::     
     :: equivalent to the likelihood ratio test that the 120 cell     ::     
     :: counts came from the specified (asymptotically) normal dis-   ::     
     :: tribution with the specified 120x120 covariance matrix (with  ::     
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           OPERM5 test for file SWB3gen.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom=100.176; p-value= .551954
           OPERM5 test for file SWB3gen.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 97.259; p-value= .469280
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::     
     :: 31 bits of 31 random integers from the test sequence are used ::     
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::     
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::     
     :: are rare, and their counts are pooled with those for rank 28. ::     
     :: Ranks are found for 40,000 such random matrices and a chisqua-::     
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for SWB3gen.bin    
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       200     211.4   .616651     .617
        29      5167    5134.0   .211983     .829
        30     23204   23103.0   .441134    1.270
        31     11429   11551.5  1.299589    2.569
  chisquare= 2.569 for 3 d. of f.; p-value= .591589
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::     
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::     
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::     
     :: less than 29 are rare, and their counts are pooled with those ::     
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::     
     :: and a chisquare test is performed on counts for ranks  32,31, ::     
     :: 30 and <=29.                                                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for SWB3gen.bin    
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29       220     211.4   .348364     .348
        30      5009    5134.0  3.043929    3.392
        31     23141   23103.0   .062348    3.455
        32     11630   11551.5   .533126    3.988
  chisquare= 3.988 for 3 d. of f.; p-value= .760128
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::     
     :: six random 32-bit integers from the generator under test, a   ::     
     :: specified byte is chosen, and the resulting six bytes form a  ::     
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::     
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::     
     :: pooled with those for rank 4. Ranks are found for 100,000     ::     
     :: random matrices, and a chi-square test is performed on        ::     
     :: counts for ranks 6,5 and <=4.                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
         Binary Rank Test for SWB3gen.bin    
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          935       944.3        .092        .092
          r =5        21560     21743.9       1.555       1.647
          r =6        77505     77311.8        .483       2.130
                        p=1-exp(-SUM/2)= .65523
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          958       944.3        .199        .199
          r =5        21845     21743.9        .470        .669
          r =6        77197     77311.8        .170        .839
                        p=1-exp(-SUM/2)= .34271
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          974       944.3        .934        .934
          r =5        21591     21743.9       1.075       2.009
          r =6        77435     77311.8        .196       2.206
                        p=1-exp(-SUM/2)= .66805
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          967       944.3        .546        .546
          r =5        21612     21743.9        .800       1.346
          r =6        77421     77311.8        .154       1.500
                        p=1-exp(-SUM/2)= .52763
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          939       944.3        .030        .030
          r =5        21844     21743.9        .461        .491
          r =6        77217     77311.8        .116        .607
                        p=1-exp(-SUM/2)= .26171
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          987       944.3       1.931       1.931
          r =5        21826     21743.9        .310       2.241
          r =6        77187     77311.8        .201       2.442
                        p=1-exp(-SUM/2)= .70509
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          987       944.3       1.931       1.931
          r =5        21588     21743.9       1.118       3.049
          r =6        77425     77311.8        .166       3.214
                        p=1-exp(-SUM/2)= .79954
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          946       944.3        .003        .003
          r =5        21699     21743.9        .093        .096
          r =6        77355     77311.8        .024        .120
                        p=1-exp(-SUM/2)= .05819
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          962       944.3        .332        .332
          r =5        21697     21743.9        .101        .433
          r =6        77341     77311.8        .011        .444
                        p=1-exp(-SUM/2)= .19905
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          944       944.3        .000        .000
          r =5        21601     21743.9        .939        .939
          r =6        77455     77311.8        .265       1.204
                        p=1-exp(-SUM/2)= .45241
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          942       944.3        .006        .006
          r =5        21847     21743.9        .489        .494
          r =6        77211     77311.8        .131        .626
                        p=1-exp(-SUM/2)= .26871
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          926       944.3        .355        .355
          r =5        21811     21743.9        .207        .562
          r =6        77263     77311.8        .031        .593
                        p=1-exp(-SUM/2)= .25642
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          915       944.3        .909        .909
          r =5        21855     21743.9        .568       1.477
          r =6        77230     77311.8        .087       1.563
                        p=1-exp(-SUM/2)= .54238
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          933       944.3        .135        .135
          r =5        21885     21743.9        .916       1.051
          r =6        77182     77311.8        .218       1.269
                        p=1-exp(-SUM/2)= .46975
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          941       944.3        .012        .012
          r =5        21736     21743.9        .003        .014
          r =6        77323     77311.8        .002        .016
                        p=1-exp(-SUM/2)= .00798
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1004       944.3       3.774       3.774
          r =5        21714     21743.9        .041       3.815
          r =6        77282     77311.8        .011       3.827
                        p=1-exp(-SUM/2)= .85242
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          936       944.3        .073        .073
          r =5        21791     21743.9        .102        .175
          r =6        77273     77311.8        .019        .194
                        p=1-exp(-SUM/2)= .09266
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          947       944.3        .008        .008
          r =5        21750     21743.9        .002        .009
          r =6        77303     77311.8        .001        .010
                        p=1-exp(-SUM/2)= .00520
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          955       944.3        .121        .121
          r =5        21641     21743.9        .487        .608
          r =6        77404     77311.8        .110        .718
                        p=1-exp(-SUM/2)= .30167
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          968       944.3        .595        .595
          r =5        21749     21743.9        .001        .596
          r =6        77283     77311.8        .011        .607
                        p=1-exp(-SUM/2)= .26165
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          989       944.3       2.116       2.116
          r =5        21735     21743.9        .004       2.119
          r =6        77276     77311.8        .017       2.136
                        p=1-exp(-SUM/2)= .65631
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          948       944.3        .014        .014
          r =5        21740     21743.9        .001        .015
          r =6        77312     77311.8        .000        .015
                        p=1-exp(-SUM/2)= .00757
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          936       944.3        .073        .073
          r =5        21800     21743.9        .145        .218
          r =6        77264     77311.8        .030        .247
                        p=1-exp(-SUM/2)= .11630
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          938       944.3        .042        .042
          r =5        21826     21743.9        .310        .352
          r =6        77236     77311.8        .074        .426
                        p=1-exp(-SUM/2)= .19199
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB3gen.bin    
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          978       944.3       1.203       1.203
          r =5        21923     21743.9       1.475       2.678
          r =6        77099     77311.8        .586       3.264
                        p=1-exp(-SUM/2)= .80442
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .655228     .342714     .668047     .527626     .261708
     .705092     .799535     .058192     .199048     .452410
     .268712     .256422     .542378     .469749     .007984
     .852419     .092660     .005200     .301668     .261654
     .656313     .007565     .116299     .191990     .804417
   brank test summary for SWB3gen.bin    
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .960871

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::                   THE BITSTREAM TEST                          ::     
     :: The file under test is viewed as a stream of bits. Call them  ::     
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::     
     :: and think of the stream of bits as a succession of 20-letter  ::     
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::     
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::     
     :: the number of missing 20-letter (20-bit) words in a string of ::     
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::     
     :: letter words.  For a truly random string of 2^21+19 bits, the ::     
     :: number of missing words j should be (very close to) normally  ::     
     :: distributed with mean 141,909 and sigma 428.  Thus            ::     
     ::  (j-141909)/428 should be a standard normal variate (z score) ::     
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::     
     :: twenty times.                                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
       THE OVERLAPPING 20-tuples BITSTREAM TEST,
            20 BITS PER WORD, 2^21 words.
    This test samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
-----------------------------------        ---------------
 tst no  1:  141592 missing words,    -.74 sigmas from mean, p-value= .22922
 tst no  2:  141330 missing words,   -1.35 sigmas from mean, p-value= .08794
 tst no  3:  141774 missing words,    -.32 sigmas from mean, p-value= .37593
 tst no  4:  142378 missing words,    1.10 sigmas from mean, p-value= .86325
 tst no  5:  141548 missing words,    -.84 sigmas from mean, p-value= .19927
 tst no  6:  141881 missing words,    -.07 sigmas from mean, p-value= .47361
 tst no  7:  141949 missing words,     .09 sigmas from mean, p-value= .53693
 tst no  8:  141826 missing words,    -.19 sigmas from mean, p-value= .42282
 tst no  9:  141982 missing words,     .17 sigmas from mean, p-value= .56741
 tst no 10:  141269 missing words,   -1.50 sigmas from mean, p-value= .06731
 tst no 11:  141543 missing words,    -.86 sigmas from mean, p-value= .19602
 tst no 12:  141869 missing words,    -.09 sigmas from mean, p-value= .46247
 tst no 13:  142187 missing words,     .65 sigmas from mean, p-value= .74176
 tst no 14:  142057 missing words,     .35 sigmas from mean, p-value= .63496
 tst no 15:  141921 missing words,     .03 sigmas from mean, p-value= .51088
 tst no 16:  141635 missing words,    -.64 sigmas from mean, p-value= .26078
 tst no 17:  141275 missing words,   -1.48 sigmas from mean, p-value= .06916
 tst no 18:  142385 missing words,    1.11 sigmas from mean, p-value= .86680
 tst no 19:  140971 missing words,   -2.19 sigmas from mean, p-value= .01418
 tst no 20:  141681 missing words,    -.53 sigmas from mean, p-value= .29685

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The tests OPSO, OQSO and DNA                      ::     
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::     
     :: The OPSO test considers 2-letter words from an alphabet of    ::     
     :: 1024 letters.  Each letter is determined by a specified ten   ::     
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::     
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::     
     :: "keystrokes")  and counts the number of missing words---that  ::     
     :: is 2-letter words which do not appear in the entire sequence. ::     
     :: That count should be very close to normally distributed with  ::     
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::     
     :: be a standard normal variable. The OPSO test takes 32 bits at ::     
     :: a time from the test file and uses a designated set of ten    ::     
     :: consecutive bits. It then restarts the file for the next de-  ::     
     :: signated 10 bits, and so on.                                  ::     
     ::                                                               ::     
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::     
     ::   The test OQSO is similar, except that it considers 4-letter ::     
     :: words from an alphabet of 32 letters, each letter determined  ::     
     :: by a designated string of 5 consecutive bits from the test    ::     
     :: file, elements of which are assumed 32-bit random integers.   ::     
     :: The mean number of missing words in a sequence of 2^21 four-  ::     
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::     
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::     
     :: extensive simulation.                                         ::     
     ::                                                               ::     
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::     
     :: determined by two designated bits in the sequence of random   ::     
     :: integers being tested.  It considers 10-letter words, so that ::     
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::     
     :: mean number of missing words from a string of 2^21  (over-    ::     
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::     
     :: The standard deviation sigma=339 was determined as for OQSO   ::     
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::     
     :: three places), not determined by simulation.                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 OPSO test for generator SWB3gen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for SWB3gen.bin     using bits 23 to 32        142315  1.399  .9191
    OPSO for SWB3gen.bin     using bits 22 to 31        141723  -.643  .2603
    OPSO for SWB3gen.bin     using bits 21 to 30        142106   .678  .7512
    OPSO for SWB3gen.bin     using bits 20 to 29        142297  1.337  .9094
    OPSO for SWB3gen.bin     using bits 19 to 28        142262  1.216  .8880
    OPSO for SWB3gen.bin     using bits 18 to 27        142158   .857  .8044
    OPSO for SWB3gen.bin     using bits 17 to 26        142630  2.485  .9935
    OPSO for SWB3gen.bin     using bits 16 to 25        141879  -.105  .4584
    OPSO for SWB3gen.bin     using bits 15 to 24        141684  -.777  .2186
    OPSO for SWB3gen.bin     using bits 14 to 23        141806  -.356  .3608
    OPSO for SWB3gen.bin     using bits 13 to 22        141471 -1.511  .0653
    OPSO for SWB3gen.bin     using bits 12 to 21        141514 -1.363  .0864
    OPSO for SWB3gen.bin     using bits 11 to 20        142239  1.137  .8722
    OPSO for SWB3gen.bin     using bits 10 to 19        141775  -.463  .3216
    OPSO for SWB3gen.bin     using bits  9 to 18        142302  1.354  .9121
    OPSO for SWB3gen.bin     using bits  8 to 17        142389  1.654  .9509
    OPSO for SWB3gen.bin     using bits  7 to 16        141975   .226  .5896
    OPSO for SWB3gen.bin     using bits  6 to 15        142107   .682  .7523
    OPSO for SWB3gen.bin     using bits  5 to 14        142107   .682  .7523
    OPSO for SWB3gen.bin     using bits  4 to 13        142358  1.547  .9391
    OPSO for SWB3gen.bin     using bits  3 to 12        142221  1.075  .8588
    OPSO for SWB3gen.bin     using bits  2 to 11        141423 -1.677  .0468
    OPSO for SWB3gen.bin     using bits  1 to 10        141938   .099  .5394
 OQSO test for generator SWB3gen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for SWB3gen.bin     using bits 28 to 32        142029   .406  .6575
    OQSO for SWB3gen.bin     using bits 27 to 31        141829  -.272  .3927
    OQSO for SWB3gen.bin     using bits 26 to 30        142125   .731  .7676
    OQSO for SWB3gen.bin     using bits 25 to 29        142106   .667  .7475
    OQSO for SWB3gen.bin     using bits 24 to 28        141700  -.710  .2390
    OQSO for SWB3gen.bin     using bits 23 to 27        141862  -.160  .4363
    OQSO for SWB3gen.bin     using bits 22 to 26        141987   .263  .6038
    OQSO for SWB3gen.bin     using bits 21 to 25        141637  -.923  .1780
    OQSO for SWB3gen.bin     using bits 20 to 24        141727  -.618  .2683
    OQSO for SWB3gen.bin     using bits 19 to 23        141558 -1.191  .1168
    OQSO for SWB3gen.bin     using bits 18 to 22        141938   .097  .5387
    OQSO for SWB3gen.bin     using bits 17 to 21        141406 -1.706  .0440
    OQSO for SWB3gen.bin     using bits 16 to 20        141669  -.815  .2076
    OQSO for SWB3gen.bin     using bits 15 to 19        141723  -.632  .2638
    OQSO for SWB3gen.bin     using bits 14 to 18        142071   .548  .7082
    OQSO for SWB3gen.bin     using bits 13 to 17        142250  1.155  .8759
    OQSO for SWB3gen.bin     using bits 12 to 16        142145   .799  .7878
    OQSO for SWB3gen.bin     using bits 11 to 15        141890  -.066  .4739
    OQSO for SWB3gen.bin     using bits 10 to 14        142131   .751  .7738
    OQSO for SWB3gen.bin     using bits  9 to 13        141961   .175  .5695
    OQSO for SWB3gen.bin     using bits  8 to 12        142293  1.301  .9033
    OQSO for SWB3gen.bin     using bits  7 to 11        142307  1.348  .9112
    OQSO for SWB3gen.bin     using bits  6 to 10        141310 -2.032  .0211
    OQSO for SWB3gen.bin     using bits  5 to  9        142028   .402  .6563
    OQSO for SWB3gen.bin     using bits  4 to  8        141838  -.242  .4045
    OQSO for SWB3gen.bin     using bits  3 to  7        141884  -.086  .4658
    OQSO for SWB3gen.bin     using bits  2 to  6        141847  -.211  .4163
    OQSO for SWB3gen.bin     using bits  1 to  5        141897  -.042  .4833
  DNA test for generator SWB3gen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for SWB3gen.bin     using bits 31 to 32        142301  1.155  .8760
     DNA for SWB3gen.bin     using bits 30 to 31        141959   .147  .5582
     DNA for SWB3gen.bin     using bits 29 to 30        142246   .993  .8397
     DNA for SWB3gen.bin     using bits 28 to 29        141797  -.331  .3702
     DNA for SWB3gen.bin     using bits 27 to 28        142007   .288  .6134
     DNA for SWB3gen.bin     using bits 26 to 27        141522 -1.143  .1266
     DNA for SWB3gen.bin     using bits 25 to 26        141433 -1.405  .0800
     DNA for SWB3gen.bin     using bits 24 to 25        141808  -.299  .3825
     DNA for SWB3gen.bin     using bits 23 to 24        141646  -.777  .2186
     DNA for SWB3gen.bin     using bits 22 to 23        141667  -.715  .2374
     DNA for SWB3gen.bin     using bits 21 to 22        141836  -.216  .4144
     DNA for SWB3gen.bin     using bits 20 to 21        142246   .993  .8397
     DNA for SWB3gen.bin     using bits 19 to 20        142415  1.492  .9321
     DNA for SWB3gen.bin     using bits 18 to 19        141399 -1.505  .0661
     DNA for SWB3gen.bin     using bits 17 to 18        141971   .182  .5722
     DNA for SWB3gen.bin     using bits 16 to 17        141361 -1.617  .0529
     DNA for SWB3gen.bin     using bits 15 to 16        142076   .492  .6885
     DNA for SWB3gen.bin     using bits 14 to 15        141646  -.777  .2186
     DNA for SWB3gen.bin     using bits 13 to 14        141948   .114  .5454
     DNA for SWB3gen.bin     using bits 12 to 13        142267  1.055  .8543
     DNA for SWB3gen.bin     using bits 11 to 12        141530 -1.119  .1316
     DNA for SWB3gen.bin     using bits 10 to 11        141867  -.125  .4503
     DNA for SWB3gen.bin     using bits  9 to 10        141980   .208  .5826
     DNA for SWB3gen.bin     using bits  8 to  9        141343 -1.671  .0474
     DNA for SWB3gen.bin     using bits  7 to  8        141785  -.367  .3569
     DNA for SWB3gen.bin     using bits  6 to  7        142330  1.241  .8927
     DNA for SWB3gen.bin     using bits  5 to  6        142052   .421  .6631
     DNA for SWB3gen.bin     using bits  4 to  5        141779  -.384  .3503
     DNA for SWB3gen.bin     using bits  3 to  4        142124   .633  .7367
     DNA for SWB3gen.bin     using bits  2 to  3        141784  -.370  .3558
     DNA for SWB3gen.bin     using bits  1 to  2        141836  -.216  .4144

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::     
     :: Consider the file under test as a stream of bytes (four per   ::     
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::     
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::     
     :: the stream of bytes provide a string of overlapping  5-letter ::     
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::     
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::     
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::     
     :: we have a monkey at a typewriter hitting five keys with vari- ::     
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::     
     :: possible 5-letter words, and from a string of 256,000 (over-  ::     
     :: lapping) 5-letter words, counts are made on the frequencies   ::     
     :: for each word.   The quadratic form in the weak inverse of    ::     
     :: the covariance matrix of the cell counts provides a chisquare ::     
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::     
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
   Test results for SWB3gen.bin    
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for SWB3gen.bin      2543.55       .616      .731036
 byte stream for SWB3gen.bin      2465.10      -.494      .310786

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::     
     :: Consider the file under test as a stream of 32-bit integers.  ::     
     :: From each integer, a specific byte is chosen , say the left-  ::     
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::     
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::     
     :: the specified bytes from successive integers provide a string ::     
     :: of (overlapping) 5-letter words, each "letter" taking values  ::     
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::     
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::     
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::     
     :: hitting five keys with with various probabilities::  37,56,70,::     
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::     
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::     
     :: are made on the frequencies for each word. The quadratic form ::     
     :: in the weak inverse of the covariance matrix of the cell      ::     
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::     
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::     
     :: and 4-letter cell counts.                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2438.75      -.866      .193200
           bits  2 to  9  2520.44       .289      .613735
           bits  3 to 10  2483.20      -.238      .406123
           bits  4 to 11  2450.50      -.700      .241963
           bits  5 to 12  2534.48       .488      .687078
           bits  6 to 13  2546.44       .657      .744348
           bits  7 to 14  2490.14      -.139      .444551
           bits  8 to 15  2476.24      -.336      .368420
           bits  9 to 16  2517.47       .247      .597596
           bits 10 to 17  2495.32      -.066      .473609
           bits 11 to 18  2494.92      -.072      .471339
           bits 12 to 19  2529.47       .417      .661601
           bits 13 to 20  2555.79       .789      .784960
           bits 14 to 21  2542.44       .600      .725834
           bits 15 to 22  2485.12      -.210      .416654
           bits 16 to 23  2541.82       .591      .722873
           bits 17 to 24  2441.96      -.821      .205881
           bits 18 to 25  2582.20      1.163      .877487
           bits 19 to 26  2681.63      2.569      .994894
           bits 20 to 27  2478.72      -.301      .381755
           bits 21 to 28  2552.69       .745      .771915
           bits 22 to 29  2458.82      -.582      .280163
           bits 23 to 30  2436.40      -.899      .184221
           bits 24 to 31  2533.60       .475      .682672
           bits 25 to 32  2479.02      -.297      .383347

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THIS IS A PARKING LOT TEST                      ::     
     :: In a square of side 100, randomly "park" a car---a circle of  ::     
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::     
     :: time parking "by ear".  That is, if an attempt to park a car  ::     
     :: causes a crash with one already parked, try again at a new    ::     
     :: random location. (To avoid path problems, consider parking    ::     
     :: helicopters rather than cars.)   Each attempt leads to either ::     
     :: a crash or a success, the latter followed by an increment to  ::     
     :: the list of cars already parked. If we plot n:  the number of ::     
     :: attempts, versus k::  the number successfully parked, we get a::     
     :: curve that should be similar to those provided by a perfect   ::     
     :: random number generator.  Theory for the behavior of such a   ::     
     :: random curve seems beyond reach, and as graphics displays are ::     
     :: not available for this battery of tests, a simple characteriz ::     
     :: ation of the random experiment is used: k, the number of cars ::     
     :: successfully parked after n=12,000 attempts. Simulation shows ::     
     :: that k should average 3523 with sigma 21.9 and is very close  ::     
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::     
     :: andard normal variable, which, converted to a uniform varia-  ::     
     :: ble, provides input to a KSTEST based on a sample of 10.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           CDPARK: result of ten tests on file SWB3gen.bin    
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3530    z-score:   .320 p-value: .625377
            Successes: 3503    z-score:  -.913 p-value: .180558
            Successes: 3531    z-score:   .365 p-value: .642555
            Successes: 3497    z-score: -1.187 p-value: .117571
            Successes: 3540    z-score:   .776 p-value: .781201
            Successes: 3559    z-score:  1.644 p-value: .949895
            Successes: 3515    z-score:  -.365 p-value: .357445
            Successes: 3504    z-score:  -.868 p-value: .192812
            Successes: 3533    z-score:   .457 p-value: .676028
            Successes: 3521    z-score:  -.091 p-value: .463618

           square size   avg. no.  parked   sample sigma
             100.            3523.300       18.154
            KSTEST for the above 10: p=  .024040

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THE MINIMUM DISTANCE TEST                       ::     
     :: It does this 100 times::   choose n=8000 random points in a   ::     
     :: square of side 10000.  Find d, the minimum distance between   ::     
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::     
     :: pendent uniform, then d^2, the square of the minimum distance ::     
     :: should be (very close to) exponentially distributed with mean ::     
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::     
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::     
     :: formity for random points in the square. Test numbers=0 mod 5 ::     
     :: are printed but the KSTEST is based on the full set of 100    ::     
     :: random choices of 8000 points in the 10000x10000 square.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               This is the MINIMUM DISTANCE test
              for random integers in the file SWB3gen.bin    
     Sample no.    d^2     avg     equiv uni            
           5     .5656    .8303     .433582
          10     .2180    .7415     .196726
          15    2.6345    .8833     .929192
          20    1.8156    .8045     .838730
          25    2.3690    .9118     .907534
          30     .1978    .9291     .180277
          35     .1019    .9029     .097331
          40    1.4564    .8704     .768630
          45     .0302    .8931     .029916
          50     .0911    .8715     .087474
          55    1.1986    .8460     .700191
          60    1.3358    .8950     .738821
          65     .2770    .8701     .242996
          70     .1968    .8459     .179429
          75     .0809    .8424     .078079
          80    1.2117    .8798     .704123
          85     .0255    .8645     .025293
          90     .7806    .8390     .543653
          95    2.6912    .8613     .933109
         100    1.4240    .8548     .760970
     MINIMUM DISTANCE TEST for SWB3gen.bin    
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .839375

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::              THE 3DSPHERES TEST                               ::     
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::     
     :: point, center a sphere large enough to reach the next closest ::     
     :: point. Then the volume of the smallest such sphere is (very   ::     
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::     
     :: the radius cubed is exponential with mean 30. (The mean is    ::     
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::     
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::     
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::     
     ::  KSTEST is done on the 20 p-values.                           ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               The 3DSPHERES test for file SWB3gen.bin    
 sample no:  1     r^3=  23.143     p-value= .53765
 sample no:  2     r^3=  48.759     p-value= .80315
 sample no:  3     r^3=  18.665     p-value= .46322
 sample no:  4     r^3=    .599     p-value= .01976
 sample no:  5     r^3=  56.477     p-value= .84780
 sample no:  6     r^3=  18.775     p-value= .46518
 sample no:  7     r^3=   7.900     p-value= .23152
 sample no:  8     r^3=  60.481     p-value= .86682
 sample no:  9     r^3=  18.258     p-value= .45588
 sample no: 10     r^3=  73.238     p-value= .91295
 sample no: 11     r^3=  36.622     p-value= .70498
 sample no: 12     r^3=  64.652     p-value= .88411
 sample no: 13     r^3=   8.374     p-value= .24356
 sample no: 14     r^3=  59.836     p-value= .86392
 sample no: 15     r^3=  53.026     p-value= .82924
 sample no: 16     r^3=   1.868     p-value= .06038
 sample no: 17     r^3=   1.381     p-value= .04500
 sample no: 18     r^3=  22.189     p-value= .52271
 sample no: 19     r^3=  29.699     p-value= .62841
 sample no: 20     r^3=  23.027     p-value= .53586
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file SWB3gen.bin          p-value= .503451
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::      This is the SQEEZE test                                  ::     
     ::  Random integers are floated to get uniforms on [0,1). Start- ::     
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::     
     ::  iterations necessary to reduce k to 1, using the reduction   ::     
     ::  k=ceiling(k*U), with U provided by floating integers from    ::     
     ::  the file being tested.  Such j's are found 100,000 times,    ::     
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::     
     ::  are used to provide a chi-square test for cell frequencies.  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
            RESULTS OF SQUEEZE TEST FOR SWB3gen.bin    
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
     -.8      .1      .3      .0     -.7      .5
      .8     -.6     1.4     1.3      .3     -.2
     -.2     1.2     -.2     -.4      .7      .7
    -1.0    -1.3      .5      .7    -3.5    -1.0
     -.4      .9      .6      .5      .7      .0
     1.7      .4      .2     -.4     1.6      .2
      .3    -1.3      .9      .4    -1.3     1.0
    -1.1
           Chi-square with 42 degrees of freedom: 40.462
              z-score=  -.168  p-value= .461316
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The  OVERLAPPING SUMS test                        ::     
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::     
     :: form [0,1) variables.  Then overlapping sums,                 ::     
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::     
     :: The S's are virtually normal with a certain covariance mat-   ::     
     :: rix.  A linear transformation of the S's converts them to a   ::     
     :: sequence of independent standard normals, which are converted ::     
     :: to uniform variables for a KSTEST. The  p-values from ten     ::     
     :: KSTESTs are given still another KSTEST.                       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Test no.  1      p-value  .497920
                Test no.  2      p-value  .330964
                Test no.  3      p-value  .320384
                Test no.  4      p-value  .234428
                Test no.  5      p-value  .541726
                Test no.  6      p-value  .948591
                Test no.  7      p-value  .942268
                Test no.  8      p-value  .355678
                Test no.  9      p-value  .653748
                Test no. 10      p-value  .886861
   Results of the OSUM test for SWB3gen.bin    
        KSTEST on the above 10 p-values:  .505771

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the RUNS test.  It counts runs up, and runs down, ::     
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::     
     :: ing the 32-bit integers in the specified file. This example   ::     
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::     
     :: contains an up-run of length 3, a down-run of length 2 and an ::     
     :: up-run of (at least) 2, depending on the next values.  The    ::     
     :: covariance matrices for the runs-up and runs-down are well    ::     
     :: known, leading to chisquare tests for quadratic forms in the  ::     
     :: weak inverses of the covariance matrices.  Runs are counted   ::     
     :: for sequences of length 10,000.  This is done ten times. Then ::     
     :: repeated.                                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           The RUNS test for file SWB3gen.bin    
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for SWB3gen.bin    :
       runs up; ks test for 10 p's: .617892
     runs down; ks test for 10 p's: .170305
                 Run test for SWB3gen.bin    :
       runs up; ks test for 10 p's: .213189
     runs down; ks test for 10 p's: .272521

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::     
     :: the number of wins and the number of throws necessary to end  ::     
     :: each game.  The number of wins should be (very close to) a    ::     
     :: normal with mean 200000p and variance 200000p(1-p), with      ::     
     :: p=244/495.  Throws necessary to complete the game can vary    ::     
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::     
     :: A chi-square test is made on the no.-of-throws cell counts.   ::     
     :: Each 32-bit integer from the test file provides the value for ::     
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::     
     :: and taking 1 plus the integer part of the result.             ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Results of craps test for SWB3gen.bin    
  No. of wins:  Observed Expected
                                98397    98585.86
                  98397= No. of wins, z-score= -.845 pvalue= .19914
   Analysis of Throws-per-Game:
 Chisq=  21.97 for 20 degrees of freedom, p=  .65775
               Throws Observed Expected  Chisq     Sum
                  1    66175    66666.7   3.626    3.626
                  2    38171    37654.3   7.090   10.716
                  3    26646    26954.7   3.536   14.252
                  4    19450    19313.5    .965   15.217
                  5    13914    13851.4    .283   15.500
                  6     9894     9943.5    .247   15.747
                  7     7129     7145.0    .036   15.783
                  8     5216     5139.1   1.152   16.934
                  9     3692     3699.9    .017   16.951
                 10     2678     2666.3    .051   17.002
                 11     1932     1923.3    .039   17.041
                 12     1385     1388.7    .010   17.051
                 13     1017     1003.7    .176   17.227
                 14      734      726.1    .085   17.312
                 15      534      525.8    .127   17.439
                 16      380      381.2    .003   17.443
                 17      276      276.5    .001   17.444
                 18      197      200.8    .073   17.517
                 19      145      146.0    .007   17.523
                 20      119      106.2   1.539   19.062
                 21      316      287.1   2.906   21.968
            SUMMARY  FOR SWB3gen.bin    
                p-value for no. of wins: .199142
                p-value for throws/game: .657751

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file SWB3gen.all    
