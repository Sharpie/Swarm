       NOTE: Most of the tests in DIEHARD return a p-value, which            
       should be uniform on [0,1) if the input file contains truly           
       independent random bits.   Those p-values are obtained by             
       p=F(X), where F is the assumed distribution of the sample             
       random variable X---often normal. But that assumed F is just          
       an asymptotic approximation, for which the fit will be worst          
       in the tails. Thus you should not be surprised with                   
       occasional p-values near 0 or 1, such as .0012 or .9983.              
       When a bit stream really FAILS BIG, you will get p's of 0 or          
       1 to six or more places.  By all means, do not, as a                  
       Statistician might, think that a p < .025 or p> .975 means            
       that the RNG has "failed the test at the .05 level".  Such            
       p's happen among the hundreds that DIEHARD produces, even             
       with good RNG's.  So keep in mind that " p happens".                  
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            This is the BIRTHDAY SPACINGS TEST                 ::     
     :: Choose m birthdays in a year of n days.  List the spacings    ::     
     :: between the birthdays.  If j is the number of values that     ::     
     :: occur more than once in that list, then j is asymptotically   ::     
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::     
     :: must be quite large, say n>=2^18, for comparing the results   ::     
     :: to the Poisson distribution with that mean.  This test uses   ::     
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::     
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::     
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::     
     :: provides a p value.  The first test uses bits 1-24 (counting  ::     
     :: from the left) from integers in the specified file.           ::     
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::     
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::     
     :: Each set of bits provides a p-value, and the nine p-values    ::     
     :: provide a sample for a KSTEST.                                ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for MWCgenX.bin    
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  1 to 24   2.032
  duplicate       number       number 
  spacings       observed     expected
        0          56.       67.668
        1         141.      135.335
        2         136.      135.335
        3          98.       90.224
        4          45.       45.112
        5          17.       18.045
  6 to INF          7.        8.282
 Chisquare with  6 d.o.f. =     3.18 p-value=  .214265
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  2 to 25   2.058
  duplicate       number       number 
  spacings       observed     expected
        0          71.       67.668
        1         120.      135.335
        2         137.      135.335
        3          91.       90.224
        4          53.       45.112
        5          20.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =     3.53 p-value=  .259993
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  3 to 26   1.900
  duplicate       number       number 
  spacings       observed     expected
        0          78.       67.668
        1         130.      135.335
        2         138.      135.335
        3          96.       90.224
        4          36.       45.112
        5          20.       18.045
  6 to INF          2.        8.282
 Chisquare with  6 d.o.f. =     9.03 p-value=  .827956
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  4 to 27   2.010
  duplicate       number       number 
  spacings       observed     expected
        0          67.       67.668
        1         138.      135.335
        2         139.      135.335
        3          84.       90.224
        4          43.       45.112
        5          13.       18.045
  6 to INF         16.        8.282
 Chisquare with  6 d.o.f. =     9.29 p-value=  .842071
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  5 to 28   2.000
  duplicate       number       number 
  spacings       observed     expected
        0          57.       67.668
        1         144.      135.335
        2         142.      135.335
        3          88.       90.224
        4          43.       45.112
        5          21.       18.045
  6 to INF          5.        8.282
 Chisquare with  6 d.o.f. =     4.50 p-value=  .391037
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  6 to 29   1.984
  duplicate       number       number 
  spacings       observed     expected
        0          68.       67.668
        1         137.      135.335
        2         140.      135.335
        3          94.       90.224
        4          30.       45.112
        5          18.       18.045
  6 to INF         13.        8.282
 Chisquare with  6 d.o.f. =     8.09 p-value=  .768507
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  7 to 30   1.992
  duplicate       number       number 
  spacings       observed     expected
        0          62.       67.668
        1         132.      135.335
        2         138.      135.335
        3         110.       90.224
        4          38.       45.112
        5          16.       18.045
  6 to INF          4.        8.282
 Chisquare with  6 d.o.f. =     8.51 p-value=  .796987
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  8 to 31   2.060
  duplicate       number       number 
  spacings       observed     expected
        0          66.       67.668
        1         126.      135.335
        2         129.      135.335
        3         105.       90.224
        4          48.       45.112
        5          20.       18.045
  6 to INF          6.        8.282
 Chisquare with  6 d.o.f. =     4.43 p-value=  .380919
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          MWCgenX.bin      using bits  9 to 32   1.962
  duplicate       number       number 
  spacings       observed     expected
        0          52.       67.668
        1         162.      135.335
        2         130.      135.335
        3          98.       90.224
        4          37.       45.112
        5          12.       18.045
  6 to INF          9.        8.282
 Chisquare with  6 d.o.f. =    13.31 p-value=  .961598
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
        .214265   .259993   .827956   .842071   .391037
        .768507   .796987   .380919   .961598
  A KSTEST for the 9 p-values yields  .629529

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::     
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::     
     :: ion 32-bit random integers.  Each set of five consecutive     ::     
     :: integers can be in one of 120 states, for the 5! possible or- ::     
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::     
     :: each provide a state. As many thousands of state transitions  ::     
     :: are observed,  cumulative counts are made of the number of    ::     
     :: occurences of each state.  Then the quadratic form in the     ::     
     :: weak inverse of the 120x120 covariance matrix yields a test   ::     
     :: equivalent to the likelihood ratio test that the 120 cell     ::     
     :: counts came from the specified (asymptotically) normal dis-   ::     
     :: tribution with the specified 120x120 covariance matrix (with  ::     
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           OPERM5 test for file MWCgenX.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom=102.272; p-value= .609257
           OPERM5 test for file MWCgenX.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom=102.888; p-value= .625560
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::     
     :: 31 bits of 31 random integers from the test sequence are used ::     
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::     
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::     
     :: are rare, and their counts are pooled with those for rank 28. ::     
     :: Ranks are found for 40,000 such random matrices and a chisqua-::     
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for MWCgenX.bin    
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       212     211.4   .001602     .002
        29      5117    5134.0   .056359     .058
        30     23130   23103.0   .031445     .089
        31     11541   11551.5   .009589     .099
  chisquare=  .099 for 3 d. of f.; p-value= .384562
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::     
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::     
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::     
     :: less than 29 are rare, and their counts are pooled with those ::     
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::     
     :: and a chisquare test is performed on counts for ranks  32,31, ::     
     :: 30 and <=29.                                                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for MWCgenX.bin    
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29       209     211.4   .027655     .028
        30      5022    5134.0  2.443762    2.471
        31     23128   23103.0   .026951    2.498
        32     11641   11551.5   .693058    3.191
  chisquare= 3.191 for 3 d. of f.; p-value= .673971
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::     
     :: six random 32-bit integers from the generator under test, a   ::     
     :: specified byte is chosen, and the resulting six bytes form a  ::     
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::     
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::     
     :: pooled with those for rank 4. Ranks are found for 100,000     ::     
     :: random matrices, and a chi-square test is performed on        ::     
     :: counts for ranks 6,5 and <=4.                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
         Binary Rank Test for MWCgenX.bin    
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          966       944.3        .499        .499
          r =5        21951     21743.9       1.973       2.471
          r =6        77083     77311.8        .677       3.148
                        p=1-exp(-SUM/2)= .79281
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          936       944.3        .073        .073
          r =5        21724     21743.9        .018        .091
          r =6        77340     77311.8        .010        .101
                        p=1-exp(-SUM/2)= .04947
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          950       944.3        .034        .034
          r =5        21794     21743.9        .115        .150
          r =6        77256     77311.8        .040        .190
                        p=1-exp(-SUM/2)= .09067
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          992       944.3       2.409       2.409
          r =5        21932     21743.9       1.627       4.037
          r =6        77076     77311.8        .719       4.756
                        p=1-exp(-SUM/2)= .90725
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          910       944.3       1.246       1.246
          r =5        21659     21743.9        .331       1.577
          r =6        77431     77311.8        .184       1.761
                        p=1-exp(-SUM/2)= .58548
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          942       944.3        .006        .006
          r =5        21701     21743.9        .085        .090
          r =6        77357     77311.8        .026        .117
                        p=1-exp(-SUM/2)= .05667
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          978       944.3       1.203       1.203
          r =5        21489     21743.9       2.988       4.191
          r =6        77533     77311.8        .633       4.824
                        p=1-exp(-SUM/2)= .91035
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          913       944.3       1.038       1.038
          r =5        21762     21743.9        .015       1.053
          r =6        77325     77311.8        .002       1.055
                        p=1-exp(-SUM/2)= .40989
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          939       944.3        .030        .030
          r =5        21713     21743.9        .044        .074
          r =6        77348     77311.8        .017        .091
                        p=1-exp(-SUM/2)= .04430
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          942       944.3        .006        .006
          r =5        21803     21743.9        .161        .166
          r =6        77255     77311.8        .042        .208
                        p=1-exp(-SUM/2)= .09876
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          932       944.3        .160        .160
          r =5        21659     21743.9        .331        .492
          r =6        77409     77311.8        .122        .614
                        p=1-exp(-SUM/2)= .26433
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          916       944.3        .848        .848
          r =5        21625     21743.9        .650       1.498
          r =6        77459     77311.8        .280       1.779
                        p=1-exp(-SUM/2)= .58906
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          936       944.3        .073        .073
          r =5        21674     21743.9        .225        .298
          r =6        77390     77311.8        .079        .377
                        p=1-exp(-SUM/2)= .17171
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          912       944.3       1.105       1.105
          r =5        21620     21743.9        .706       1.811
          r =6        77468     77311.8        .316       2.126
                        p=1-exp(-SUM/2)= .65467
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          955       944.3        .121        .121
          r =5        21929     21743.9       1.576       1.697
          r =6        77116     77311.8        .496       2.193
                        p=1-exp(-SUM/2)= .66593
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          968       944.3        .595        .595
          r =5        21901     21743.9       1.135       1.730
          r =6        77131     77311.8        .423       2.153
                        p=1-exp(-SUM/2)= .65915
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          946       944.3        .003        .003
          r =5        21947     21743.9       1.897       1.900
          r =6        77107     77311.8        .543       2.443
                        p=1-exp(-SUM/2)= .70516
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          984       944.3       1.669       1.669
          r =5        21898     21743.9       1.092       2.761
          r =6        77118     77311.8        .486       3.247
                        p=1-exp(-SUM/2)= .80278
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          881       944.3       4.243       4.243
          r =5        21599     21743.9        .966       5.209
          r =6        77520     77311.8        .561       5.770
                        p=1-exp(-SUM/2)= .94414
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          950       944.3        .034        .034
          r =5        21720     21743.9        .026        .061
          r =6        77330     77311.8        .004        .065
                        p=1-exp(-SUM/2)= .03195
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          957       944.3        .171        .171
          r =5        21744     21743.9        .000        .171
          r =6        77299     77311.8        .002        .173
                        p=1-exp(-SUM/2)= .08281
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          976       944.3       1.064       1.064
          r =5        21796     21743.9        .125       1.189
          r =6        77228     77311.8        .091       1.280
                        p=1-exp(-SUM/2)= .47264
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          963       944.3        .370        .370
          r =5        21593     21743.9       1.047       1.417
          r =6        77444     77311.8        .226       1.644
                        p=1-exp(-SUM/2)= .56035
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          984       944.3       1.669       1.669
          r =5        21677     21743.9        .206       1.875
          r =6        77339     77311.8        .010       1.884
                        p=1-exp(-SUM/2)= .61022
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG MWCgenX.bin    
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          929       944.3        .248        .248
          r =5        21696     21743.9        .106        .353
          r =6        77375     77311.8        .052        .405
                        p=1-exp(-SUM/2)= .18336
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .792814     .049470     .090675     .907254     .585475
     .056666     .910346     .409886     .044299     .098764
     .264327     .589062     .171706     .654666     .665932
     .659152     .705162     .802781     .944136     .031950
     .082814     .472643     .560347     .610221     .183361
   brank test summary for MWCgenX.bin    
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .692357

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::                   THE BITSTREAM TEST                          ::     
     :: The file under test is viewed as a stream of bits. Call them  ::     
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::     
     :: and think of the stream of bits as a succession of 20-letter  ::     
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::     
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::     
     :: the number of missing 20-letter (20-bit) words in a string of ::     
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::     
     :: letter words.  For a truly random string of 2^21+19 bits, the ::     
     :: number of missing words j should be (very close to) normally  ::     
     :: distributed with mean 141,909 and sigma 428.  Thus            ::     
     ::  (j-141909)/428 should be a standard normal variate (z score) ::     
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::     
     :: twenty times.                                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
       THE OVERLAPPING 20-tuples BITSTREAM TEST,
            20 BITS PER WORD, 2^21 words.
    This test samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
-----------------------------------        ---------------
 tst no  1:  141974 missing words,     .15 sigmas from mean, p-value= .56005
 tst no  2:  141989 missing words,     .19 sigmas from mean, p-value= .57384
 tst no  3:  141897 missing words,    -.03 sigmas from mean, p-value= .48851
 tst no  4:  142304 missing words,     .92 sigmas from mean, p-value= .82177
 tst no  5:  141014 missing words,   -2.09 sigmas from mean, p-value= .01822
 tst no  6:  142392 missing words,    1.13 sigmas from mean, p-value= .87028
 tst no  7:  141840 missing words,    -.16 sigmas from mean, p-value= .43566
 tst no  8:  141776 missing words,    -.31 sigmas from mean, p-value= .37770
 tst no  9:  142026 missing words,     .27 sigmas from mean, p-value= .60742
 tst no 10:  142398 missing words,    1.14 sigmas from mean, p-value= .87322
 tst no 11:  141658 missing words,    -.59 sigmas from mean, p-value= .27853
 tst no 12:  142101 missing words,     .45 sigmas from mean, p-value= .67286
 tst no 13:  141868 missing words,    -.10 sigmas from mean, p-value= .46154
 tst no 14:  141827 missing words,    -.19 sigmas from mean, p-value= .42373
 tst no 15:  142300 missing words,     .91 sigmas from mean, p-value= .81932
 tst no 16:  141908 missing words,     .00 sigmas from mean, p-value= .49876
 tst no 17:  142406 missing words,    1.16 sigmas from mean, p-value= .87707
 tst no 18:  141493 missing words,    -.97 sigmas from mean, p-value= .16534
 tst no 19:  141951 missing words,     .10 sigmas from mean, p-value= .53878
 tst no 20:  141734 missing words,    -.41 sigmas from mean, p-value= .34103

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The tests OPSO, OQSO and DNA                      ::     
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::     
     :: The OPSO test considers 2-letter words from an alphabet of    ::     
     :: 1024 letters.  Each letter is determined by a specified ten   ::     
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::     
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::     
     :: "keystrokes")  and counts the number of missing words---that  ::     
     :: is 2-letter words which do not appear in the entire sequence. ::     
     :: That count should be very close to normally distributed with  ::     
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::     
     :: be a standard normal variable. The OPSO test takes 32 bits at ::     
     :: a time from the test file and uses a designated set of ten    ::     
     :: consecutive bits. It then restarts the file for the next de-  ::     
     :: signated 10 bits, and so on.                                  ::     
     ::                                                               ::     
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::     
     ::   The test OQSO is similar, except that it considers 4-letter ::     
     :: words from an alphabet of 32 letters, each letter determined  ::     
     :: by a designated string of 5 consecutive bits from the test    ::     
     :: file, elements of which are assumed 32-bit random integers.   ::     
     :: The mean number of missing words in a sequence of 2^21 four-  ::     
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::     
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::     
     :: extensive simulation.                                         ::     
     ::                                                               ::     
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::     
     :: determined by two designated bits in the sequence of random   ::     
     :: integers being tested.  It considers 10-letter words, so that ::     
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::     
     :: mean number of missing words from a string of 2^21  (over-    ::     
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::     
     :: The standard deviation sigma=339 was determined as for OQSO   ::     
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::     
     :: three places), not determined by simulation.                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 OPSO test for generator MWCgenX.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for MWCgenX.bin     using bits 23 to 32        142252  1.182  .8813
    OPSO for MWCgenX.bin     using bits 22 to 31        142187   .957  .8308
    OPSO for MWCgenX.bin     using bits 21 to 30        141916   .023  .5092
    OPSO for MWCgenX.bin     using bits 20 to 29        141832  -.267  .3949
    OPSO for MWCgenX.bin     using bits 19 to 28        141820  -.308  .3790
    OPSO for MWCgenX.bin     using bits 18 to 27        142041   .454  .6751
    OPSO for MWCgenX.bin     using bits 17 to 26        141959   .171  .5680
    OPSO for MWCgenX.bin     using bits 16 to 25        141502 -1.405  .0801
    OPSO for MWCgenX.bin     using bits 15 to 24        141790  -.411  .3404
    OPSO for MWCgenX.bin     using bits 14 to 23        142133   .771  .7797
    OPSO for MWCgenX.bin     using bits 13 to 22        141771  -.477  .3167
    OPSO for MWCgenX.bin     using bits 12 to 21        142152   .837  .7986
    OPSO for MWCgenX.bin     using bits 11 to 20        141804  -.363  .3582
    OPSO for MWCgenX.bin     using bits 10 to 19        142169   .895  .8147
    OPSO for MWCgenX.bin     using bits  9 to 18        141465 -1.532  .0627
    OPSO for MWCgenX.bin     using bits  8 to 17        141907  -.008  .4968
    OPSO for MWCgenX.bin     using bits  7 to 16        141473 -1.505  .0662
    OPSO for MWCgenX.bin     using bits  6 to 15        141552 -1.232  .1089
    OPSO for MWCgenX.bin     using bits  5 to 14        142071   .557  .7114
    OPSO for MWCgenX.bin     using bits  4 to 13        142154   .844  .8006
    OPSO for MWCgenX.bin     using bits  3 to 12        142112   .699  .7577
    OPSO for MWCgenX.bin     using bits  2 to 11        142173   .909  .8184
    OPSO for MWCgenX.bin     using bits  1 to 10        141935   .089  .5353
 OQSO test for generator MWCgenX.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for MWCgenX.bin     using bits 28 to 32        141369 -1.832  .0335
    OQSO for MWCgenX.bin     using bits 27 to 31        141469 -1.493  .0678
    OQSO for MWCgenX.bin     using bits 26 to 30        141625  -.964  .1676
    OQSO for MWCgenX.bin     using bits 25 to 29        141959   .168  .5669
    OQSO for MWCgenX.bin     using bits 24 to 28        141547 -1.228  .1097
    OQSO for MWCgenX.bin     using bits 23 to 27        141441 -1.588  .0562
    OQSO for MWCgenX.bin     using bits 22 to 26        142065   .528  .7011
    OQSO for MWCgenX.bin     using bits 21 to 25        141497 -1.398  .0811
    OQSO for MWCgenX.bin     using bits 20 to 24        141385 -1.777  .0378
    OQSO for MWCgenX.bin     using bits 19 to 23        141830  -.269  .3940
    OQSO for MWCgenX.bin     using bits 18 to 22        142181   .921  .8215
    OQSO for MWCgenX.bin     using bits 17 to 21        141547 -1.228  .1097
    OQSO for MWCgenX.bin     using bits 16 to 20        141704  -.696  .2432
    OQSO for MWCgenX.bin     using bits 15 to 19        142534  2.118  .9829
    OQSO for MWCgenX.bin     using bits 14 to 18        142006   .328  .6284
    OQSO for MWCgenX.bin     using bits 13 to 17        141586 -1.096  .1365
    OQSO for MWCgenX.bin     using bits 12 to 16        141734  -.594  .2761
    OQSO for MWCgenX.bin     using bits 11 to 15        141966   .192  .5762
    OQSO for MWCgenX.bin     using bits 10 to 14        141948   .131  .5521
    OQSO for MWCgenX.bin     using bits  9 to 13        141739  -.577  .2818
    OQSO for MWCgenX.bin     using bits  8 to 12        141513 -1.343  .0896
    OQSO for MWCgenX.bin     using bits  7 to 11        142221  1.057  .8546
    OQSO for MWCgenX.bin     using bits  6 to 10        142151   .819  .7937
    OQSO for MWCgenX.bin     using bits  5 to  9        141674  -.798  .2125
    OQSO for MWCgenX.bin     using bits  4 to  8        141537 -1.262  .1035
    OQSO for MWCgenX.bin     using bits  3 to  7        141272 -2.160  .0154
    OQSO for MWCgenX.bin     using bits  2 to  6        141396 -1.740  .0409
    OQSO for MWCgenX.bin     using bits  1 to  5        141379 -1.798  .0361
  DNA test for generator MWCgenX.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for MWCgenX.bin     using bits 31 to 32        141936   .079  .5314
     DNA for MWCgenX.bin     using bits 30 to 31        141858  -.151  .4398
     DNA for MWCgenX.bin     using bits 29 to 30        141608  -.889  .1870
     DNA for MWCgenX.bin     using bits 28 to 29        141893  -.048  .4808
     DNA for MWCgenX.bin     using bits 27 to 28        141776  -.393  .3470
     DNA for MWCgenX.bin     using bits 26 to 27        141439 -1.387  .0827
     DNA for MWCgenX.bin     using bits 25 to 26        141873  -.107  .4573
     DNA for MWCgenX.bin     using bits 24 to 25        141997   .259  .6020
     DNA for MWCgenX.bin     using bits 23 to 24        141831  -.231  .4086
     DNA for MWCgenX.bin     using bits 22 to 23        141624  -.842  .2000
     DNA for MWCgenX.bin     using bits 21 to 22        141723  -.550  .2913
     DNA for MWCgenX.bin     using bits 20 to 21        141979   .206  .5814
     DNA for MWCgenX.bin     using bits 19 to 20        142119   .619  .7319
     DNA for MWCgenX.bin     using bits 18 to 19        141434 -1.402  .0804
     DNA for MWCgenX.bin     using bits 17 to 18        142184   .810  .7911
     DNA for MWCgenX.bin     using bits 16 to 17        141391 -1.529  .0631
     DNA for MWCgenX.bin     using bits 15 to 16        141485 -1.252  .1053
     DNA for MWCgenX.bin     using bits 14 to 15        142028   .350  .6369
     DNA for MWCgenX.bin     using bits 13 to 14        140883 -3.028  .0012
     DNA for MWCgenX.bin     using bits 12 to 13        141275 -1.871  .0307
     DNA for MWCgenX.bin     using bits 11 to 12        142464  1.636  .9491
     DNA for MWCgenX.bin     using bits 10 to 11        141938   .085  .5337
     DNA for MWCgenX.bin     using bits  9 to 10        142127   .642  .7396
     DNA for MWCgenX.bin     using bits  8 to  9        141987   .229  .5906
     DNA for MWCgenX.bin     using bits  7 to  8        141763  -.432  .3330
     DNA for MWCgenX.bin     using bits  6 to  7        142205   .872  .8084
     DNA for MWCgenX.bin     using bits  5 to  6        141086 -2.429  .0076
     DNA for MWCgenX.bin     using bits  4 to  5        141597  -.921  .1784
     DNA for MWCgenX.bin     using bits  3 to  4        141975   .194  .5768
     DNA for MWCgenX.bin     using bits  2 to  3        141883  -.078  .4690
     DNA for MWCgenX.bin     using bits  1 to  2        141667  -.715  .2374

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::     
     :: Consider the file under test as a stream of bytes (four per   ::     
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::     
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::     
     :: the stream of bytes provide a string of overlapping  5-letter ::     
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::     
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::     
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::     
     :: we have a monkey at a typewriter hitting five keys with vari- ::     
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::     
     :: possible 5-letter words, and from a string of 256,000 (over-  ::     
     :: lapping) 5-letter words, counts are made on the frequencies   ::     
     :: for each word.   The quadratic form in the weak inverse of    ::     
     :: the covariance matrix of the cell counts provides a chisquare ::     
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::     
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
   Test results for MWCgenX.bin    
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for MWCgenX.bin      2431.21      -.973      .165321
 byte stream for MWCgenX.bin      2425.62     -1.052      .146425

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::     
     :: Consider the file under test as a stream of 32-bit integers.  ::     
     :: From each integer, a specific byte is chosen , say the left-  ::     
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::     
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::     
     :: the specified bytes from successive integers provide a string ::     
     :: of (overlapping) 5-letter words, each "letter" taking values  ::     
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::     
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::     
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::     
     :: hitting five keys with with various probabilities::  37,56,70,::     
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::     
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::     
     :: are made on the frequencies for each word. The quadratic form ::     
     :: in the weak inverse of the covariance matrix of the cell      ::     
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::     
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::     
     :: and 4-letter cell counts.                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2498.99      -.014      .494287
           bits  2 to  9  2526.23       .371      .644650
           bits  3 to 10  2445.58      -.770      .220744
           bits  4 to 11  2527.72       .392      .652469
           bits  5 to 12  2559.57       .842      .800229
           bits  6 to 13  2532.98       .466      .679513
           bits  7 to 14  2538.30       .542      .705960
           bits  8 to 15  2528.35       .401      .655782
           bits  9 to 16  2510.27       .145      .557733
           bits 10 to 17  2518.77       .266      .604690
           bits 11 to 18  2548.80       .690      .754954
           bits 12 to 19  2464.10      -.508      .305816
           bits 13 to 20  2483.58      -.232      .408186
           bits 14 to 21  2613.03      1.599      .945036
           bits 15 to 22  2610.76      1.566      .941371
           bits 16 to 23  2507.97       .113      .544888
           bits 17 to 24  2411.82     -1.247      .106185
           bits 18 to 25  2463.49      -.516      .302833
           bits 19 to 26  2637.40      1.943      .974003
           bits 20 to 27  2532.10       .454      .675070
           bits 21 to 28  2485.07      -.211      .416385
           bits 22 to 29  2512.60       .178      .570688
           bits 23 to 30  2496.61      -.048      .480879
           bits 24 to 31  2565.01       .919      .821037
           bits 25 to 32  2535.04       .496      .689913

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THIS IS A PARKING LOT TEST                      ::     
     :: In a square of side 100, randomly "park" a car---a circle of  ::     
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::     
     :: time parking "by ear".  That is, if an attempt to park a car  ::     
     :: causes a crash with one already parked, try again at a new    ::     
     :: random location. (To avoid path problems, consider parking    ::     
     :: helicopters rather than cars.)   Each attempt leads to either ::     
     :: a crash or a success, the latter followed by an increment to  ::     
     :: the list of cars already parked. If we plot n:  the number of ::     
     :: attempts, versus k::  the number successfully parked, we get a::     
     :: curve that should be similar to those provided by a perfect   ::     
     :: random number generator.  Theory for the behavior of such a   ::     
     :: random curve seems beyond reach, and as graphics displays are ::     
     :: not available for this battery of tests, a simple characteriz ::     
     :: ation of the random experiment is used: k, the number of cars ::     
     :: successfully parked after n=12,000 attempts. Simulation shows ::     
     :: that k should average 3523 with sigma 21.9 and is very close  ::     
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::     
     :: andard normal variable, which, converted to a uniform varia-  ::     
     :: ble, provides input to a KSTEST based on a sample of 10.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           CDPARK: result of ten tests on file MWCgenX.bin    
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3501    z-score: -1.005 p-value: .157553
            Successes: 3521    z-score:  -.091 p-value: .463618
            Successes: 3511    z-score:  -.548 p-value: .291865
            Successes: 3547    z-score:  1.096 p-value: .863437
            Successes: 3518    z-score:  -.228 p-value: .409702
            Successes: 3549    z-score:  1.187 p-value: .882429
            Successes: 3503    z-score:  -.913 p-value: .180558
            Successes: 3531    z-score:   .365 p-value: .642555
            Successes: 3542    z-score:   .868 p-value: .807188
            Successes: 3522    z-score:  -.046 p-value: .481790

           square size   avg. no.  parked   sample sigma
             100.            3524.500       16.461
            KSTEST for the above 10: p=  .074257

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THE MINIMUM DISTANCE TEST                       ::     
     :: It does this 100 times::   choose n=8000 random points in a   ::     
     :: square of side 10000.  Find d, the minimum distance between   ::     
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::     
     :: pendent uniform, then d^2, the square of the minimum distance ::     
     :: should be (very close to) exponentially distributed with mean ::     
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::     
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::     
     :: formity for random points in the square. Test numbers=0 mod 5 ::     
     :: are printed but the KSTEST is based on the full set of 100    ::     
     :: random choices of 8000 points in the 10000x10000 square.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               This is the MINIMUM DISTANCE test
              for random integers in the file MWCgenX.bin    
     Sample no.    d^2     avg     equiv uni            
           5     .3038    .8202     .263123
          10     .2851   1.2123     .249146
          15     .4611    .9946     .370896
          20     .4669    .8489     .374543
          25    1.0376    .8363     .647553
          30     .2178    .8805     .196591
          35    4.3559    .9771     .987446
          40     .9103    .9560     .599440
          45     .9428    .9404     .612324
          50    3.6062    .9744     .973332
          55     .5118   1.0274     .402106
          60     .1664    .9788     .153962
          65     .4072    .9946     .335819
          70     .2367    .9410     .211707
          75     .1539    .9231     .143304
          80     .3026    .9266     .262217
          85     .4575    .9487     .368609
          90     .5431    .9585     .420611
          95     .0502    .9758     .049220
         100    1.9684   1.0037     .861697
     MINIMUM DISTANCE TEST for MWCgenX.bin    
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .151198

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::              THE 3DSPHERES TEST                               ::     
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::     
     :: point, center a sphere large enough to reach the next closest ::     
     :: point. Then the volume of the smallest such sphere is (very   ::     
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::     
     :: the radius cubed is exponential with mean 30. (The mean is    ::     
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::     
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::     
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::     
     ::  KSTEST is done on the 20 p-values.                           ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               The 3DSPHERES test for file MWCgenX.bin    
 sample no:  1     r^3=  24.100     p-value= .55216
 sample no:  2     r^3= 145.547     p-value= .99218
 sample no:  3     r^3=  35.592     p-value= .69468
 sample no:  4     r^3=  13.169     p-value= .35531
 sample no:  5     r^3=  14.983     p-value= .39312
 sample no:  6     r^3=  35.820     p-value= .69699
 sample no:  7     r^3=  31.389     p-value= .64876
 sample no:  8     r^3=   2.691     p-value= .08581
 sample no:  9     r^3=    .900     p-value= .02955
 sample no: 10     r^3=  44.440     p-value= .77266
 sample no: 11     r^3=  30.019     p-value= .63235
 sample no: 12     r^3=   6.770     p-value= .20202
 sample no: 13     r^3=  56.260     p-value= .84670
 sample no: 14     r^3=  41.247     p-value= .74713
 sample no: 15     r^3=   2.564     p-value= .08192
 sample no: 16     r^3=   5.597     p-value= .17020
 sample no: 17     r^3=   6.545     p-value= .19602
 sample no: 18     r^3=   6.232     p-value= .18758
 sample no: 19     r^3=  13.075     p-value= .35328
 sample no: 20     r^3=  11.247     p-value= .31265
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file MWCgenX.bin          p-value= .338158
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::      This is the SQEEZE test                                  ::     
     ::  Random integers are floated to get uniforms on [0,1). Start- ::     
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::     
     ::  iterations necessary to reduce k to 1, using the reduction   ::     
     ::  k=ceiling(k*U), with U provided by floating integers from    ::     
     ::  the file being tested.  Such j's are found 100,000 times,    ::     
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::     
     ::  are used to provide a chi-square test for cell frequencies.  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
            RESULTS OF SQUEEZE TEST FOR MWCgenX.bin    
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
     2.0      .9     -.6      .9      .9      .2
     -.9     -.1      .4     -.5      .7    -1.2
    -1.0     -.2     1.4     1.0      .7     -.4
     -.1      .3    -1.2      .3    -1.4     -.9
      .6     -.5      .2     -.6     2.5     -.6
      .1     1.8      .6     1.0    -1.3      .1
     1.0      .8      .5     -.1      .1    -1.0
     -.1
           Chi-square with 42 degrees of freedom: 35.771
              z-score=  -.680  p-value= .259933
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The  OVERLAPPING SUMS test                        ::     
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::     
     :: form [0,1) variables.  Then overlapping sums,                 ::     
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::     
     :: The S's are virtually normal with a certain covariance mat-   ::     
     :: rix.  A linear transformation of the S's converts them to a   ::     
     :: sequence of independent standard normals, which are converted ::     
     :: to uniform variables for a KSTEST. The  p-values from ten     ::     
     :: KSTESTs are given still another KSTEST.                       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Test no.  1      p-value  .604205
                Test no.  2      p-value  .861789
                Test no.  3      p-value  .111136
                Test no.  4      p-value  .761262
                Test no.  5      p-value  .792692
                Test no.  6      p-value  .990614
                Test no.  7      p-value  .289142
                Test no.  8      p-value  .170431
                Test no.  9      p-value  .365921
                Test no. 10      p-value  .409106
   Results of the OSUM test for MWCgenX.bin    
        KSTEST on the above 10 p-values:  .074135

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the RUNS test.  It counts runs up, and runs down, ::     
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::     
     :: ing the 32-bit integers in the specified file. This example   ::     
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::     
     :: contains an up-run of length 3, a down-run of length 2 and an ::     
     :: up-run of (at least) 2, depending on the next values.  The    ::     
     :: covariance matrices for the runs-up and runs-down are well    ::     
     :: known, leading to chisquare tests for quadratic forms in the  ::     
     :: weak inverses of the covariance matrices.  Runs are counted   ::     
     :: for sequences of length 10,000.  This is done ten times. Then ::     
     :: repeated.                                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           The RUNS test for file MWCgenX.bin    
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for MWCgenX.bin    :
       runs up; ks test for 10 p's: .655887
     runs down; ks test for 10 p's: .833821
                 Run test for MWCgenX.bin    :
       runs up; ks test for 10 p's: .772399
     runs down; ks test for 10 p's: .032334

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::     
     :: the number of wins and the number of throws necessary to end  ::     
     :: each game.  The number of wins should be (very close to) a    ::     
     :: normal with mean 200000p and variance 200000p(1-p), with      ::     
     :: p=244/495.  Throws necessary to complete the game can vary    ::     
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::     
     :: A chi-square test is made on the no.-of-throws cell counts.   ::     
     :: Each 32-bit integer from the test file provides the value for ::     
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::     
     :: and taking 1 plus the integer part of the result.             ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Results of craps test for MWCgenX.bin    
  No. of wins:  Observed Expected
                                98561    98585.86
                  98561= No. of wins, z-score= -.111 pvalue= .45573
   Analysis of Throws-per-Game:
 Chisq=  23.90 for 20 degrees of freedom, p=  .75305
               Throws Observed Expected  Chisq     Sum
                  1    66640    66666.7    .011     .011
                  2    38229    37654.3   8.771    8.781
                  3    27051    26954.7    .344    9.125
                  4    19144    19313.5   1.487   10.612
                  5    13806    13851.4    .149   10.761
                  6     9763     9943.5   3.278   14.039
                  7     7060     7145.0   1.012   15.051
                  8     5046     5139.1   1.686   16.736
                  9     3658     3699.9    .474   17.210
                 10     2718     2666.3   1.003   18.213
                 11     1849     1923.3   2.873   21.085
                 12     1381     1388.7    .043   21.128
                 13     1014     1003.7    .105   21.234
                 14      733      726.1    .065   21.298
                 15      534      525.8    .127   21.425
                 16      368      381.2    .454   21.879
                 17      277      276.5    .001   21.880
                 18      191      200.8    .481   22.361
                 19      133      146.0   1.155   23.516
                 20      111      106.2    .216   23.731
                 21      294      287.1    .165   23.896
            SUMMARY  FOR MWCgenX.bin    
                p-value for no. of wins: .455735
                p-value for throws/game: .753051

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file MWCgenX.all    
