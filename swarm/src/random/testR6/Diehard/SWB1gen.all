       NOTE: Most of the tests in DIEHARD return a p-value, which            
       should be uniform on [0,1) if the input file contains truly           
       independent random bits.   Those p-values are obtained by             
       p=F(X), where F is the assumed distribution of the sample             
       random variable X---often normal. But that assumed F is just          
       an asymptotic approximation, for which the fit will be worst          
       in the tails. Thus you should not be surprised with                   
       occasional p-values near 0 or 1, such as .0012 or .9983.              
       When a bit stream really FAILS BIG, you will get p's of 0 or          
       1 to six or more places.  By all means, do not, as a                  
       Statistician might, think that a p < .025 or p> .975 means            
       that the RNG has "failed the test at the .05 level".  Such            
       p's happen among the hundreds that DIEHARD produces, even             
       with good RNG's.  So keep in mind that " p happens".                  
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            This is the BIRTHDAY SPACINGS TEST                 ::     
     :: Choose m birthdays in a year of n days.  List the spacings    ::     
     :: between the birthdays.  If j is the number of values that     ::     
     :: occur more than once in that list, then j is asymptotically   ::     
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::     
     :: must be quite large, say n>=2^18, for comparing the results   ::     
     :: to the Poisson distribution with that mean.  This test uses   ::     
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::     
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::     
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::     
     :: provides a p value.  The first test uses bits 1-24 (counting  ::     
     :: from the left) from integers in the specified file.           ::     
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::     
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::     
     :: Each set of bits provides a p-value, and the nine p-values    ::     
     :: provide a sample for a KSTEST.                                ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for SWB1gen.bin    
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  1 to 24   3.422
  duplicate       number       number 
  spacings       observed     expected
        0          13.       67.668
        1          53.      135.335
        2         100.      135.335
        3         115.       90.224
        4         102.       45.112
        5          50.       18.045
  6 to INF         67.        8.282
 Chisquare with  6 d.o.f. =   654.93 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  2 to 25   3.572
  duplicate       number       number 
  spacings       observed     expected
        0          15.       67.668
        1          47.      135.335
        2          81.      135.335
        3         104.       90.224
        4         119.       45.112
        5          59.       18.045
  6 to INF         75.        8.282
 Chisquare with  6 d.o.f. =   874.03 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  3 to 26   3.450
  duplicate       number       number 
  spacings       observed     expected
        0          13.       67.668
        1          39.      135.335
        2         103.      135.335
        3         118.       90.224
        4         101.       45.112
        5          67.       18.045
  6 to INF         59.        8.282
 Chisquare with  6 d.o.f. =   641.67 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  4 to 27   3.520
  duplicate       number       number 
  spacings       observed     expected
        0          11.       67.668
        1          51.      135.335
        2          93.      135.335
        3         109.       90.224
        4          91.       45.112
        5          79.       18.045
  6 to INF         66.        8.282
 Chisquare with  6 d.o.f. =   772.00 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  5 to 28   3.430
  duplicate       number       number 
  spacings       observed     expected
        0          13.       67.668
        1          58.      135.335
        2          98.      135.335
        3         108.       90.224
        4          91.       45.112
        5          69.       18.045
  6 to INF         63.        8.282
 Chisquare with  6 d.o.f. =   654.25 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  6 to 29   3.462
  duplicate       number       number 
  spacings       observed     expected
        0          18.       67.668
        1          56.      135.335
        2          93.      135.335
        3         106.       90.224
        4          88.       45.112
        5          69.       18.045
  6 to INF         70.        8.282
 Chisquare with  6 d.o.f. =   743.57 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  7 to 30   3.490
  duplicate       number       number 
  spacings       observed     expected
        0          20.       67.668
        1          41.      135.335
        2         103.      135.335
        3         104.       90.224
        4          92.       45.112
        5          68.       18.045
  6 to INF         72.        8.282
 Chisquare with  6 d.o.f. =   786.43 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  8 to 31   3.446
  duplicate       number       number 
  spacings       observed     expected
        0          12.       67.668
        1          51.      135.335
        2         101.      135.335
        3         112.       90.224
        4          92.       45.112
        5          67.       18.045
  6 to INF         65.        8.282
 Chisquare with  6 d.o.f. =   682.30 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SWB1gen.bin      using bits  9 to 32   3.590
  duplicate       number       number 
  spacings       observed     expected
        0          14.       67.668
        1          37.      135.335
        2          88.      135.335
        3         121.       90.224
        4          99.       45.112
        5          65.       18.045
  6 to INF         76.        8.282
 Chisquare with  6 d.o.f. =   881.34 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
       1.000000  1.000000  1.000000  1.000000  1.000000
       1.000000  1.000000  1.000000  1.000000
  A KSTEST for the 9 p-values yields 1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::     
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::     
     :: ion 32-bit random integers.  Each set of five consecutive     ::     
     :: integers can be in one of 120 states, for the 5! possible or- ::     
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::     
     :: each provide a state. As many thousands of state transitions  ::     
     :: are observed,  cumulative counts are made of the number of    ::     
     :: occurences of each state.  Then the quadratic form in the     ::     
     :: weak inverse of the 120x120 covariance matrix yields a test   ::     
     :: equivalent to the likelihood ratio test that the 120 cell     ::     
     :: counts came from the specified (asymptotically) normal dis-   ::     
     :: tribution with the specified 120x120 covariance matrix (with  ::     
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           OPERM5 test for file SWB1gen.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 86.331; p-value= .185571
           OPERM5 test for file SWB1gen.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 83.301; p-value= .128589
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::     
     :: 31 bits of 31 random integers from the test sequence are used ::     
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::     
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::     
     :: are rare, and their counts are pooled with those for rank 28. ::     
     :: Ranks are found for 40,000 such random matrices and a chisqua-::     
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for SWB1gen.bin    
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       201     211.4   .513367     .513
        29      5105    5134.0   .163925     .677
        30     23083   23103.0   .017395     .695
        31     11611   11551.5   .306223    1.001
  chisquare= 1.001 for 3 d. of f.; p-value= .357514
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::     
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::     
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::     
     :: less than 29 are rare, and their counts are pooled with those ::     
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::     
     :: and a chisquare test is performed on counts for ranks  32,31, ::     
     :: 30 and <=29.                                                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for SWB1gen.bin    
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29       247     211.4  5.988504    5.989
        30      4986    5134.0  4.267042   10.256
        31     23196   23103.0   .373989   10.630
        32     11571   11551.5   .032835   10.662
  chisquare=10.662 for 3 d. of f.; p-value= .986848
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::     
     :: six random 32-bit integers from the generator under test, a   ::     
     :: specified byte is chosen, and the resulting six bytes form a  ::     
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::     
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::     
     :: pooled with those for rank 4. Ranks are found for 100,000     ::     
     :: random matrices, and a chi-square test is performed on        ::     
     :: counts for ranks 6,5 and <=4.                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
         Binary Rank Test for SWB1gen.bin    
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          966       944.3        .499        .499
          r =5        21465     21743.9       3.577       4.076
          r =6        77569     77311.8        .856       4.932
                        p=1-exp(-SUM/2)= .91506
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          926       944.3        .355        .355
          r =5        21665     21743.9        .286        .641
          r =6        77409     77311.8        .122        .763
                        p=1-exp(-SUM/2)= .31723
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          963       944.3        .370        .370
          r =5        21929     21743.9       1.576       1.946
          r =6        77108     77311.8        .537       2.483
                        p=1-exp(-SUM/2)= .71108
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          976       944.3       1.064       1.064
          r =5        21777     21743.9        .050       1.114
          r =6        77247     77311.8        .054       1.169
                        p=1-exp(-SUM/2)= .44256
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          973       944.3        .872        .872
          r =5        21789     21743.9        .094        .966
          r =6        77238     77311.8        .070       1.036
                        p=1-exp(-SUM/2)= .40435
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          953       944.3        .080        .080
          r =5        21803     21743.9        .161        .241
          r =6        77244     77311.8        .059        .300
                        p=1-exp(-SUM/2)= .13939
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          983       944.3       1.586       1.586
          r =5        21773     21743.9        .039       1.625
          r =6        77244     77311.8        .059       1.684
                        p=1-exp(-SUM/2)= .56922
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          897       944.3       2.369       2.369
          r =5        21830     21743.9        .341       2.710
          r =6        77273     77311.8        .019       2.730
                        p=1-exp(-SUM/2)= .74459
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          912       944.3       1.105       1.105
          r =5        21964     21743.9       2.228       3.333
          r =6        77124     77311.8        .456       3.789
                        p=1-exp(-SUM/2)= .84961
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          961       944.3        .295        .295
          r =5        21923     21743.9       1.475       1.770
          r =6        77116     77311.8        .496       2.266
                        p=1-exp(-SUM/2)= .67800
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          983       944.3       1.586       1.586
          r =5        21610     21743.9        .825       2.410
          r =6        77407     77311.8        .117       2.528
                        p=1-exp(-SUM/2)= .71744
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          939       944.3        .030        .030
          r =5        21534     21743.9       2.026       2.056
          r =6        77527     77311.8        .599       2.655
                        p=1-exp(-SUM/2)= .73486
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          932       944.3        .160        .160
          r =5        21807     21743.9        .183        .343
          r =6        77261     77311.8        .033        .377
                        p=1-exp(-SUM/2)= .17169
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          868       944.3       6.165       6.165
          r =5        21894     21743.9       1.036       7.201
          r =6        77238     77311.8        .070       7.272
                        p=1-exp(-SUM/2)= .97364
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          930       944.3        .217        .217
          r =5        21899     21743.9       1.106       1.323
          r =6        77171     77311.8        .256       1.579
                        p=1-exp(-SUM/2)= .54601
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          934       944.3        .112        .112
          r =5        21954     21743.9       2.030       2.142
          r =6        77112     77311.8        .516       2.659
                        p=1-exp(-SUM/2)= .73537
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          936       944.3        .073        .073
          r =5        21901     21743.9       1.135       1.208
          r =6        77163     77311.8        .286       1.494
                        p=1-exp(-SUM/2)= .52632
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          987       944.3       1.931       1.931
          r =5        21593     21743.9       1.047       2.978
          r =6        77420     77311.8        .151       3.129
                        p=1-exp(-SUM/2)= .79085
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          944       944.3        .000        .000
          r =5        21615     21743.9        .764        .764
          r =6        77441     77311.8        .216        .980
                        p=1-exp(-SUM/2)= .38741
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          941       944.3        .012        .012
          r =5        21787     21743.9        .085        .097
          r =6        77272     77311.8        .020        .117
                        p=1-exp(-SUM/2)= .05704
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          987       944.3       1.931       1.931
          r =5        21919     21743.9       1.410       3.341
          r =6        77094     77311.8        .614       3.954
                        p=1-exp(-SUM/2)= .86154
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          959       944.3        .229        .229
          r =5        21948     21743.9       1.916       2.145
          r =6        77093     77311.8        .619       2.764
                        p=1-exp(-SUM/2)= .74890
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          925       944.3        .395        .395
          r =5        22100     21743.9       5.832       6.226
          r =6        76975     77311.8       1.467       7.694
                        p=1-exp(-SUM/2)= .97865
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          944       944.3        .000        .000
          r =5        21912     21743.9       1.300       1.300
          r =6        77144     77311.8        .364       1.664
                        p=1-exp(-SUM/2)= .56479
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SWB1gen.bin    
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          976       944.3       1.064       1.064
          r =5        21620     21743.9        .706       1.770
          r =6        77404     77311.8        .110       1.880
                        p=1-exp(-SUM/2)= .60938
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .915058     .317227     .711082     .442555     .404348
     .139391     .569224     .744592     .849611     .678000
     .717437     .734858     .171694     .973641     .546010
     .735368     .526316     .790846     .387414     .057041
     .861542     .748903     .978652     .564794     .609377
   brank test summary for SWB1gen.bin    
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .912434

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::                   THE BITSTREAM TEST                          ::     
     :: The file under test is viewed as a stream of bits. Call them  ::     
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::     
     :: and think of the stream of bits as a succession of 20-letter  ::     
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::     
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::     
     :: the number of missing 20-letter (20-bit) words in a string of ::     
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::     
     :: letter words.  For a truly random string of 2^21+19 bits, the ::     
     :: number of missing words j should be (very close to) normally  ::     
     :: distributed with mean 141,909 and sigma 428.  Thus            ::     
     ::  (j-141909)/428 should be a standard normal variate (z score) ::     
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::     
     :: twenty times.                                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
       THE OVERLAPPING 20-tuples BITSTREAM TEST,
            20 BITS PER WORD, 2^21 words.
    This test samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
-----------------------------------        ---------------
 tst no  1:  142437 missing words,    1.23 sigmas from mean, p-value= .89119
 tst no  2:  141703 missing words,    -.48 sigmas from mean, p-value= .31488
 tst no  3:  141788 missing words,    -.28 sigmas from mean, p-value= .38841
 tst no  4:  142005 missing words,     .22 sigmas from mean, p-value= .58844
 tst no  5:  142512 missing words,    1.41 sigmas from mean, p-value= .92045
 tst no  6:  141157 missing words,   -1.76 sigmas from mean, p-value= .03939
 tst no  7:  142501 missing words,    1.38 sigmas from mean, p-value= .91658
 tst no  8:  141967 missing words,     .13 sigmas from mean, p-value= .55359
 tst no  9:  141985 missing words,     .18 sigmas from mean, p-value= .57017
 tst no 10:  141453 missing words,   -1.07 sigmas from mean, p-value= .14317
 tst no 11:  141131 missing words,   -1.82 sigmas from mean, p-value= .03449
 tst no 12:  141969 missing words,     .14 sigmas from mean, p-value= .55544
 tst no 13:  141592 missing words,    -.74 sigmas from mean, p-value= .22922
 tst no 14:  141838 missing words,    -.17 sigmas from mean, p-value= .43382
 tst no 15:  141473 missing words,   -1.02 sigmas from mean, p-value= .15399
 tst no 16:  142276 missing words,     .86 sigmas from mean, p-value= .80420
 tst no 17:  142821 missing words,    2.13 sigmas from mean, p-value= .98342
 tst no 18:  142672 missing words,    1.78 sigmas from mean, p-value= .96262
 tst no 19:  142142 missing words,     .54 sigmas from mean, p-value= .70665
 tst no 20:  142362 missing words,    1.06 sigmas from mean, p-value= .85489

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The tests OPSO, OQSO and DNA                      ::     
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::     
     :: The OPSO test considers 2-letter words from an alphabet of    ::     
     :: 1024 letters.  Each letter is determined by a specified ten   ::     
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::     
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::     
     :: "keystrokes")  and counts the number of missing words---that  ::     
     :: is 2-letter words which do not appear in the entire sequence. ::     
     :: That count should be very close to normally distributed with  ::     
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::     
     :: be a standard normal variable. The OPSO test takes 32 bits at ::     
     :: a time from the test file and uses a designated set of ten    ::     
     :: consecutive bits. It then restarts the file for the next de-  ::     
     :: signated 10 bits, and so on.                                  ::     
     ::                                                               ::     
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::     
     ::   The test OQSO is similar, except that it considers 4-letter ::     
     :: words from an alphabet of 32 letters, each letter determined  ::     
     :: by a designated string of 5 consecutive bits from the test    ::     
     :: file, elements of which are assumed 32-bit random integers.   ::     
     :: The mean number of missing words in a sequence of 2^21 four-  ::     
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::     
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::     
     :: extensive simulation.                                         ::     
     ::                                                               ::     
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::     
     :: determined by two designated bits in the sequence of random   ::     
     :: integers being tested.  It considers 10-letter words, so that ::     
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::     
     :: mean number of missing words from a string of 2^21  (over-    ::     
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::     
     :: The standard deviation sigma=339 was determined as for OQSO   ::     
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::     
     :: three places), not determined by simulation.                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 OPSO test for generator SWB1gen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for SWB1gen.bin     using bits 23 to 32        142180   .933  .8247
    OPSO for SWB1gen.bin     using bits 22 to 31        141781  -.443  .3291
    OPSO for SWB1gen.bin     using bits 21 to 30        142288  1.306  .9042
    OPSO for SWB1gen.bin     using bits 20 to 29        141951   .144  .5571
    OPSO for SWB1gen.bin     using bits 19 to 28        141833  -.263  .3962
    OPSO for SWB1gen.bin     using bits 18 to 27        142075   .571  .7161
    OPSO for SWB1gen.bin     using bits 17 to 26        141504 -1.398  .0811
    OPSO for SWB1gen.bin     using bits 16 to 25        141606 -1.046  .1478
    OPSO for SWB1gen.bin     using bits 15 to 24        141883  -.091  .4638
    OPSO for SWB1gen.bin     using bits 14 to 23        142124   .740  .7704
    OPSO for SWB1gen.bin     using bits 13 to 22        141968   .202  .5802
    OPSO for SWB1gen.bin     using bits 12 to 21        141774  -.467  .3204
    OPSO for SWB1gen.bin     using bits 11 to 20        141473 -1.505  .0662
    OPSO for SWB1gen.bin     using bits 10 to 19        142621  2.454  .9929
    OPSO for SWB1gen.bin     using bits  9 to 18        142038   .444  .6714
    OPSO for SWB1gen.bin     using bits  8 to 17        142065   .537  .7043
    OPSO for SWB1gen.bin     using bits  7 to 16        142038   .444  .6714
    OPSO for SWB1gen.bin     using bits  6 to 15        141319 -2.036  .0209
    OPSO for SWB1gen.bin     using bits  5 to 14        141720  -.653  .2569
    OPSO for SWB1gen.bin     using bits  4 to 13        142081   .592  .7231
    OPSO for SWB1gen.bin     using bits  3 to 12        142061   .523  .6995
    OPSO for SWB1gen.bin     using bits  2 to 11        141402 -1.749  .0401
    OPSO for SWB1gen.bin     using bits  1 to 10        141383 -1.815  .0348
 OQSO test for generator SWB1gen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for SWB1gen.bin     using bits 28 to 32        142490  1.968  .9755
    OQSO for SWB1gen.bin     using bits 27 to 31        141939   .101  .5401
    OQSO for SWB1gen.bin     using bits 26 to 30        141661  -.842  .2000
    OQSO for SWB1gen.bin     using bits 25 to 29        141958   .165  .5655
    OQSO for SWB1gen.bin     using bits 24 to 28        142257  1.179  .8807
    OQSO for SWB1gen.bin     using bits 23 to 27        142155   .833  .7975
    OQSO for SWB1gen.bin     using bits 22 to 26        141796  -.384  .3504
    OQSO for SWB1gen.bin     using bits 21 to 25        141587 -1.093  .1373
    OQSO for SWB1gen.bin     using bits 20 to 24        141934   .084  .5333
    OQSO for SWB1gen.bin     using bits 19 to 23        141673  -.801  .2115
    OQSO for SWB1gen.bin     using bits 18 to 22        141836  -.249  .4018
    OQSO for SWB1gen.bin     using bits 17 to 21        142087   .602  .7265
    OQSO for SWB1gen.bin     using bits 16 to 20        142256  1.175  .8800
    OQSO for SWB1gen.bin     using bits 15 to 19        141941   .107  .5427
    OQSO for SWB1gen.bin     using bits 14 to 18        141969   .202  .5802
    OQSO for SWB1gen.bin     using bits 13 to 17        141927   .060  .5239
    OQSO for SWB1gen.bin     using bits 12 to 16        141601 -1.045  .1480
    OQSO for SWB1gen.bin     using bits 11 to 15        141826  -.282  .3888
    OQSO for SWB1gen.bin     using bits 10 to 14        141779  -.442  .3293
    OQSO for SWB1gen.bin     using bits  9 to 13        142056   .497  .6905
    OQSO for SWB1gen.bin     using bits  8 to 12        142205  1.002  .8419
    OQSO for SWB1gen.bin     using bits  7 to 11        141918   .029  .5117
    OQSO for SWB1gen.bin     using bits  6 to 10        142175   .901  .8161
    OQSO for SWB1gen.bin     using bits  5 to  9        141533 -1.276  .1010
    OQSO for SWB1gen.bin     using bits  4 to  8        141796  -.384  .3504
    OQSO for SWB1gen.bin     using bits  3 to  7        141745  -.557  .2887
    OQSO for SWB1gen.bin     using bits  2 to  6        141697  -.720  .2358
    OQSO for SWB1gen.bin     using bits  1 to  5        141414 -1.679  .0466
  DNA test for generator SWB1gen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for SWB1gen.bin     using bits 31 to 32        141976   .197  .5780
     DNA for SWB1gen.bin     using bits 30 to 31        141829  -.237  .4063
     DNA for SWB1gen.bin     using bits 29 to 30        141990   .238  .5940
     DNA for SWB1gen.bin     using bits 28 to 29        141865  -.131  .4480
     DNA for SWB1gen.bin     using bits 27 to 28        142099   .560  .7121
     DNA for SWB1gen.bin     using bits 26 to 27        141427 -1.423  .0774
     DNA for SWB1gen.bin     using bits 25 to 26        141706  -.600  .2743
     DNA for SWB1gen.bin     using bits 24 to 25        141687  -.656  .2560
     DNA for SWB1gen.bin     using bits 23 to 24        142071   .477  .6833
     DNA for SWB1gen.bin     using bits 22 to 23        142102   .568  .7151
     DNA for SWB1gen.bin     using bits 21 to 22        142167   .760  .7764
     DNA for SWB1gen.bin     using bits 20 to 21        141910   .002  .5008
     DNA for SWB1gen.bin     using bits 19 to 20        141613  -.874  .1910
     DNA for SWB1gen.bin     using bits 18 to 19        142261  1.037  .8502
     DNA for SWB1gen.bin     using bits 17 to 18        142415  1.492  .9321
     DNA for SWB1gen.bin     using bits 16 to 17        141687  -.656  .2560
     DNA for SWB1gen.bin     using bits 15 to 16        142047   .406  .6577
     DNA for SWB1gen.bin     using bits 14 to 15        141316 -1.750  .0400
     DNA for SWB1gen.bin     using bits 13 to 14        141943   .099  .5396
     DNA for SWB1gen.bin     using bits 12 to 13        142642  2.161  .9847
     DNA for SWB1gen.bin     using bits 11 to 12        142276  1.082  .8603
     DNA for SWB1gen.bin     using bits 10 to 11        141414 -1.461  .0720
     DNA for SWB1gen.bin     using bits  9 to 10        141890  -.057  .4773
     DNA for SWB1gen.bin     using bits  8 to  9        141766  -.423  .3362
     DNA for SWB1gen.bin     using bits  7 to  8        141605  -.898  .1847
     DNA for SWB1gen.bin     using bits  6 to  7        142340  1.270  .8980
     DNA for SWB1gen.bin     using bits  5 to  6        141380 -1.561  .0592
     DNA for SWB1gen.bin     using bits  4 to  5        142270  1.064  .8563
     DNA for SWB1gen.bin     using bits  3 to  4        142180   .798  .7877
     DNA for SWB1gen.bin     using bits  2 to  3        142127   .642  .7396
     DNA for SWB1gen.bin     using bits  1 to  2        141570 -1.001  .1584

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::     
     :: Consider the file under test as a stream of bytes (four per   ::     
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::     
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::     
     :: the stream of bytes provide a string of overlapping  5-letter ::     
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::     
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::     
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::     
     :: we have a monkey at a typewriter hitting five keys with vari- ::     
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::     
     :: possible 5-letter words, and from a string of 256,000 (over-  ::     
     :: lapping) 5-letter words, counts are made on the frequencies   ::     
     :: for each word.   The quadratic form in the weak inverse of    ::     
     :: the covariance matrix of the cell counts provides a chisquare ::     
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::     
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
   Test results for SWB1gen.bin    
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for SWB1gen.bin      2530.31       .429      .665903
 byte stream for SWB1gen.bin      2528.02       .396      .654060

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::     
     :: Consider the file under test as a stream of 32-bit integers.  ::     
     :: From each integer, a specific byte is chosen , say the left-  ::     
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::     
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::     
     :: the specified bytes from successive integers provide a string ::     
     :: of (overlapping) 5-letter words, each "letter" taking values  ::     
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::     
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::     
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::     
     :: hitting five keys with with various probabilities::  37,56,70,::     
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::     
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::     
     :: are made on the frequencies for each word. The quadratic form ::     
     :: in the weak inverse of the covariance matrix of the cell      ::     
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::     
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::     
     :: and 4-letter cell counts.                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2492.64      -.104      .458533
           bits  2 to  9  2431.12      -.974      .164992
           bits  3 to 10  2610.75      1.566      .941362
           bits  4 to 11  2368.95     -1.853      .031913
           bits  5 to 12  2429.60      -.996      .159721
           bits  6 to 13  2646.75      2.075      .981021
           bits  7 to 14  2483.65      -.231      .408556
           bits  8 to 15  2517.75       .251      .599096
           bits  9 to 16  2394.01     -1.499      .066942
           bits 10 to 17  2685.14      2.618      .995581
           bits 11 to 18  2487.27      -.180      .428578
           bits 12 to 19  2528.06       .397      .654238
           bits 13 to 20  2539.20       .554      .710349
           bits 14 to 21  2612.71      1.594      .944528
           bits 15 to 22  2525.16       .356      .638985
           bits 16 to 23  2515.96       .226      .589267
           bits 17 to 24  2363.96     -1.924      .027187
           bits 18 to 25  2574.12      1.048      .852742
           bits 19 to 26  2516.27       .230      .590963
           bits 20 to 27  2367.34     -1.876      .030319
           bits 21 to 28  2461.92      -.539      .295097
           bits 22 to 29  2588.57      1.253      .894824
           bits 23 to 30  2390.88     -1.543      .061385
           bits 24 to 31  2529.55       .418      .661976
           bits 25 to 32  2569.43       .982      .836911

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THIS IS A PARKING LOT TEST                      ::     
     :: In a square of side 100, randomly "park" a car---a circle of  ::     
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::     
     :: time parking "by ear".  That is, if an attempt to park a car  ::     
     :: causes a crash with one already parked, try again at a new    ::     
     :: random location. (To avoid path problems, consider parking    ::     
     :: helicopters rather than cars.)   Each attempt leads to either ::     
     :: a crash or a success, the latter followed by an increment to  ::     
     :: the list of cars already parked. If we plot n:  the number of ::     
     :: attempts, versus k::  the number successfully parked, we get a::     
     :: curve that should be similar to those provided by a perfect   ::     
     :: random number generator.  Theory for the behavior of such a   ::     
     :: random curve seems beyond reach, and as graphics displays are ::     
     :: not available for this battery of tests, a simple characteriz ::     
     :: ation of the random experiment is used: k, the number of cars ::     
     :: successfully parked after n=12,000 attempts. Simulation shows ::     
     :: that k should average 3523 with sigma 21.9 and is very close  ::     
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::     
     :: andard normal variable, which, converted to a uniform varia-  ::     
     :: ble, provides input to a KSTEST based on a sample of 10.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           CDPARK: result of ten tests on file SWB1gen.bin    
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3471    z-score: -2.374 p-value: .008788
            Successes: 3524    z-score:   .046 p-value: .518210
            Successes: 3569    z-score:  2.100 p-value: .982156
            Successes: 3508    z-score:  -.685 p-value: .246694
            Successes: 3514    z-score:  -.411 p-value: .340551
            Successes: 3483    z-score: -1.826 p-value: .033889
            Successes: 3568    z-score:  2.055 p-value: .980051
            Successes: 3554    z-score:  1.416 p-value: .921543
            Successes: 3521    z-score:  -.091 p-value: .463618
            Successes: 3516    z-score:  -.320 p-value: .374623

           square size   avg. no.  parked   sample sigma
             100.            3522.800       31.238
            KSTEST for the above 10: p=  .731314

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THE MINIMUM DISTANCE TEST                       ::     
     :: It does this 100 times::   choose n=8000 random points in a   ::     
     :: square of side 10000.  Find d, the minimum distance between   ::     
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::     
     :: pendent uniform, then d^2, the square of the minimum distance ::     
     :: should be (very close to) exponentially distributed with mean ::     
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::     
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::     
     :: formity for random points in the square. Test numbers=0 mod 5 ::     
     :: are printed but the KSTEST is based on the full set of 100    ::     
     :: random choices of 8000 points in the 10000x10000 square.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               This is the MINIMUM DISTANCE test
              for random integers in the file SWB1gen.bin    
     Sample no.    d^2     avg     equiv uni            
           5     .1315   1.0786     .123816
          10     .1191    .8528     .112803
          15    4.8320   1.1335     .992221
          20     .5228    .9394     .408686
          25    2.2603   1.0788     .896860
          30     .5094   1.0306     .400707
          35     .1182   1.1194     .111978
          40     .7798   1.0601     .543316
          45     .2658   1.0031     .234413
          50     .7463    .9414     .527665
          55    1.2310    .9780     .709786
          60     .7936    .9748     .549572
          65     .8500    .9478     .574389
          70     .1059    .9579     .100972
          75    1.2507    .9627     .715487
          80     .6791    .9504     .494633
          85     .7244    .9333     .517159
          90    1.0059    .9244     .636130
          95     .4797    .9271     .382537
         100     .5049    .9289     .397964
     MINIMUM DISTANCE TEST for SWB1gen.bin    
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .302134

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::              THE 3DSPHERES TEST                               ::     
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::     
     :: point, center a sphere large enough to reach the next closest ::     
     :: point. Then the volume of the smallest such sphere is (very   ::     
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::     
     :: the radius cubed is exponential with mean 30. (The mean is    ::     
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::     
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::     
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::     
     ::  KSTEST is done on the 20 p-values.                           ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               The 3DSPHERES test for file SWB1gen.bin    
 sample no:  1     r^3=  24.962     p-value= .56485
 sample no:  2     r^3=   1.736     p-value= .05622
 sample no:  3     r^3=  21.999     p-value= .51969
 sample no:  4     r^3=  54.024     p-value= .83483
 sample no:  5     r^3=   3.668     p-value= .11510
 sample no:  6     r^3=   7.472     p-value= .22047
 sample no:  7     r^3=  12.990     p-value= .35144
 sample no:  8     r^3=   2.858     p-value= .09088
 sample no:  9     r^3=  50.195     p-value= .81235
 sample no: 10     r^3=   4.189     p-value= .13032
 sample no: 11     r^3=  32.556     p-value= .66216
 sample no: 12     r^3=  56.231     p-value= .84655
 sample no: 13     r^3=    .164     p-value= .00546
 sample no: 14     r^3=  86.137     p-value= .94337
 sample no: 15     r^3=   8.333     p-value= .24254
 sample no: 16     r^3=  50.248     p-value= .81268
 sample no: 17     r^3=   6.411     p-value= .19241
 sample no: 18     r^3=   3.046     p-value= .09655
 sample no: 19     r^3=  11.903     p-value= .32751
 sample no: 20     r^3=   8.470     p-value= .24597
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file SWB1gen.bin          p-value= .849030
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::      This is the SQEEZE test                                  ::     
     ::  Random integers are floated to get uniforms on [0,1). Start- ::     
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::     
     ::  iterations necessary to reduce k to 1, using the reduction   ::     
     ::  k=ceiling(k*U), with U provided by floating integers from    ::     
     ::  the file being tested.  Such j's are found 100,000 times,    ::     
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::     
     ::  are used to provide a chi-square test for cell frequencies.  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
            RESULTS OF SQUEEZE TEST FOR SWB1gen.bin    
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
     -.8     -.3     1.8     -.5      .2    -1.5
    -1.9      .0     -.4     1.5      .2     -.4
      .5      .5     -.7     -.4      .4      .8
      .1    -1.3     1.7     1.4     -.6    -1.1
     -.3     -.9      .4    -2.6     1.8      .6
    -2.5     1.6    -1.1      .5     -.5     1.7
      .3      .5      .9    -1.3      .9      .0
     -.1
           Chi-square with 42 degrees of freedom: 50.812
              z-score=   .961  p-value= .834940
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The  OVERLAPPING SUMS test                        ::     
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::     
     :: form [0,1) variables.  Then overlapping sums,                 ::     
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::     
     :: The S's are virtually normal with a certain covariance mat-   ::     
     :: rix.  A linear transformation of the S's converts them to a   ::     
     :: sequence of independent standard normals, which are converted ::     
     :: to uniform variables for a KSTEST. The  p-values from ten     ::     
     :: KSTESTs are given still another KSTEST.                       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Test no.  1      p-value  .415960
                Test no.  2      p-value  .263084
                Test no.  3      p-value  .567233
                Test no.  4      p-value  .013291
                Test no.  5      p-value  .408090
                Test no.  6      p-value  .928747
                Test no.  7      p-value  .473900
                Test no.  8      p-value  .195500
                Test no.  9      p-value  .159665
                Test no. 10      p-value  .507501
   Results of the OSUM test for SWB1gen.bin    
        KSTEST on the above 10 p-values:  .653941

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the RUNS test.  It counts runs up, and runs down, ::     
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::     
     :: ing the 32-bit integers in the specified file. This example   ::     
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::     
     :: contains an up-run of length 3, a down-run of length 2 and an ::     
     :: up-run of (at least) 2, depending on the next values.  The    ::     
     :: covariance matrices for the runs-up and runs-down are well    ::     
     :: known, leading to chisquare tests for quadratic forms in the  ::     
     :: weak inverses of the covariance matrices.  Runs are counted   ::     
     :: for sequences of length 10,000.  This is done ten times. Then ::     
     :: repeated.                                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           The RUNS test for file SWB1gen.bin    
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for SWB1gen.bin    :
       runs up; ks test for 10 p's: .059552
     runs down; ks test for 10 p's: .452187
                 Run test for SWB1gen.bin    :
       runs up; ks test for 10 p's: .113232
     runs down; ks test for 10 p's: .444662

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::     
     :: the number of wins and the number of throws necessary to end  ::     
     :: each game.  The number of wins should be (very close to) a    ::     
     :: normal with mean 200000p and variance 200000p(1-p), with      ::     
     :: p=244/495.  Throws necessary to complete the game can vary    ::     
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::     
     :: A chi-square test is made on the no.-of-throws cell counts.   ::     
     :: Each 32-bit integer from the test file provides the value for ::     
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::     
     :: and taking 1 plus the integer part of the result.             ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Results of craps test for SWB1gen.bin    
  No. of wins:  Observed Expected
                                98375    98585.86
                  98375= No. of wins, z-score= -.943 pvalue= .17282
   Analysis of Throws-per-Game:
 Chisq=  23.06 for 20 degrees of freedom, p=  .71425
               Throws Observed Expected  Chisq     Sum
                  1    66355    66666.7   1.457    1.457
                  2    37660    37654.3    .001    1.458
                  3    27180    26954.7   1.883    3.341
                  4    19343    19313.5    .045    3.386
                  5    14005    13851.4   1.703    5.089
                  6    10102     9943.5   2.525    7.614
                  7     7085     7145.0    .504    8.118
                  8     5142     5139.1    .002    8.120
                  9     3680     3699.9    .107    8.226
                 10     2577     2666.3   2.991   11.217
                 11     1897     1923.3    .360   11.577
                 12     1338     1388.7   1.854   13.431
                 13     1008     1003.7    .018   13.450
                 14      710      726.1    .359   13.808
                 15      535      525.8    .160   13.968
                 16      341      381.2   4.229   18.198
                 17      310      276.5   4.049   22.246
                 18      192      200.8    .388   22.634
                 19      145      146.0    .007   22.641
                 20      101      106.2    .256   22.897
                 21      294      287.1    .165   23.062
            SUMMARY  FOR SWB1gen.bin    
                p-value for no. of wins: .172818
                p-value for throws/game: .714250

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file SWB1gen.all    
