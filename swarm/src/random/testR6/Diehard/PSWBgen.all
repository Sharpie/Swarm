       NOTE: Most of the tests in DIEHARD return a p-value, which            
       should be uniform on [0,1) if the input file contains truly           
       independent random bits.   Those p-values are obtained by             
       p=F(X), where F is the assumed distribution of the sample             
       random variable X---often normal. But that assumed F is just          
       an asymptotic approximation, for which the fit will be worst          
       in the tails. Thus you should not be surprised with                   
       occasional p-values near 0 or 1, such as .0012 or .9983.              
       When a bit stream really FAILS BIG, you will get p's of 0 or          
       1 to six or more places.  By all means, do not, as a                  
       Statistician might, think that a p < .025 or p> .975 means            
       that the RNG has "failed the test at the .05 level".  Such            
       p's happen among the hundreds that DIEHARD produces, even             
       with good RNG's.  So keep in mind that " p happens".                  
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            This is the BIRTHDAY SPACINGS TEST                 ::     
     :: Choose m birthdays in a year of n days.  List the spacings    ::     
     :: between the birthdays.  If j is the number of values that     ::     
     :: occur more than once in that list, then j is asymptotically   ::     
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::     
     :: must be quite large, say n>=2^18, for comparing the results   ::     
     :: to the Poisson distribution with that mean.  This test uses   ::     
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::     
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::     
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::     
     :: provides a p value.  The first test uses bits 1-24 (counting  ::     
     :: from the left) from integers in the specified file.           ::     
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::     
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::     
     :: Each set of bits provides a p-value, and the nine p-values    ::     
     :: provide a sample for a KSTEST.                                ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for PSWBgen.bin    
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  1 to 24   3.624
  duplicate       number       number 
  spacings       observed     expected
        0           9.       67.668
        1          40.      135.335
        2          84.      135.335
        3         113.       90.224
        4         115.       45.112
        5          71.       18.045
  6 to INF         68.        8.282
 Chisquare with  6 d.o.f. =   837.54 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  2 to 25   3.526
  duplicate       number       number 
  spacings       observed     expected
        0          18.       67.668
        1          31.      135.335
        2          94.      135.335
        3         121.       90.224
        4         101.       45.112
        5          69.       18.045
  6 to INF         66.        8.282
 Chisquare with  6 d.o.f. =   755.40 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  3 to 26   3.552
  duplicate       number       number 
  spacings       observed     expected
        0          10.       67.668
        1          45.      135.335
        2          83.      135.335
        3         131.       90.224
        4          95.       45.112
        5          75.       18.045
  6 to INF         61.        8.282
 Chisquare with  6 d.o.f. =   718.63 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  4 to 27   3.600
  duplicate       number       number 
  spacings       observed     expected
        0          18.       67.668
        1          52.      135.335
        2          77.      135.335
        3         117.       90.224
        4          82.       45.112
        5          72.       18.045
  6 to INF         82.        8.282
 Chisquare with  6 d.o.f. =   968.54 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  5 to 28   3.580
  duplicate       number       number 
  spacings       observed     expected
        0          16.       67.668
        1          47.      135.335
        2          80.      135.335
        3         107.       90.224
        4          99.       45.112
        5          84.       18.045
  6 to INF         67.        8.282
 Chisquare with  6 d.o.f. =   844.61 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  6 to 29   3.484
  duplicate       number       number 
  spacings       observed     expected
        0          12.       67.668
        1          46.      135.335
        2          98.      135.335
        3         118.       90.224
        4          99.       45.112
        5          67.       18.045
  6 to INF         60.        8.282
 Chisquare with  6 d.o.f. =   643.77 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  7 to 30   3.476
  duplicate       number       number 
  spacings       observed     expected
        0          16.       67.668
        1          56.      135.335
        2          82.      135.335
        3         115.       90.224
        4          98.       45.112
        5          54.       18.045
  6 to INF         79.        8.282
 Chisquare with  6 d.o.f. =   851.29 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  8 to 31   3.528
  duplicate       number       number 
  spacings       observed     expected
        0          12.       67.668
        1          37.      135.335
        2         106.      135.335
        3         102.       90.224
        4         111.       45.112
        5          69.       18.045
  6 to INF         63.        8.282
 Chisquare with  6 d.o.f. =   726.79 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PSWBgen.bin      using bits  9 to 32   3.522
  duplicate       number       number 
  spacings       observed     expected
        0          14.       67.668
        1          53.      135.335
        2          85.      135.335
        3         117.       90.224
        4          99.       45.112
        5          53.       18.045
  6 to INF         79.        8.282
 Chisquare with  6 d.o.f. =   855.27 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
       1.000000  1.000000  1.000000  1.000000  1.000000
       1.000000  1.000000  1.000000  1.000000
  A KSTEST for the 9 p-values yields 1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::     
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::     
     :: ion 32-bit random integers.  Each set of five consecutive     ::     
     :: integers can be in one of 120 states, for the 5! possible or- ::     
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::     
     :: each provide a state. As many thousands of state transitions  ::     
     :: are observed,  cumulative counts are made of the number of    ::     
     :: occurences of each state.  Then the quadratic form in the     ::     
     :: weak inverse of the 120x120 covariance matrix yields a test   ::     
     :: equivalent to the likelihood ratio test that the 120 cell     ::     
     :: counts came from the specified (asymptotically) normal dis-   ::     
     :: tribution with the specified 120x120 covariance matrix (with  ::     
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           OPERM5 test for file PSWBgen.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom=121.618; p-value= .938927
           OPERM5 test for file PSWBgen.bin    
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom=121.429; p-value= .937499
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::     
     :: 31 bits of 31 random integers from the test sequence are used ::     
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::     
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::     
     :: are rare, and their counts are pooled with those for rank 28. ::     
     :: Ranks are found for 40,000 such random matrices and a chisqua-::     
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for PSWBgen.bin    
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       198     211.4   .851598     .852
        29      5159    5134.0   .121637     .973
        30     23183   23103.0   .276695    1.250
        31     11460   11551.5   .725161    1.975
  chisquare= 1.975 for 3 d. of f.; p-value= .502362
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::     
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::     
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::     
     :: less than 29 are rare, and their counts are pooled with those ::     
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::     
     :: and a chisquare test is performed on counts for ranks  32,31, ::     
     :: 30 and <=29.                                                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for PSWBgen.bin    
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29       218     211.4   .204914     .205
        30      5070    5134.0   .798073    1.003
        31     23155   23103.0   .116830    1.120
        32     11557   11551.5   .002596    1.122
  chisquare= 1.122 for 3 d. of f.; p-value= .373034
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::     
     :: six random 32-bit integers from the generator under test, a   ::     
     :: specified byte is chosen, and the resulting six bytes form a  ::     
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::     
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::     
     :: pooled with those for rank 4. Ranks are found for 100,000     ::     
     :: random matrices, and a chi-square test is performed on        ::     
     :: counts for ranks 6,5 and <=4.                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
         Binary Rank Test for PSWBgen.bin    
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          923       944.3        .481        .481
          r =5        21499     21743.9       2.758       3.239
          r =6        77578     77311.8        .917       4.155
                        p=1-exp(-SUM/2)= .87478
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          984       944.3       1.669       1.669
          r =5        21830     21743.9        .341       2.010
          r =6        77186     77311.8        .205       2.215
                        p=1-exp(-SUM/2)= .66955
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          941       944.3        .012        .012
          r =5        21886     21743.9        .929        .940
          r =6        77173     77311.8        .249       1.189
                        p=1-exp(-SUM/2)= .44827
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          940       944.3        .020        .020
          r =5        21806     21743.9        .177        .197
          r =6        77254     77311.8        .043        .240
                        p=1-exp(-SUM/2)= .11315
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          927       944.3        .317        .317
          r =5        21739     21743.9        .001        .318
          r =6        77334     77311.8        .006        .324
                        p=1-exp(-SUM/2)= .14976
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          940       944.3        .020        .020
          r =5        21870     21743.9        .731        .751
          r =6        77190     77311.8        .192        .943
                        p=1-exp(-SUM/2)= .37587
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          952       944.3        .063        .063
          r =5        21699     21743.9        .093        .155
          r =6        77349     77311.8        .018        .173
                        p=1-exp(-SUM/2)= .08304
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          983       944.3       1.586       1.586
          r =5        21487     21743.9       3.035       4.621
          r =6        77530     77311.8        .616       5.237
                        p=1-exp(-SUM/2)= .92709
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          938       944.3        .042        .042
          r =5        21658     21743.9        .339        .381
          r =6        77404     77311.8        .110        .491
                        p=1-exp(-SUM/2)= .21782
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          923       944.3        .481        .481
          r =5        21690     21743.9        .134        .614
          r =6        77387     77311.8        .073        .687
                        p=1-exp(-SUM/2)= .29081
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1007       944.3       4.163       4.163
          r =5        21819     21743.9        .259       4.422
          r =6        77174     77311.8        .246       4.668
                        p=1-exp(-SUM/2)= .90309
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1000       944.3       3.285       3.285
          r =5        21648     21743.9        .423       3.708
          r =6        77352     77311.8        .021       3.729
                        p=1-exp(-SUM/2)= .84504
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          991       944.3       2.309       2.309
          r =5        21733     21743.9        .005       2.315
          r =6        77276     77311.8        .017       2.331
                        p=1-exp(-SUM/2)= .68830
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          954       944.3        .100        .100
          r =5        21836     21743.9        .390        .490
          r =6        77210     77311.8        .134        .624
                        p=1-exp(-SUM/2)= .26794
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          920       944.3        .625        .625
          r =5        21595     21743.9       1.020       1.645
          r =6        77485     77311.8        .388       2.033
                        p=1-exp(-SUM/2)= .63815
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          935       944.3        .092        .092
          r =5        21537     21743.9       1.969       2.060
          r =6        77528     77311.8        .605       2.665
                        p=1-exp(-SUM/2)= .73617
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          937       944.3        .056        .056
          r =5        21727     21743.9        .013        .070
          r =6        77336     77311.8        .008        .077
                        p=1-exp(-SUM/2)= .03785
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          896       944.3       2.471       2.471
          r =5        21874     21743.9        .778       3.249
          r =6        77230     77311.8        .087       3.336
                        p=1-exp(-SUM/2)= .81134
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          931       944.3        .187        .187
          r =5        21668     21743.9        .265        .452
          r =6        77401     77311.8        .103        .555
                        p=1-exp(-SUM/2)= .24240
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          989       944.3       2.116       2.116
          r =5        21724     21743.9        .018       2.134
          r =6        77287     77311.8        .008       2.142
                        p=1-exp(-SUM/2)= .65733
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          950       944.3        .034        .034
          r =5        21624     21743.9        .661        .696
          r =6        77426     77311.8        .169        .864
                        p=1-exp(-SUM/2)= .35086
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          958       944.3        .199        .199
          r =5        21544     21743.9       1.838       2.036
          r =6        77498     77311.8        .448       2.485
                        p=1-exp(-SUM/2)= .71133
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          955       944.3        .121        .121
          r =5        21792     21743.9        .106        .228
          r =6        77253     77311.8        .045        .272
                        p=1-exp(-SUM/2)= .12731
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          955       944.3        .121        .121
          r =5        21927     21743.9       1.542       1.663
          r =6        77118     77311.8        .486       2.149
                        p=1-exp(-SUM/2)= .65851
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PSWBgen.bin    
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          978       944.3       1.203       1.203
          r =5        21775     21743.9        .044       1.247
          r =6        77247     77311.8        .054       1.301
                        p=1-exp(-SUM/2)= .47832
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .874779     .669549     .448270     .113153     .149757
     .375868     .083038     .927087     .217822     .290808
     .903093     .845042     .688303     .267935     .638148
     .736172     .037846     .811339     .242403     .657334
     .350863     .711326     .127307     .658510     .478317
   brank test summary for PSWBgen.bin    
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .040381

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::                   THE BITSTREAM TEST                          ::     
     :: The file under test is viewed as a stream of bits. Call them  ::     
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::     
     :: and think of the stream of bits as a succession of 20-letter  ::     
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::     
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::     
     :: the number of missing 20-letter (20-bit) words in a string of ::     
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::     
     :: letter words.  For a truly random string of 2^21+19 bits, the ::     
     :: number of missing words j should be (very close to) normally  ::     
     :: distributed with mean 141,909 and sigma 428.  Thus            ::     
     ::  (j-141909)/428 should be a standard normal variate (z score) ::     
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::     
     :: twenty times.                                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
       THE OVERLAPPING 20-tuples BITSTREAM TEST,
            20 BITS PER WORD, 2^21 words.
    This test samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
-----------------------------------        ---------------
 tst no  1:  142741 missing words,    1.94 sigmas from mean, p-value= .97400
 tst no  2:  142423 missing words,    1.20 sigmas from mean, p-value= .88496
 tst no  3:  141492 missing words,    -.98 sigmas from mean, p-value= .16476
 tst no  4:  141337 missing words,   -1.34 sigmas from mean, p-value= .09058
 tst no  5:  142191 missing words,     .66 sigmas from mean, p-value= .74477
 tst no  6:  142411 missing words,    1.17 sigmas from mean, p-value= .87943
 tst no  7:  141979 missing words,     .16 sigmas from mean, p-value= .56466
 tst no  8:  142023 missing words,     .27 sigmas from mean, p-value= .60472
 tst no  9:  141232 missing words,   -1.58 sigmas from mean, p-value= .05676
 tst no 10:  142110 missing words,     .47 sigmas from mean, p-value= .68041
 tst no 11:  142105 missing words,     .46 sigmas from mean, p-value= .67623
 tst no 12:  140954 missing words,   -2.23 sigmas from mean, p-value= .01281
 tst no 13:  142280 missing words,     .87 sigmas from mean, p-value= .80677
 tst no 14:  142316 missing words,     .95 sigmas from mean, p-value= .82899
 tst no 15:  141902 missing words,    -.02 sigmas from mean, p-value= .49317
 tst no 16:  141771 missing words,    -.32 sigmas from mean, p-value= .37327
 tst no 17:  141804 missing words,    -.25 sigmas from mean, p-value= .40280
 tst no 18:  142148 missing words,     .56 sigmas from mean, p-value= .71146
 tst no 19:  141430 missing words,   -1.12 sigmas from mean, p-value= .13137
 tst no 20:  142500 missing words,    1.38 sigmas from mean, p-value= .91622

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The tests OPSO, OQSO and DNA                      ::     
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::     
     :: The OPSO test considers 2-letter words from an alphabet of    ::     
     :: 1024 letters.  Each letter is determined by a specified ten   ::     
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::     
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::     
     :: "keystrokes")  and counts the number of missing words---that  ::     
     :: is 2-letter words which do not appear in the entire sequence. ::     
     :: That count should be very close to normally distributed with  ::     
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::     
     :: be a standard normal variable. The OPSO test takes 32 bits at ::     
     :: a time from the test file and uses a designated set of ten    ::     
     :: consecutive bits. It then restarts the file for the next de-  ::     
     :: signated 10 bits, and so on.                                  ::     
     ::                                                               ::     
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::     
     ::   The test OQSO is similar, except that it considers 4-letter ::     
     :: words from an alphabet of 32 letters, each letter determined  ::     
     :: by a designated string of 5 consecutive bits from the test    ::     
     :: file, elements of which are assumed 32-bit random integers.   ::     
     :: The mean number of missing words in a sequence of 2^21 four-  ::     
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::     
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::     
     :: extensive simulation.                                         ::     
     ::                                                               ::     
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::     
     :: determined by two designated bits in the sequence of random   ::     
     :: integers being tested.  It considers 10-letter words, so that ::     
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::     
     :: mean number of missing words from a string of 2^21  (over-    ::     
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::     
     :: The standard deviation sigma=339 was determined as for OQSO   ::     
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::     
     :: three places), not determined by simulation.                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 OPSO test for generator PSWBgen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for PSWBgen.bin     using bits 23 to 32        142399  1.689  .9543
    OPSO for PSWBgen.bin     using bits 22 to 31        141866  -.149  .4406
    OPSO for PSWBgen.bin     using bits 21 to 30        142312  1.389  .9175
    OPSO for PSWBgen.bin     using bits 20 to 29        142220  1.071  .8580
    OPSO for PSWBgen.bin     using bits 19 to 28        141824  -.294  .3843
    OPSO for PSWBgen.bin     using bits 18 to 27        142473  1.944  .9740
    OPSO for PSWBgen.bin     using bits 17 to 26        141857  -.180  .4284
    OPSO for PSWBgen.bin     using bits 16 to 25        141275 -2.187  .0144
    OPSO for PSWBgen.bin     using bits 15 to 24        141589 -1.105  .1347
    OPSO for PSWBgen.bin     using bits 14 to 23        141964   .189  .5748
    OPSO for PSWBgen.bin     using bits 13 to 22        141740  -.584  .2796
    OPSO for PSWBgen.bin     using bits 12 to 21        141443 -1.608  .0539
    OPSO for PSWBgen.bin     using bits 11 to 20        141844  -.225  .4109
    OPSO for PSWBgen.bin     using bits 10 to 19        141904  -.018  .4927
    OPSO for PSWBgen.bin     using bits  9 to 18        141792  -.405  .3429
    OPSO for PSWBgen.bin     using bits  8 to 17        141578 -1.143  .1266
    OPSO for PSWBgen.bin     using bits  7 to 16        141667  -.836  .2017
    OPSO for PSWBgen.bin     using bits  6 to 15        142054   .499  .6911
    OPSO for PSWBgen.bin     using bits  5 to 14        142438  1.823  .9658
    OPSO for PSWBgen.bin     using bits  4 to 13        142128   .754  .7746
    OPSO for PSWBgen.bin     using bits  3 to 12        141777  -.456  .3241
    OPSO for PSWBgen.bin     using bits  2 to 11        142091   .626  .7345
    OPSO for PSWBgen.bin     using bits  1 to 10        141758  -.522  .3009
 OQSO test for generator PSWBgen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for PSWBgen.bin     using bits 28 to 32        142151   .819  .7937
    OQSO for PSWBgen.bin     using bits 27 to 31        142061   .514  .6964
    OQSO for PSWBgen.bin     using bits 26 to 30        141809  -.340  .3669
    OQSO for PSWBgen.bin     using bits 25 to 29        141963   .182  .5722
    OQSO for PSWBgen.bin     using bits 24 to 28        142191   .955  .8302
    OQSO for PSWBgen.bin     using bits 23 to 27        142073   .555  .7105
    OQSO for PSWBgen.bin     using bits 22 to 26        141743  -.564  .2864
    OQSO for PSWBgen.bin     using bits 21 to 25        141965   .189  .5748
    OQSO for PSWBgen.bin     using bits 20 to 24        142296  1.311  .9050
    OQSO for PSWBgen.bin     using bits 19 to 23        141722  -.635  .2627
    OQSO for PSWBgen.bin     using bits 18 to 22        141773  -.462  .3220
    OQSO for PSWBgen.bin     using bits 17 to 21        142019   .372  .6450
    OQSO for PSWBgen.bin     using bits 16 to 20        142108   .673  .7497
    OQSO for PSWBgen.bin     using bits 15 to 19        141851  -.198  .4216
    OQSO for PSWBgen.bin     using bits 14 to 18        142001   .311  .6220
    OQSO for PSWBgen.bin     using bits 13 to 17        141899  -.035  .4860
    OQSO for PSWBgen.bin     using bits 12 to 16        141967   .195  .5775
    OQSO for PSWBgen.bin     using bits 11 to 15        142070   .545  .7070
    OQSO for PSWBgen.bin     using bits 10 to 14        141668  -.818  .2067
    OQSO for PSWBgen.bin     using bits  9 to 13        141927   .060  .5239
    OQSO for PSWBgen.bin     using bits  8 to 12        141780  -.438  .3305
    OQSO for PSWBgen.bin     using bits  7 to 11        141493 -1.411  .0791
    OQSO for PSWBgen.bin     using bits  6 to 10        142299  1.321  .9067
    OQSO for PSWBgen.bin     using bits  5 to  9        141827  -.279  .3901
    OQSO for PSWBgen.bin     using bits  4 to  8        141929   .067  .5266
    OQSO for PSWBgen.bin     using bits  3 to  7        141451 -1.554  .0601
    OQSO for PSWBgen.bin     using bits  2 to  6        142206  1.006  .8427
    OQSO for PSWBgen.bin     using bits  1 to  5        141645  -.896  .1851
  DNA test for generator PSWBgen.bin              
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for PSWBgen.bin     using bits 31 to 32        141185 -2.137  .0163
     DNA for PSWBgen.bin     using bits 30 to 31        141791  -.349  .3635
     DNA for PSWBgen.bin     using bits 29 to 30        141898  -.033  .4867
     DNA for PSWBgen.bin     using bits 28 to 29        142017   .318  .6246
     DNA for PSWBgen.bin     using bits 27 to 28        142221   .919  .8211
     DNA for PSWBgen.bin     using bits 26 to 27        141670  -.706  .2401
     DNA for PSWBgen.bin     using bits 25 to 26        141577  -.980  .1635
     DNA for PSWBgen.bin     using bits 24 to 25        141757  -.449  .3266
     DNA for PSWBgen.bin     using bits 23 to 24        141463 -1.317  .0940
     DNA for PSWBgen.bin     using bits 22 to 23        141930   .061  .5243
     DNA for PSWBgen.bin     using bits 21 to 22        141841  -.202  .4201
     DNA for PSWBgen.bin     using bits 20 to 21        142180   .798  .7877
     DNA for PSWBgen.bin     using bits 19 to 20        141788  -.358  .3602
     DNA for PSWBgen.bin     using bits 18 to 19        142452  1.601  .9453
     DNA for PSWBgen.bin     using bits 17 to 18        141847  -.184  .4271
     DNA for PSWBgen.bin     using bits 16 to 17        141933   .070  .5278
     DNA for PSWBgen.bin     using bits 15 to 16        142104   .574  .7171
     DNA for PSWBgen.bin     using bits 14 to 15        141186 -2.134  .0164
     DNA for PSWBgen.bin     using bits 13 to 14        141807  -.302  .3814
     DNA for PSWBgen.bin     using bits 12 to 13        141550 -1.060  .1446
     DNA for PSWBgen.bin     using bits 11 to 12        142014   .309  .6213
     DNA for PSWBgen.bin     using bits 10 to 11        141613  -.874  .1910
     DNA for PSWBgen.bin     using bits  9 to 10        141920   .031  .5126
     DNA for PSWBgen.bin     using bits  8 to  9        141460 -1.325  .0925
     DNA for PSWBgen.bin     using bits  7 to  8        142223   .925  .8226
     DNA for PSWBgen.bin     using bits  6 to  7        141874  -.104  .4585
     DNA for PSWBgen.bin     using bits  5 to  6        142171   .772  .7799
     DNA for PSWBgen.bin     using bits  4 to  5        141587  -.951  .1708
     DNA for PSWBgen.bin     using bits  3 to  4        142143   .689  .7547
     DNA for PSWBgen.bin     using bits  2 to  3        141614  -.871  .1918
     DNA for PSWBgen.bin     using bits  1 to  2        141915   .017  .5067

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::     
     :: Consider the file under test as a stream of bytes (four per   ::     
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::     
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::     
     :: the stream of bytes provide a string of overlapping  5-letter ::     
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::     
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::     
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::     
     :: we have a monkey at a typewriter hitting five keys with vari- ::     
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::     
     :: possible 5-letter words, and from a string of 256,000 (over-  ::     
     :: lapping) 5-letter words, counts are made on the frequencies   ::     
     :: for each word.   The quadratic form in the weak inverse of    ::     
     :: the covariance matrix of the cell counts provides a chisquare ::     
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::     
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
   Test results for PSWBgen.bin    
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for PSWBgen.bin      2612.53      1.591      .944244
 byte stream for PSWBgen.bin      2475.50      -.346      .364499

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::     
     :: Consider the file under test as a stream of 32-bit integers.  ::     
     :: From each integer, a specific byte is chosen , say the left-  ::     
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::     
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::     
     :: the specified bytes from successive integers provide a string ::     
     :: of (overlapping) 5-letter words, each "letter" taking values  ::     
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::     
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::     
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::     
     :: hitting five keys with with various probabilities::  37,56,70,::     
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::     
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::     
     :: are made on the frequencies for each word. The quadratic form ::     
     :: in the weak inverse of the covariance matrix of the cell      ::     
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::     
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::     
     :: and 4-letter cell counts.                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2473.41      -.376      .353423
           bits  2 to  9  2443.79      -.795      .213344
           bits  3 to 10  2471.33      -.405      .342590
           bits  4 to 11  2458.26      -.590      .277493
           bits  5 to 12  2515.95       .226      .589248
           bits  6 to 13  2606.43      1.505      .933858
           bits  7 to 14  2510.73       .152      .560328
           bits  8 to 15  2472.05      -.395      .346305
           bits  9 to 16  2584.16      1.190      .883024
           bits 10 to 17  2513.06       .185      .573259
           bits 11 to 18  2569.50       .983      .837175
           bits 12 to 19  2551.19       .724      .765449
           bits 13 to 20  2539.61       .560      .712316
           bits 14 to 21  2569.20       .979      .836121
           bits 15 to 22  2434.23      -.930      .176170
           bits 16 to 23  2464.55      -.501      .308068
           bits 17 to 24  2542.69       .604      .726987
           bits 18 to 25  2748.43      3.513      .999779
           bits 19 to 26  2545.11       .638      .738259
           bits 20 to 27  2440.22      -.845      .198924
           bits 21 to 28  2461.26      -.548      .291882
           bits 22 to 29  2507.30       .103      .541127
           bits 23 to 30  2442.01      -.820      .206080
           bits 24 to 31  2475.58      -.345      .364896
           bits 25 to 32  2500.80       .011      .504486

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THIS IS A PARKING LOT TEST                      ::     
     :: In a square of side 100, randomly "park" a car---a circle of  ::     
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::     
     :: time parking "by ear".  That is, if an attempt to park a car  ::     
     :: causes a crash with one already parked, try again at a new    ::     
     :: random location. (To avoid path problems, consider parking    ::     
     :: helicopters rather than cars.)   Each attempt leads to either ::     
     :: a crash or a success, the latter followed by an increment to  ::     
     :: the list of cars already parked. If we plot n:  the number of ::     
     :: attempts, versus k::  the number successfully parked, we get a::     
     :: curve that should be similar to those provided by a perfect   ::     
     :: random number generator.  Theory for the behavior of such a   ::     
     :: random curve seems beyond reach, and as graphics displays are ::     
     :: not available for this battery of tests, a simple characteriz ::     
     :: ation of the random experiment is used: k, the number of cars ::     
     :: successfully parked after n=12,000 attempts. Simulation shows ::     
     :: that k should average 3523 with sigma 21.9 and is very close  ::     
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::     
     :: andard normal variable, which, converted to a uniform varia-  ::     
     :: ble, provides input to a KSTEST based on a sample of 10.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           CDPARK: result of ten tests on file PSWBgen.bin    
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3554    z-score:  1.416 p-value: .921543
            Successes: 3505    z-score:  -.822 p-value: .205562
            Successes: 3508    z-score:  -.685 p-value: .246694
            Successes: 3534    z-score:   .502 p-value: .692266
            Successes: 3550    z-score:  1.233 p-value: .891189
            Successes: 3541    z-score:   .822 p-value: .794438
            Successes: 3490    z-score: -1.507 p-value: .065925
            Successes: 3499    z-score: -1.096 p-value: .136563
            Successes: 3508    z-score:  -.685 p-value: .246694
            Successes: 3528    z-score:   .228 p-value: .590298

           square size   avg. no.  parked   sample sigma
             100.            3521.700       21.426
            KSTEST for the above 10: p=  .148408

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THE MINIMUM DISTANCE TEST                       ::     
     :: It does this 100 times::   choose n=8000 random points in a   ::     
     :: square of side 10000.  Find d, the minimum distance between   ::     
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::     
     :: pendent uniform, then d^2, the square of the minimum distance ::     
     :: should be (very close to) exponentially distributed with mean ::     
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::     
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::     
     :: formity for random points in the square. Test numbers=0 mod 5 ::     
     :: are printed but the KSTEST is based on the full set of 100    ::     
     :: random choices of 8000 points in the 10000x10000 square.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               This is the MINIMUM DISTANCE test
              for random integers in the file PSWBgen.bin    
     Sample no.    d^2     avg     equiv uni            
           5     .3077    .5221     .266018
          10     .6735    .5729     .491802
          15     .5379    .6302     .417590
          20     .4123    .7485     .339231
          25    3.8269    .9510     .978637
          30     .2670    .8308     .235351
          35    1.8391    .8674     .842497
          40     .0368    .8462     .036334
          45     .1310    .8048     .123402
          50     .4586    .8108     .369258
          55     .6011    .9035     .453448
          60     .3657    .8870     .307547
          65     .7598    .8884     .534025
          70    1.3639    .8899     .746078
          75    3.3535    .9221     .965622
          80    1.7714    .9313     .831421
          85     .9499    .9310     .615047
          90     .5046    .9612     .397785
          95     .3785    .9657     .316425
         100     .0729    .9667     .070615
     MINIMUM DISTANCE TEST for PSWBgen.bin    
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .810597

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::              THE 3DSPHERES TEST                               ::     
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::     
     :: point, center a sphere large enough to reach the next closest ::     
     :: point. Then the volume of the smallest such sphere is (very   ::     
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::     
     :: the radius cubed is exponential with mean 30. (The mean is    ::     
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::     
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::     
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::     
     ::  KSTEST is done on the 20 p-values.                           ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               The 3DSPHERES test for file PSWBgen.bin    
 sample no:  1     r^3=  21.144     p-value= .50580
 sample no:  2     r^3=  16.740     p-value= .42764
 sample no:  3     r^3= 125.689     p-value= .98485
 sample no:  4     r^3=  84.323     p-value= .93984
 sample no:  5     r^3=  15.930     p-value= .41198
 sample no:  6     r^3=  70.481     p-value= .90457
 sample no:  7     r^3=  29.288     p-value= .62328
 sample no:  8     r^3=  11.756     p-value= .32421
 sample no:  9     r^3=   3.639     p-value= .11422
 sample no: 10     r^3=   3.490     p-value= .10982
 sample no: 11     r^3=  16.514     p-value= .42333
 sample no: 12     r^3=  16.204     p-value= .41733
 sample no: 13     r^3=    .408     p-value= .01352
 sample no: 14     r^3=  33.068     p-value= .66789
 sample no: 15     r^3=  61.588     p-value= .87164
 sample no: 16     r^3=  15.552     p-value= .40453
 sample no: 17     r^3=  30.763     p-value= .64136
 sample no: 18     r^3=   3.797     p-value= .11889
 sample no: 19     r^3=  29.966     p-value= .63170
 sample no: 20     r^3=   3.956     p-value= .12355
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file PSWBgen.bin          p-value= .167965
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::      This is the SQEEZE test                                  ::     
     ::  Random integers are floated to get uniforms on [0,1). Start- ::     
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::     
     ::  iterations necessary to reduce k to 1, using the reduction   ::     
     ::  k=ceiling(k*U), with U provided by floating integers from    ::     
     ::  the file being tested.  Such j's are found 100,000 times,    ::     
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::     
     ::  are used to provide a chi-square test for cell frequencies.  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
            RESULTS OF SQUEEZE TEST FOR PSWBgen.bin    
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
    -1.5      .9    -1.3     1.1     -.6    -1.0
    -1.2     -.2     -.3      .7      .5      .7
     -.1     -.7    -1.0    -2.7     1.7      .5
     1.1      .8     -.8     1.1      .4     -.7
      .7      .4     1.2     -.6     -.7     -.4
      .3     -.9    -2.1    -1.2     -.5    -1.2
    -1.6    -1.0      .1     -.7     -.6    -1.0
      .8
           Chi-square with 42 degrees of freedom: 43.975
              z-score=   .215  p-value= .612155
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The  OVERLAPPING SUMS test                        ::     
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::     
     :: form [0,1) variables.  Then overlapping sums,                 ::     
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::     
     :: The S's are virtually normal with a certain covariance mat-   ::     
     :: rix.  A linear transformation of the S's converts them to a   ::     
     :: sequence of independent standard normals, which are converted ::     
     :: to uniform variables for a KSTEST. The  p-values from ten     ::     
     :: KSTESTs are given still another KSTEST.                       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Test no.  1      p-value  .948765
                Test no.  2      p-value  .722636
                Test no.  3      p-value  .251175
                Test no.  4      p-value  .209314
                Test no.  5      p-value  .758052
                Test no.  6      p-value  .159902
                Test no.  7      p-value  .218488
                Test no.  8      p-value  .258843
                Test no.  9      p-value  .275724
                Test no. 10      p-value  .092961
   Results of the OSUM test for PSWBgen.bin    
        KSTEST on the above 10 p-values:  .805799

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the RUNS test.  It counts runs up, and runs down, ::     
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::     
     :: ing the 32-bit integers in the specified file. This example   ::     
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::     
     :: contains an up-run of length 3, a down-run of length 2 and an ::     
     :: up-run of (at least) 2, depending on the next values.  The    ::     
     :: covariance matrices for the runs-up and runs-down are well    ::     
     :: known, leading to chisquare tests for quadratic forms in the  ::     
     :: weak inverses of the covariance matrices.  Runs are counted   ::     
     :: for sequences of length 10,000.  This is done ten times. Then ::     
     :: repeated.                                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           The RUNS test for file PSWBgen.bin    
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for PSWBgen.bin    :
       runs up; ks test for 10 p's: .742052
     runs down; ks test for 10 p's: .728067
                 Run test for PSWBgen.bin    :
       runs up; ks test for 10 p's: .320204
     runs down; ks test for 10 p's: .439992

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::     
     :: the number of wins and the number of throws necessary to end  ::     
     :: each game.  The number of wins should be (very close to) a    ::     
     :: normal with mean 200000p and variance 200000p(1-p), with      ::     
     :: p=244/495.  Throws necessary to complete the game can vary    ::     
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::     
     :: A chi-square test is made on the no.-of-throws cell counts.   ::     
     :: Each 32-bit integer from the test file provides the value for ::     
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::     
     :: and taking 1 plus the integer part of the result.             ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Results of craps test for PSWBgen.bin    
  No. of wins:  Observed Expected
                                98771    98585.86
                  98771= No. of wins, z-score=  .828 pvalue= .79618
   Analysis of Throws-per-Game:
 Chisq=  30.10 for 20 degrees of freedom, p=  .93176
               Throws Observed Expected  Chisq     Sum
                  1    66577    66666.7    .121     .121
                  2    38050    37654.3   4.158    4.278
                  3    27039    26954.7    .263    4.542
                  4    19231    19313.5    .352    4.894
                  5    13592    13851.4   4.859    9.753
                  6     9894     9943.5    .247    9.999
                  7     7146     7145.0    .000    9.999
                  8     5016     5139.1   2.947   12.947
                  9     3701     3699.9    .000   12.947
                 10     2667     2666.3    .000   12.947
                 11     2049     1923.3   8.211   21.159
                 12     1339     1388.7   1.782   22.940
                 13     1027     1003.7    .540   23.480
                 14      704      726.1    .675   24.156
                 15      531      525.8    .051   24.206
                 16      412      381.2   2.497   26.703
                 17      287      276.5    .396   27.099
                 18      191      200.8    .481   27.580
                 19      164      146.0   2.223   29.803
                 20      102      106.2    .167   29.971
                 21      281      287.1    .130   30.101
            SUMMARY  FOR PSWBgen.bin    
                p-value for no. of wins: .796181
                p-value for throws/game: .931764

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file PSWBgen.all    
