       NOTE: Most of the tests in DIEHARD return a p-value, which            
       should be uniform on [0,1) if the input file contains truly           
       independent random bits.   Those p-values are obtained by             
       p=F(X), where F is the assumed distribution of the sample             
       random variable X---often normal. But that assumed F is just          
       an asymptotic approximation, for which the fit will be worst          
       in the tails. Thus you should not be surprised with                   
       occasional p-values near 0 or 1, such as .0012 or .9983.              
       When a bit stream really FAILS BIG, you will get p's of 0 or          
       1 to six or more places.  By all means, do not, as a                  
       Statistician might, think that a p < .025 or p> .975 means            
       that the RNG has "failed the test at the .05 level".  Such            
       p's happen among the hundreds that DIEHARD produces, even             
       with good RNG's.  So keep in mind that " p happens".                  
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            This is the BIRTHDAY SPACINGS TEST                 ::     
     :: Choose m birthdays in a year of n days.  List the spacings    ::     
     :: between the birthdays.  If j is the number of values that     ::     
     :: occur more than once in that list, then j is asymptotically   ::     
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::     
     :: must be quite large, say n>=2^18, for comparing the results   ::     
     :: to the Poisson distribution with that mean.  This test uses   ::     
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::     
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::     
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::     
     :: provides a p value.  The first test uses bits 1-24 (counting  ::     
     :: from the left) from integers in the specified file.           ::     
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::     
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::     
     :: Each set of bits provides a p-value, and the nine p-values    ::     
     :: provide a sample for a KSTEST.                                ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for PMMLCG5gen.bin 
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  1 to 24   2.030
  duplicate       number       number 
  spacings       observed     expected
        0          71.       67.668
        1         126.      135.335
        2         139.      135.335
        3          88.       90.224
        4          41.       45.112
        5          29.       18.045
  6 to INF          6.        8.282
 Chisquare with  6 d.o.f. =     8.62 p-value=  .803691
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  2 to 25   1.960
  duplicate       number       number 
  spacings       observed     expected
        0          78.       67.668
        1         124.      135.335
        2         141.      135.335
        3          84.       90.224
        4          51.       45.112
        5          16.       18.045
  6 to INF          6.        8.282
 Chisquare with  6 d.o.f. =     4.82 p-value=  .433219
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  3 to 26   1.996
  duplicate       number       number 
  spacings       observed     expected
        0          74.       67.668
        1         136.      135.335
        2         133.      135.335
        3          81.       90.224
        4          45.       45.112
        5          19.       18.045
  6 to INF         12.        8.282
 Chisquare with  6 d.o.f. =     3.30 p-value=  .229539
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  4 to 27   1.882
  duplicate       number       number 
  spacings       observed     expected
        0          73.       67.668
        1         153.      135.335
        2         123.      135.335
        3          98.       90.224
        4          32.       45.112
        5          12.       18.045
  6 to INF          9.        8.282
 Chisquare with  6 d.o.f. =    10.42 p-value=  .891904
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  5 to 28   2.136
  duplicate       number       number 
  spacings       observed     expected
        0          65.       67.668
        1         117.      135.335
        2         146.      135.335
        3          85.       90.224
        4          47.       45.112
        5          27.       18.045
  6 to INF         13.        8.282
 Chisquare with  6 d.o.f. =    10.94 p-value=  .909860
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  6 to 29   2.026
  duplicate       number       number 
  spacings       observed     expected
        0          64.       67.668
        1         134.      135.335
        2         139.      135.335
        3          88.       90.224
        4          47.       45.112
        5          20.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =      .67 p-value=  .004814
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  7 to 30   2.016
  duplicate       number       number 
  spacings       observed     expected
        0          71.       67.668
        1         120.      135.335
        2         148.      135.335
        3          91.       90.224
        4          45.       45.112
        5          14.       18.045
  6 to INF         11.        8.282
 Chisquare with  6 d.o.f. =     4.89 p-value=  .442351
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  8 to 31   1.952
  duplicate       number       number 
  spacings       observed     expected
        0          66.       67.668
        1         143.      135.335
        2         142.      135.335
        3          72.       90.224
        4          58.       45.112
        5          14.       18.045
  6 to INF          5.        8.282
 Chisquare with  6 d.o.f. =    10.37 p-value=  .890218
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG5gen.bin   using bits  9 to 32   3.934
  duplicate       number       number 
  spacings       observed     expected
        0           5.       67.668
        1          41.      135.335
        2          86.      135.335
        3          89.       90.224
        4         105.       45.112
        5          78.       18.045
  6 to INF         96.        8.282
 Chisquare with  6 d.o.f. =  1349.59 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
        .803691   .433219   .229539   .891904   .909860
        .004814   .442351   .890218  1.000000
  A KSTEST for the 9 p-values yields  .998735

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::     
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::     
     :: ion 32-bit random integers.  Each set of five consecutive     ::     
     :: integers can be in one of 120 states, for the 5! possible or- ::     
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::     
     :: each provide a state. As many thousands of state transitions  ::     
     :: are observed,  cumulative counts are made of the number of    ::     
     :: occurences of each state.  Then the quadratic form in the     ::     
     :: weak inverse of the 120x120 covariance matrix yields a test   ::     
     :: equivalent to the likelihood ratio test that the 120 cell     ::     
     :: counts came from the specified (asymptotically) normal dis-   ::     
     :: tribution with the specified 120x120 covariance matrix (with  ::     
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           OPERM5 test for file PMMLCG5gen.bin 
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 96.635; p-value= .451425
           OPERM5 test for file PMMLCG5gen.bin 
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 99.643; p-value= .537040
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::     
     :: 31 bits of 31 random integers from the test sequence are used ::     
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::     
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::     
     :: are rare, and their counts are pooled with those for rank 28. ::     
     :: Ranks are found for 40,000 such random matrices and a chisqua-::     
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for PMMLCG5gen.bin 
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       198     211.4   .851598     .852
        29      5103    5134.0   .187307    1.039
        30     23112   23103.0   .003470    1.042
        31     11587   11551.5   .108948    1.151
  chisquare= 1.151 for 3 d. of f.; p-value= .376935
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::     
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::     
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::     
     :: less than 29 are rare, and their counts are pooled with those ::     
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::     
     :: and a chisquare test is performed on counts for ranks  32,31, ::     
     :: 30 and <=29.                                                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for PMMLCG5gen.bin 
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29      1444     211.4********** 7186.041
        30     15341    5134.0**********27478.686
        31     23215   23103.0   .54250427479.229
        32         0   11551.5**********39030.754
  chisquare=****** for 3 d. of f.; p-value=1.000000
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::     
     :: six random 32-bit integers from the generator under test, a   ::     
     :: specified byte is chosen, and the resulting six bytes form a  ::     
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::     
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::     
     :: pooled with those for rank 4. Ranks are found for 100,000     ::     
     :: random matrices, and a chi-square test is performed on        ::     
     :: counts for ranks 6,5 and <=4.                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
         Binary Rank Test for PMMLCG5gen.bin 
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          964       944.3        .411        .411
          r =5        21714     21743.9        .041        .452
          r =6        77322     77311.8        .001        .453
                        p=1-exp(-SUM/2)= .20284
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          899       944.3       2.173       2.173
          r =5        21769     21743.9        .029       2.202
          r =6        77332     77311.8        .005       2.208
                        p=1-exp(-SUM/2)= .66838
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          943       944.3        .002        .002
          r =5        22005     21743.9       3.135       3.137
          r =6        77052     77311.8        .873       4.010
                        p=1-exp(-SUM/2)= .86535
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          945       944.3        .001        .001
          r =5        21757     21743.9        .008        .008
          r =6        77298     77311.8        .002        .011
                        p=1-exp(-SUM/2)= .00542
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          961       944.3        .295        .295
          r =5        21632     21743.9        .576        .871
          r =6        77407     77311.8        .117        .988
                        p=1-exp(-SUM/2)= .38994
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          965       944.3        .454        .454
          r =5        21805     21743.9        .172        .625
          r =6        77230     77311.8        .087        .712
                        p=1-exp(-SUM/2)= .29951
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          963       944.3        .370        .370
          r =5        21609     21743.9        .837       1.207
          r =6        77428     77311.8        .175       1.382
                        p=1-exp(-SUM/2)= .49888
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          899       944.3       2.173       2.173
          r =5        21624     21743.9        .661       2.834
          r =6        77477     77311.8        .353       3.187
                        p=1-exp(-SUM/2)= .79683
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          890       944.3       3.123       3.123
          r =5        21866     21743.9        .686       3.808
          r =6        77244     77311.8        .059       3.868
                        p=1-exp(-SUM/2)= .85541
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          914       944.3        .972        .972
          r =5        21594     21743.9       1.033       2.006
          r =6        77492     77311.8        .420       2.426
                        p=1-exp(-SUM/2)= .70265
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          939       944.3        .030        .030
          r =5        21839     21743.9        .416        .446
          r =6        77222     77311.8        .104        .550
                        p=1-exp(-SUM/2)= .24043
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          977       944.3       1.132       1.132
          r =5        21531     21743.9       2.085       3.217
          r =6        77492     77311.8        .420       3.637
                        p=1-exp(-SUM/2)= .83772
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          959       944.3        .229        .229
          r =5        21667     21743.9        .272        .501
          r =6        77374     77311.8        .050        .551
                        p=1-exp(-SUM/2)= .24073
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          947       944.3        .008        .008
          r =5        21593     21743.9       1.047       1.055
          r =6        77460     77311.8        .284       1.339
                        p=1-exp(-SUM/2)= .48804
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          919       944.3        .678        .678
          r =5        21432     21743.9       4.474       5.152
          r =6        77649     77311.8       1.471       6.623
                        p=1-exp(-SUM/2)= .96353
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          909       944.3       1.320       1.320
          r =5        21612     21743.9        .800       2.120
          r =6        77479     77311.8        .362       2.481
                        p=1-exp(-SUM/2)= .71082
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          968       944.3        .595        .595
          r =5        21459     21743.9       3.733       4.328
          r =6        77573     77311.8        .882       5.210
                        p=1-exp(-SUM/2)= .92610
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          931       944.3        .187        .187
          r =5        21545     21743.9       1.819       2.007
          r =6        77524     77311.8        .582       2.589
                        p=1-exp(-SUM/2)= .72599
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          938       944.3        .042        .042
          r =5        21675     21743.9        .218        .260
          r =6        77387     77311.8        .073        .334
                        p=1-exp(-SUM/2)= .15359
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          963       944.3        .370        .370
          r =5        21803     21743.9        .161        .531
          r =6        77234     77311.8        .078        .609
                        p=1-exp(-SUM/2)= .26258
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          967       944.3        .546        .546
          r =5        21921     21743.9       1.442       1.988
          r =6        77112     77311.8        .516       2.504
                        p=1-exp(-SUM/2)= .71413
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          967       944.3        .546        .546
          r =5        21797     21743.9        .130        .675
          r =6        77236     77311.8        .074        .750
                        p=1-exp(-SUM/2)= .31258
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          916       944.3        .848        .848
          r =5        21577     21743.9       1.281       2.129
          r =6        77507     77311.8        .493       2.622
                        p=1-exp(-SUM/2)= .73046
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          877       944.3       4.797       4.797
          r =5        21724     21743.9        .018       4.815
          r =6        77399     77311.8        .098       4.913
                        p=1-exp(-SUM/2)= .91427
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG5gen.bin 
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         3603       944.3    7485.618    7485.618
          r =5        38165     21743.9   12401.295   19886.914
          r =6        58232     77311.8    4708.711   24595.625
                        p=1-exp(-SUM/2)=1.00000
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .202836     .668375     .865349     .005422     .389936
     .299512     .498883     .796826     .855406     .702654
     .240431     .837717     .240732     .488039     .963531
     .710816     .926101     .725991     .153593     .262581
     .714130     .312581     .730465     .914273    1.000000
   brank test summary for PMMLCG5gen.bin 
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .961930

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::                   THE BITSTREAM TEST                          ::     
     :: The file under test is viewed as a stream of bits. Call them  ::     
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::     
     :: and think of the stream of bits as a succession of 20-letter  ::     
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::     
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::     
     :: the number of missing 20-letter (20-bit) words in a string of ::     
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::     
     :: letter words.  For a truly random string of 2^21+19 bits, the ::     
     :: number of missing words j should be (very close to) normally  ::     
     :: distributed with mean 141,909 and sigma 428.  Thus            ::     
     ::  (j-141909)/428 should be a standard normal variate (z score) ::     
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::     
     :: twenty times.                                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
       THE OVERLAPPING 20-tuples BITSTREAM TEST,
            20 BITS PER WORD, 2^21 words.
    This test samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
-----------------------------------        ---------------
 tst no  1:  147698 missing words,   13.52 sigmas from mean, p-value=1.00000
 tst no  2:  147060 missing words,   12.03 sigmas from mean, p-value=1.00000
 tst no  3:  147146 missing words,   12.24 sigmas from mean, p-value=1.00000
 tst no  4:  148205 missing words,   14.71 sigmas from mean, p-value=1.00000
 tst no  5:  148327 missing words,   14.99 sigmas from mean, p-value=1.00000
 tst no  6:  146975 missing words,   11.84 sigmas from mean, p-value=1.00000
 tst no  7:  147739 missing words,   13.62 sigmas from mean, p-value=1.00000
 tst no  8:  147338 missing words,   12.68 sigmas from mean, p-value=1.00000
 tst no  9:  147813 missing words,   13.79 sigmas from mean, p-value=1.00000
 tst no 10:  147946 missing words,   14.10 sigmas from mean, p-value=1.00000
 tst no 11:  146794 missing words,   11.41 sigmas from mean, p-value=1.00000
 tst no 12:  147504 missing words,   13.07 sigmas from mean, p-value=1.00000
 tst no 13:  147406 missing words,   12.84 sigmas from mean, p-value=1.00000
 tst no 14:  147639 missing words,   13.39 sigmas from mean, p-value=1.00000
 tst no 15:  148312 missing words,   14.96 sigmas from mean, p-value=1.00000
 tst no 16:  148046 missing words,   14.34 sigmas from mean, p-value=1.00000
 tst no 17:  147455 missing words,   12.96 sigmas from mean, p-value=1.00000
 tst no 18:  147761 missing words,   13.67 sigmas from mean, p-value=1.00000
 tst no 19:  147761 missing words,   13.67 sigmas from mean, p-value=1.00000
 tst no 20:  147821 missing words,   13.81 sigmas from mean, p-value=1.00000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The tests OPSO, OQSO and DNA                      ::     
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::     
     :: The OPSO test considers 2-letter words from an alphabet of    ::     
     :: 1024 letters.  Each letter is determined by a specified ten   ::     
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::     
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::     
     :: "keystrokes")  and counts the number of missing words---that  ::     
     :: is 2-letter words which do not appear in the entire sequence. ::     
     :: That count should be very close to normally distributed with  ::     
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::     
     :: be a standard normal variable. The OPSO test takes 32 bits at ::     
     :: a time from the test file and uses a designated set of ten    ::     
     :: consecutive bits. It then restarts the file for the next de-  ::     
     :: signated 10 bits, and so on.                                  ::     
     ::                                                               ::     
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::     
     ::   The test OQSO is similar, except that it considers 4-letter ::     
     :: words from an alphabet of 32 letters, each letter determined  ::     
     :: by a designated string of 5 consecutive bits from the test    ::     
     :: file, elements of which are assumed 32-bit random integers.   ::     
     :: The mean number of missing words in a sequence of 2^21 four-  ::     
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::     
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::     
     :: extensive simulation.                                         ::     
     ::                                                               ::     
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::     
     :: determined by two designated bits in the sequence of random   ::     
     :: integers being tested.  It considers 10-letter words, so that ::     
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::     
     :: mean number of missing words from a string of 2^21  (over-    ::     
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::     
     :: The standard deviation sigma=339 was determined as for OQSO   ::     
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::     
     :: three places), not determined by simulation.                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 OPSO test for generator PMMLCG5gen.bin           
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for PMMLCG5gen.bin  using bits 23 to 32        786504******* 1.0000
    OPSO for PMMLCG5gen.bin  using bits 22 to 31        142040   .451  .6739
    OPSO for PMMLCG5gen.bin  using bits 21 to 30        141749  -.553  .2902
    OPSO for PMMLCG5gen.bin  using bits 20 to 29        142205  1.020  .8460
    OPSO for PMMLCG5gen.bin  using bits 19 to 28        141324 -2.018  .0218
    OPSO for PMMLCG5gen.bin  using bits 18 to 27        142835  3.192  .9993
    OPSO for PMMLCG5gen.bin  using bits 17 to 26        141513 -1.367  .0859
    OPSO for PMMLCG5gen.bin  using bits 16 to 25        141489 -1.449  .0736
    OPSO for PMMLCG5gen.bin  using bits 15 to 24        141525 -1.325  .0925
    OPSO for PMMLCG5gen.bin  using bits 14 to 23        142181   .937  .8256
    OPSO for PMMLCG5gen.bin  using bits 13 to 22        142140   .795  .7868
    OPSO for PMMLCG5gen.bin  using bits 12 to 21        141724  -.639  .2614
    OPSO for PMMLCG5gen.bin  using bits 11 to 20        141997   .302  .6188
    OPSO for PMMLCG5gen.bin  using bits 10 to 19        141832  -.267  .3949
    OPSO for PMMLCG5gen.bin  using bits  9 to 18        141644  -.915  .1801
    OPSO for PMMLCG5gen.bin  using bits  8 to 17        141985   .261  .6029
    OPSO for PMMLCG5gen.bin  using bits  7 to 16        141954   .154  .5612
    OPSO for PMMLCG5gen.bin  using bits  6 to 15        142362  1.561  .9407
    OPSO for PMMLCG5gen.bin  using bits  5 to 14        141167 -2.560  .0052
    OPSO for PMMLCG5gen.bin  using bits  4 to 13        141750  -.549  .2914
    OPSO for PMMLCG5gen.bin  using bits  3 to 12        141807  -.353  .3621
    OPSO for PMMLCG5gen.bin  using bits  2 to 11        141634  -.949  .1712
    OPSO for PMMLCG5gen.bin  using bits  1 to 10        142449  1.861  .9686
 OQSO test for generator PMMLCG5gen.bin           
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for PMMLCG5gen.bin  using bits 28 to 32        983040******* 1.0000
    OQSO for PMMLCG5gen.bin  using bits 27 to 31        141676  -.791  .2145
    OQSO for PMMLCG5gen.bin  using bits 26 to 30        142170   .884  .8116
    OQSO for PMMLCG5gen.bin  using bits 25 to 29        141662  -.838  .2009
    OQSO for PMMLCG5gen.bin  using bits 24 to 28        141933   .080  .5320
    OQSO for PMMLCG5gen.bin  using bits 23 to 27        141581 -1.113  .1329
    OQSO for PMMLCG5gen.bin  using bits 22 to 26        141719  -.645  .2594
    OQSO for PMMLCG5gen.bin  using bits 21 to 25        141576 -1.130  .1293
    OQSO for PMMLCG5gen.bin  using bits 20 to 24        141683  -.767  .2215
    OQSO for PMMLCG5gen.bin  using bits 19 to 23        141632  -.940  .1736
    OQSO for PMMLCG5gen.bin  using bits 18 to 22        141293 -2.089  .0183
    OQSO for PMMLCG5gen.bin  using bits 17 to 21        141916   .023  .5090
    OQSO for PMMLCG5gen.bin  using bits 16 to 20        141664  -.832  .2028
    OQSO for PMMLCG5gen.bin  using bits 15 to 19        141707  -.686  .2464
    OQSO for PMMLCG5gen.bin  using bits 14 to 18        141958   .165  .5655
    OQSO for PMMLCG5gen.bin  using bits 13 to 17        141559 -1.188  .1175
    OQSO for PMMLCG5gen.bin  using bits 12 to 16        141323 -1.988  .0234
    OQSO for PMMLCG5gen.bin  using bits 11 to 15        142215  1.036  .8499
    OQSO for PMMLCG5gen.bin  using bits 10 to 14        141868  -.140  .4443
    OQSO for PMMLCG5gen.bin  using bits  9 to 13        141651  -.876  .1906
    OQSO for PMMLCG5gen.bin  using bits  8 to 12        141348 -1.903  .0285
    OQSO for PMMLCG5gen.bin  using bits  7 to 11        141586 -1.096  .1365
    OQSO for PMMLCG5gen.bin  using bits  6 to 10        141228 -2.310  .0105
    OQSO for PMMLCG5gen.bin  using bits  5 to  9        141904  -.018  .4928
    OQSO for PMMLCG5gen.bin  using bits  4 to  8        141467 -1.499  .0669
    OQSO for PMMLCG5gen.bin  using bits  3 to  7        142064   .524  .7000
    OQSO for PMMLCG5gen.bin  using bits  2 to  6        141955   .155  .5615
    OQSO for PMMLCG5gen.bin  using bits  1 to  5        142119   .711  .7614
  DNA test for generator PMMLCG5gen.bin           
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for PMMLCG5gen.bin  using bits 31 to 32       1047552******* 1.0000
     DNA for PMMLCG5gen.bin  using bits 30 to 31        141874  -.104  .4585
     DNA for PMMLCG5gen.bin  using bits 29 to 30        141799  -.325  .3724
     DNA for PMMLCG5gen.bin  using bits 28 to 29        141751  -.467  .3202
     DNA for PMMLCG5gen.bin  using bits 27 to 28        142268  1.058  .8550
     DNA for PMMLCG5gen.bin  using bits 26 to 27        141474 -1.284  .0995
     DNA for PMMLCG5gen.bin  using bits 25 to 26        141859  -.148  .4410
     DNA for PMMLCG5gen.bin  using bits 24 to 25        141419 -1.446  .0740
     DNA for PMMLCG5gen.bin  using bits 23 to 24        142116   .610  .7290
     DNA for PMMLCG5gen.bin  using bits 22 to 23        141646  -.777  .2186
     DNA for PMMLCG5gen.bin  using bits 21 to 22        141614  -.871  .1918
     DNA for PMMLCG5gen.bin  using bits 20 to 21        141751  -.467  .3202
     DNA for PMMLCG5gen.bin  using bits 19 to 20        141818  -.269  .3938
     DNA for PMMLCG5gen.bin  using bits 18 to 19        141922   .037  .5149
     DNA for PMMLCG5gen.bin  using bits 17 to 18        141871  -.113  .4550
     DNA for PMMLCG5gen.bin  using bits 16 to 17        141613  -.874  .1910
     DNA for PMMLCG5gen.bin  using bits 15 to 16        141282 -1.851  .0321
     DNA for PMMLCG5gen.bin  using bits 14 to 15        141962   .155  .5617
     DNA for PMMLCG5gen.bin  using bits 13 to 14        141584  -.960  .1686
     DNA for PMMLCG5gen.bin  using bits 12 to 13        141511 -1.175  .1200
     DNA for PMMLCG5gen.bin  using bits 11 to 12        141732  -.523  .3005
     DNA for PMMLCG5gen.bin  using bits 10 to 11        141809  -.296  .3836
     DNA for PMMLCG5gen.bin  using bits  9 to 10        141441 -1.381  .0836
     DNA for PMMLCG5gen.bin  using bits  8 to  9        142159   .736  .7693
     DNA for PMMLCG5gen.bin  using bits  7 to  8        142316  1.200  .8849
     DNA for PMMLCG5gen.bin  using bits  6 to  7        142596  2.026  .9786
     DNA for PMMLCG5gen.bin  using bits  5 to  6        141514 -1.166  .1218
     DNA for PMMLCG5gen.bin  using bits  4 to  5        141279 -1.859  .0315
     DNA for PMMLCG5gen.bin  using bits  3 to  4        141433 -1.405  .0800
     DNA for PMMLCG5gen.bin  using bits  2 to  3        141679  -.679  .2484
     DNA for PMMLCG5gen.bin  using bits  1 to  2        141321 -1.735  .0413

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::     
     :: Consider the file under test as a stream of bytes (four per   ::     
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::     
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::     
     :: the stream of bytes provide a string of overlapping  5-letter ::     
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::     
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::     
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::     
     :: we have a monkey at a typewriter hitting five keys with vari- ::     
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::     
     :: possible 5-letter words, and from a string of 256,000 (over-  ::     
     :: lapping) 5-letter words, counts are made on the frequencies   ::     
     :: for each word.   The quadratic form in the weak inverse of    ::     
     :: the covariance matrix of the cell counts provides a chisquare ::     
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::     
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
   Test results for PMMLCG5gen.bin 
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for PMMLCG5gen.bin  24942.33    317.382     1.000000
 byte stream for PMMLCG5gen.bin  23676.58    299.482     1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::     
     :: Consider the file under test as a stream of 32-bit integers.  ::     
     :: From each integer, a specific byte is chosen , say the left-  ::     
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::     
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::     
     :: the specified bytes from successive integers provide a string ::     
     :: of (overlapping) 5-letter words, each "letter" taking values  ::     
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::     
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::     
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::     
     :: hitting five keys with with various probabilities::  37,56,70,::     
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::     
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::     
     :: are made on the frequencies for each word. The quadratic form ::     
     :: in the weak inverse of the covariance matrix of the cell      ::     
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::     
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::     
     :: and 4-letter cell counts.                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2422.57     -1.095      .136747
           bits  2 to  9  2434.13      -.932      .175777
           bits  3 to 10  2516.09       .228      .590016
           bits  4 to 11  2491.82      -.116      .453933
           bits  5 to 12  2460.74      -.555      .289375
           bits  6 to 13  2545.71       .646      .741014
           bits  7 to 14  2581.17      1.148      .874506
           bits  8 to 15  2515.09       .213      .584475
           bits  9 to 16  2501.05       .015      .505950
           bits 10 to 17  2544.79       .633      .736752
           bits 11 to 18  2646.93      2.078      .981141
           bits 12 to 19  2501.39       .020      .507856
           bits 13 to 20  2403.57     -1.364      .086336
           bits 14 to 21  2618.01      1.669      .952433
           bits 15 to 22  2473.89      -.369      .355948
           bits 16 to 23  2410.17     -1.270      .101977
           bits 17 to 24  2482.10      -.253      .400056
           bits 18 to 25  2474.20      -.365      .357591
           bits 19 to 26  2466.34      -.476      .317049
           bits 20 to 27  2516.59       .235      .592756
           bits 21 to 28  2488.15      -.168      .433474
           bits 22 to 29  2552.81       .747      .772431
           bits 23 to 30  2512.13       .172      .568101
           bits 24 to 31  2627.74      1.807      .964582
           bits 25 to 32 51700.34    695.798     1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THIS IS A PARKING LOT TEST                      ::     
     :: In a square of side 100, randomly "park" a car---a circle of  ::     
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::     
     :: time parking "by ear".  That is, if an attempt to park a car  ::     
     :: causes a crash with one already parked, try again at a new    ::     
     :: random location. (To avoid path problems, consider parking    ::     
     :: helicopters rather than cars.)   Each attempt leads to either ::     
     :: a crash or a success, the latter followed by an increment to  ::     
     :: the list of cars already parked. If we plot n:  the number of ::     
     :: attempts, versus k::  the number successfully parked, we get a::     
     :: curve that should be similar to those provided by a perfect   ::     
     :: random number generator.  Theory for the behavior of such a   ::     
     :: random curve seems beyond reach, and as graphics displays are ::     
     :: not available for this battery of tests, a simple characteriz ::     
     :: ation of the random experiment is used: k, the number of cars ::     
     :: successfully parked after n=12,000 attempts. Simulation shows ::     
     :: that k should average 3523 with sigma 21.9 and is very close  ::     
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::     
     :: andard normal variable, which, converted to a uniform varia-  ::     
     :: ble, provides input to a KSTEST based on a sample of 10.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           CDPARK: result of ten tests on file PMMLCG5gen.bin 
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3585    z-score:  2.831 p-value: .997680
            Successes: 3527    z-score:   .183 p-value: .572463
            Successes: 3498    z-score: -1.142 p-value: .126820
            Successes: 3531    z-score:   .365 p-value: .642555
            Successes: 3500    z-score: -1.050 p-value: .146807
            Successes: 3542    z-score:   .868 p-value: .807188
            Successes: 3530    z-score:   .320 p-value: .625377
            Successes: 3530    z-score:   .320 p-value: .625377
            Successes: 3512    z-score:  -.502 p-value: .307734
            Successes: 3576    z-score:  2.420 p-value: .992242

           square size   avg. no.  parked   sample sigma
             100.            3533.100       27.256
            KSTEST for the above 10: p=  .789173

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THE MINIMUM DISTANCE TEST                       ::     
     :: It does this 100 times::   choose n=8000 random points in a   ::     
     :: square of side 10000.  Find d, the minimum distance between   ::     
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::     
     :: pendent uniform, then d^2, the square of the minimum distance ::     
     :: should be (very close to) exponentially distributed with mean ::     
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::     
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::     
     :: formity for random points in the square. Test numbers=0 mod 5 ::     
     :: are printed but the KSTEST is based on the full set of 100    ::     
     :: random choices of 8000 points in the 10000x10000 square.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               This is the MINIMUM DISTANCE test
              for random integers in the file PMMLCG5gen.bin 
     Sample no.    d^2     avg     equiv uni            
           5     .9803   1.3367     .626630
          10     .2824    .9662     .247097
          15     .0842    .7931     .081098
          20    2.8493    .9873     .942939
          25    1.0907    .9418     .665845
          30     .0093    .8976     .009325
          35     .1146    .8866     .108829
          40    1.3657    .8891     .746532
          45    2.5423    .9432     .922311
          50    3.0738    .9753     .954463
          55     .0210    .9902     .020919
          60     .6745    .9804     .492288
          65    2.2381   1.0002     .894537
          70     .0024    .9591     .002362
          75    3.2717    .9646     .962678
          80     .3360    .9373     .286583
          85     .9366    .9664     .609876
          90     .0374    .9703     .036856
          95     .1885    .9782     .172553
         100     .0210    .9875     .020922
     MINIMUM DISTANCE TEST for PMMLCG5gen.bin 
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .977991

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::              THE 3DSPHERES TEST                               ::     
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::     
     :: point, center a sphere large enough to reach the next closest ::     
     :: point. Then the volume of the smallest such sphere is (very   ::     
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::     
     :: the radius cubed is exponential with mean 30. (The mean is    ::     
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::     
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::     
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::     
     ::  KSTEST is done on the 20 p-values.                           ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               The 3DSPHERES test for file PMMLCG5gen.bin 
 sample no:  1     r^3=    .758     p-value= .02496
 sample no:  2     r^3=  14.893     p-value= .39130
 sample no:  3     r^3=  99.192     p-value= .96335
 sample no:  4     r^3=   4.519     p-value= .13985
 sample no:  5     r^3=  48.243     p-value= .79974
 sample no:  6     r^3= 104.123     p-value= .96891
 sample no:  7     r^3=  16.734     p-value= .42753
 sample no:  8     r^3=   8.212     p-value= .23945
 sample no:  9     r^3=  61.523     p-value= .87136
 sample no: 10     r^3=  36.974     p-value= .70843
 sample no: 11     r^3=  87.608     p-value= .94608
 sample no: 12     r^3=   4.626     p-value= .14290
 sample no: 13     r^3=  14.934     p-value= .39213
 sample no: 14     r^3=   2.855     p-value= .09077
 sample no: 15     r^3=  32.760     p-value= .66446
 sample no: 16     r^3=  10.314     p-value= .29092
 sample no: 17     r^3=   1.163     p-value= .03803
 sample no: 18     r^3=    .771     p-value= .02536
 sample no: 19     r^3=  11.598     p-value= .32063
 sample no: 20     r^3=  15.795     p-value= .40933
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file PMMLCG5gen.bin       p-value= .690422
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::      This is the SQEEZE test                                  ::     
     ::  Random integers are floated to get uniforms on [0,1). Start- ::     
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::     
     ::  iterations necessary to reduce k to 1, using the reduction   ::     
     ::  k=ceiling(k*U), with U provided by floating integers from    ::     
     ::  the file being tested.  Such j's are found 100,000 times,    ::     
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::     
     ::  are used to provide a chi-square test for cell frequencies.  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
            RESULTS OF SQUEEZE TEST FOR PMMLCG5gen.bin 
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
    -1.5     -.3      .3     -.4      .0     -.1
     -.6     -.3     1.5     -.7     2.2    -1.8
     1.1      .1    -1.3     -.1     -.9      .4
    -1.5     1.4    -1.3     2.3     -.4     -.4
      .8     -.6     -.1      .8     1.2     -.8
     -.1     -.1     -.2      .8      .8     -.7
      .7      .8      .1     -.1      .1     2.0
     -.1
           Chi-square with 42 degrees of freedom: 40.070
              z-score=  -.211  p-value= .443858
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The  OVERLAPPING SUMS test                        ::     
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::     
     :: form [0,1) variables.  Then overlapping sums,                 ::     
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::     
     :: The S's are virtually normal with a certain covariance mat-   ::     
     :: rix.  A linear transformation of the S's converts them to a   ::     
     :: sequence of independent standard normals, which are converted ::     
     :: to uniform variables for a KSTEST. The  p-values from ten     ::     
     :: KSTESTs are given still another KSTEST.                       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Test no.  1      p-value  .142813
                Test no.  2      p-value  .951714
                Test no.  3      p-value  .246758
                Test no.  4      p-value  .632429
                Test no.  5      p-value  .327204
                Test no.  6      p-value  .098969
                Test no.  7      p-value  .067237
                Test no.  8      p-value  .910918
                Test no.  9      p-value  .658502
                Test no. 10      p-value  .166402
   Results of the OSUM test for PMMLCG5gen.bin 
        KSTEST on the above 10 p-values:  .565236

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the RUNS test.  It counts runs up, and runs down, ::     
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::     
     :: ing the 32-bit integers in the specified file. This example   ::     
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::     
     :: contains an up-run of length 3, a down-run of length 2 and an ::     
     :: up-run of (at least) 2, depending on the next values.  The    ::     
     :: covariance matrices for the runs-up and runs-down are well    ::     
     :: known, leading to chisquare tests for quadratic forms in the  ::     
     :: weak inverses of the covariance matrices.  Runs are counted   ::     
     :: for sequences of length 10,000.  This is done ten times. Then ::     
     :: repeated.                                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           The RUNS test for file PMMLCG5gen.bin 
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for PMMLCG5gen.bin :
       runs up; ks test for 10 p's: .590179
     runs down; ks test for 10 p's: .307543
                 Run test for PMMLCG5gen.bin :
       runs up; ks test for 10 p's: .847651
     runs down; ks test for 10 p's: .653192

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::     
     :: the number of wins and the number of throws necessary to end  ::     
     :: each game.  The number of wins should be (very close to) a    ::     
     :: normal with mean 200000p and variance 200000p(1-p), with      ::     
     :: p=244/495.  Throws necessary to complete the game can vary    ::     
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::     
     :: A chi-square test is made on the no.-of-throws cell counts.   ::     
     :: Each 32-bit integer from the test file provides the value for ::     
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::     
     :: and taking 1 plus the integer part of the result.             ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Results of craps test for PMMLCG5gen.bin 
  No. of wins:  Observed Expected
                                98223    98585.86
                  98223= No. of wins, z-score=-1.623 pvalue= .05230
   Analysis of Throws-per-Game:
 Chisq=  16.14 for 20 degrees of freedom, p=  .29227
               Throws Observed Expected  Chisq     Sum
                  1    66537    66666.7    .252     .252
                  2    37505    37654.3    .592     .844
                  3    26893    26954.7    .141     .986
                  4    19434    19313.5    .752    1.738
                  5    13900    13851.4    .170    1.908
                  6    10044     9943.5   1.015    2.923
                  7     7238     7145.0   1.210    4.133
                  8     5169     5139.1    .174    4.308
                  9     3608     3699.9   2.281    6.588
                 10     2700     2666.3    .426    7.014
                 11     1929     1923.3    .017    7.031
                 12     1378     1388.7    .083    7.114
                 13      951     1003.7   2.769    9.883
                 14      749      726.1    .720   10.602
                 15      558      525.8   1.967   12.570
                 16      387      381.2    .090   12.660
                 17      276      276.5    .001   12.661
                 18      180      200.8   2.160   14.821
                 19      157      146.0    .831   15.652
                 20      111      106.2    .216   15.868
                 21      296      287.1    .275   16.143
            SUMMARY  FOR PMMLCG5gen.bin 
                p-value for no. of wins: .052303
                p-value for throws/game: .292274

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file PMMLCG5gen.all 
