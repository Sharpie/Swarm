       NOTE: Most of the tests in DIEHARD return a p-value, which            
       should be uniform on [0,1) if the input file contains truly           
       independent random bits.   Those p-values are obtained by             
       p=F(X), where F is the assumed distribution of the sample             
       random variable X---often normal. But that assumed F is just          
       an asymptotic approximation, for which the fit will be worst          
       in the tails. Thus you should not be surprised with                   
       occasional p-values near 0 or 1, such as .0012 or .9983.              
       When a bit stream really FAILS BIG, you will get p's of 0 or          
       1 to six or more places.  By all means, do not, as a                  
       Statistician might, think that a p < .025 or p> .975 means            
       that the RNG has "failed the test at the .05 level".  Such            
       p's happen among the hundreds that DIEHARD produces, even             
       with good RNG's.  So keep in mind that " p happens".                  
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            This is the BIRTHDAY SPACINGS TEST                 ::     
     :: Choose m birthdays in a year of n days.  List the spacings    ::     
     :: between the birthdays.  If j is the number of values that     ::     
     :: occur more than once in that list, then j is asymptotically   ::     
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::     
     :: must be quite large, say n>=2^18, for comparing the results   ::     
     :: to the Poisson distribution with that mean.  This test uses   ::     
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::     
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::     
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::     
     :: provides a p value.  The first test uses bits 1-24 (counting  ::     
     :: from the left) from integers in the specified file.           ::     
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::     
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::     
     :: Each set of bits provides a p-value, and the nine p-values    ::     
     :: provide a sample for a KSTEST.                                ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for PMMLCG7gen.bin 
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  1 to 24   1.926
  duplicate       number       number 
  spacings       observed     expected
        0          79.       67.668
        1         133.      135.335
        2         126.      135.335
        3          99.       90.224
        4          43.       45.112
        5          13.       18.045
  6 to INF          7.        8.282
 Chisquare with  6 d.o.f. =     5.14 p-value=  .474441
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  2 to 25   1.986
  duplicate       number       number 
  spacings       observed     expected
        0          69.       67.668
        1         142.      135.335
        2         131.      135.335
        3          77.       90.224
        4          59.       45.112
        5          14.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =     7.62 p-value=  .732979
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  3 to 26   1.972
  duplicate       number       number 
  spacings       observed     expected
        0          76.       67.668
        1         127.      135.335
        2         132.      135.335
        3          88.       90.224
        4          56.       45.112
        5          19.       18.045
  6 to INF          2.        8.282
 Chisquare with  6 d.o.f. =     9.12 p-value=  .833046
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  4 to 27   1.962
  duplicate       number       number 
  spacings       observed     expected
        0          69.       67.668
        1         139.      135.335
        2         132.      135.335
        3          94.       90.224
        4          42.       45.112
        5          16.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =      .82 p-value=  .008520
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  5 to 28   2.038
  duplicate       number       number 
  spacings       observed     expected
        0          73.       67.668
        1         123.      135.335
        2         125.      135.335
        3         106.       90.224
        4          45.       45.112
        5          21.       18.045
  6 to INF          7.        8.282
 Chisquare with  6 d.o.f. =     5.78 p-value=  .551156
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  6 to 29   1.940
  duplicate       number       number 
  spacings       observed     expected
        0          64.       67.668
        1         142.      135.335
        2         145.      135.335
        3          87.       90.224
        4          40.       45.112
        5          16.       18.045
  6 to INF          6.        8.282
 Chisquare with  6 d.o.f. =     2.77 p-value=  .163125
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  7 to 30   1.894
  duplicate       number       number 
  spacings       observed     expected
        0          66.       67.668
        1         162.      135.335
        2         123.      135.335
        3          91.       90.224
        4          35.       45.112
        5          13.       18.045
  6 to INF         10.        8.282
 Chisquare with  6 d.o.f. =    10.46 p-value=  .893398
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  8 to 31   2.100
  duplicate       number       number 
  spacings       observed     expected
        0          51.       67.668
        1         137.      135.335
        2         145.      135.335
        3          91.       90.224
        4          40.       45.112
        5          26.       18.045
  6 to INF         10.        8.282
 Chisquare with  6 d.o.f. =     9.27 p-value=  .840826
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          PMMLCG7gen.bin   using bits  9 to 32   4.114
  duplicate       number       number 
  spacings       observed     expected
        0           7.       67.668
        1          31.      135.335
        2          82.      135.335
        3          84.       90.224
        4         106.       45.112
        5          80.       18.045
  6 to INF        110.        8.282
 Chisquare with  6 d.o.f. =  1700.49 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
        .474441   .732979   .833046   .008520   .551156
        .163125   .893398   .840826  1.000000
  A KSTEST for the 9 p-values yields  .997867

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::     
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::     
     :: ion 32-bit random integers.  Each set of five consecutive     ::     
     :: integers can be in one of 120 states, for the 5! possible or- ::     
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::     
     :: each provide a state. As many thousands of state transitions  ::     
     :: are observed,  cumulative counts are made of the number of    ::     
     :: occurences of each state.  Then the quadratic form in the     ::     
     :: weak inverse of the 120x120 covariance matrix yields a test   ::     
     :: equivalent to the likelihood ratio test that the 120 cell     ::     
     :: counts came from the specified (asymptotically) normal dis-   ::     
     :: tribution with the specified 120x120 covariance matrix (with  ::     
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           OPERM5 test for file PMMLCG7gen.bin 
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 90.194; p-value= .274926
           OPERM5 test for file PMMLCG7gen.bin 
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 88.150; p-value= .225511
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::     
     :: 31 bits of 31 random integers from the test sequence are used ::     
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::     
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::     
     :: are rare, and their counts are pooled with those for rank 28. ::     
     :: Ranks are found for 40,000 such random matrices and a chisqua-::     
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for PMMLCG7gen.bin 
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       208     211.4   .055259     .055
        29      5080    5134.0   .568193     .623
        30     23138   23103.0   .052881     .676
        31     11574   11551.5   .043730     .720
  chisquare=  .720 for 3 d. of f.; p-value= .329587
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::     
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::     
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::     
     :: less than 29 are rare, and their counts are pooled with those ::     
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::     
     :: and a chisquare test is performed on counts for ranks  32,31, ::     
     :: 30 and <=29.                                                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for PMMLCG7gen.bin 
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29      1473     211.4********** 7528.163
        30     15280    5134.0**********27578.982
        31     23247   23103.0   .89696027579.879
        32         0   11551.5**********39131.402
  chisquare=****** for 3 d. of f.; p-value=1.000000
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::     
     :: six random 32-bit integers from the generator under test, a   ::     
     :: specified byte is chosen, and the resulting six bytes form a  ::     
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::     
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::     
     :: pooled with those for rank 4. Ranks are found for 100,000     ::     
     :: random matrices, and a chi-square test is performed on        ::     
     :: counts for ranks 6,5 and <=4.                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
         Binary Rank Test for PMMLCG7gen.bin 
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          903       944.3       1.806       1.806
          r =5        21805     21743.9        .172       1.978
          r =6        77292     77311.8        .005       1.983
                        p=1-exp(-SUM/2)= .62901
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          922       944.3        .527        .527
          r =5        21755     21743.9        .006        .532
          r =6        77323     77311.8        .002        .534
                        p=1-exp(-SUM/2)= .23432
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          964       944.3        .411        .411
          r =5        21819     21743.9        .259        .670
          r =6        77217     77311.8        .116        .787
                        p=1-exp(-SUM/2)= .32516
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          968       944.3        .595        .595
          r =5        21452     21743.9       3.919       4.513
          r =6        77580     77311.8        .930       5.444
                        p=1-exp(-SUM/2)= .93425
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          946       944.3        .003        .003
          r =5        21572     21743.9       1.359       1.362
          r =6        77482     77311.8        .375       1.737
                        p=1-exp(-SUM/2)= .58036
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          929       944.3        .248        .248
          r =5        21603     21743.9        .913       1.161
          r =6        77468     77311.8        .316       1.477
                        p=1-exp(-SUM/2)= .52206
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          970       944.3        .699        .699
          r =5        21590     21743.9       1.089       1.789
          r =6        77440     77311.8        .213       2.001
                        p=1-exp(-SUM/2)= .63235
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          936       944.3        .073        .073
          r =5        21702     21743.9        .081        .154
          r =6        77362     77311.8        .033        .186
                        p=1-exp(-SUM/2)= .08895
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          982       944.3       1.505       1.505
          r =5        21891     21743.9        .995       2.500
          r =6        77127     77311.8        .442       2.942
                        p=1-exp(-SUM/2)= .77030
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1015       944.3       5.293       5.293
          r =5        21893     21743.9       1.022       6.316
          r =6        77092     77311.8        .625       6.940
                        p=1-exp(-SUM/2)= .96889
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          965       944.3        .454        .454
          r =5        21767     21743.9        .025        .478
          r =6        77268     77311.8        .025        .503
                        p=1-exp(-SUM/2)= .22239
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          887       944.3       3.477       3.477
          r =5        21712     21743.9        .047       3.524
          r =6        77401     77311.8        .103       3.627
                        p=1-exp(-SUM/2)= .83690
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          915       944.3        .909        .909
          r =5        21914     21743.9       1.331       2.240
          r =6        77171     77311.8        .256       2.496
                        p=1-exp(-SUM/2)= .71297
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          903       944.3       1.806       1.806
          r =5        21786     21743.9        .082       1.888
          r =6        77311     77311.8        .000       1.888
                        p=1-exp(-SUM/2)= .61092
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          887       944.3       3.477       3.477
          r =5        21856     21743.9        .578       4.055
          r =6        77257     77311.8        .039       4.094
                        p=1-exp(-SUM/2)= .87087
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          913       944.3       1.038       1.038
          r =5        21912     21743.9       1.300       2.337
          r =6        77175     77311.8        .242       2.579
                        p=1-exp(-SUM/2)= .72462
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          893       944.3       2.787       2.787
          r =5        21756     21743.9        .007       2.794
          r =6        77351     77311.8        .020       2.814
                        p=1-exp(-SUM/2)= .75508
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          929       944.3        .248        .248
          r =5        21760     21743.9        .012        .260
          r =6        77311     77311.8        .000        .260
                        p=1-exp(-SUM/2)= .12185
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          957       944.3        .171        .171
          r =5        21769     21743.9        .029        .200
          r =6        77274     77311.8        .018        .218
                        p=1-exp(-SUM/2)= .10337
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          921       944.3        .575        .575
          r =5        21809     21743.9        .195        .770
          r =6        77270     77311.8        .023        .792
                        p=1-exp(-SUM/2)= .32716
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          919       944.3        .678        .678
          r =5        22050     21743.9       4.309       4.987
          r =6        77031     77311.8       1.020       6.007
                        p=1-exp(-SUM/2)= .95039
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          941       944.3        .012        .012
          r =5        21911     21743.9       1.284       1.296
          r =6        77148     77311.8        .347       1.643
                        p=1-exp(-SUM/2)= .56017
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          906       944.3       1.554       1.554
          r =5        21629     21743.9        .607       2.161
          r =6        77465     77311.8        .304       2.464
                        p=1-exp(-SUM/2)= .70833
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          871       944.3       5.690       5.690
          r =5        21678     21743.9        .200       5.890
          r =6        77451     77311.8        .251       6.140
                        p=1-exp(-SUM/2)= .95359
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG PMMLCG7gen.bin 
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         3515       944.3    6998.288    6998.288
          r =5        38190     21743.9   12439.083   19437.371
          r =6        58295     77311.8    4677.667   24115.039
                        p=1-exp(-SUM/2)=1.00000
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .629012     .234315     .325162     .934248     .580360
     .522060     .632347     .088946     .770295     .968890
     .222393     .836902     .712967     .610918     .870871
     .724619     .755082     .121846     .103372     .327156
     .950385     .560173     .708326     .953587    1.000000
   brank test summary for PMMLCG7gen.bin 
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .985047

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::                   THE BITSTREAM TEST                          ::     
     :: The file under test is viewed as a stream of bits. Call them  ::     
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::     
     :: and think of the stream of bits as a succession of 20-letter  ::     
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::     
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::     
     :: the number of missing 20-letter (20-bit) words in a string of ::     
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::     
     :: letter words.  For a truly random string of 2^21+19 bits, the ::     
     :: number of missing words j should be (very close to) normally  ::     
     :: distributed with mean 141,909 and sigma 428.  Thus            ::     
     ::  (j-141909)/428 should be a standard normal variate (z score) ::     
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::     
     :: twenty times.                                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
       THE OVERLAPPING 20-tuples BITSTREAM TEST,
            20 BITS PER WORD, 2^21 words.
    This test samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
-----------------------------------        ---------------
 tst no  1:  146753 missing words,   11.32 sigmas from mean, p-value=1.00000
 tst no  2:  147023 missing words,   11.95 sigmas from mean, p-value=1.00000
 tst no  3:  147362 missing words,   12.74 sigmas from mean, p-value=1.00000
 tst no  4:  147596 missing words,   13.29 sigmas from mean, p-value=1.00000
 tst no  5:  146315 missing words,   10.29 sigmas from mean, p-value=1.00000
 tst no  6:  148043 missing words,   14.33 sigmas from mean, p-value=1.00000
 tst no  7:  147766 missing words,   13.68 sigmas from mean, p-value=1.00000
 tst no  8:  147468 missing words,   12.99 sigmas from mean, p-value=1.00000
 tst no  9:  146892 missing words,   11.64 sigmas from mean, p-value=1.00000
 tst no 10:  148034 missing words,   14.31 sigmas from mean, p-value=1.00000
 tst no 11:  147664 missing words,   13.45 sigmas from mean, p-value=1.00000
 tst no 12:  147665 missing words,   13.45 sigmas from mean, p-value=1.00000
 tst no 13:  147506 missing words,   13.08 sigmas from mean, p-value=1.00000
 tst no 14:  146889 missing words,   11.63 sigmas from mean, p-value=1.00000
 tst no 15:  147260 missing words,   12.50 sigmas from mean, p-value=1.00000
 tst no 16:  147369 missing words,   12.76 sigmas from mean, p-value=1.00000
 tst no 17:  147626 missing words,   13.36 sigmas from mean, p-value=1.00000
 tst no 18:  147194 missing words,   12.35 sigmas from mean, p-value=1.00000
 tst no 19:  147681 missing words,   13.49 sigmas from mean, p-value=1.00000
 tst no 20:  147219 missing words,   12.41 sigmas from mean, p-value=1.00000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The tests OPSO, OQSO and DNA                      ::     
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::     
     :: The OPSO test considers 2-letter words from an alphabet of    ::     
     :: 1024 letters.  Each letter is determined by a specified ten   ::     
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::     
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::     
     :: "keystrokes")  and counts the number of missing words---that  ::     
     :: is 2-letter words which do not appear in the entire sequence. ::     
     :: That count should be very close to normally distributed with  ::     
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::     
     :: be a standard normal variable. The OPSO test takes 32 bits at ::     
     :: a time from the test file and uses a designated set of ten    ::     
     :: consecutive bits. It then restarts the file for the next de-  ::     
     :: signated 10 bits, and so on.                                  ::     
     ::                                                               ::     
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::     
     ::   The test OQSO is similar, except that it considers 4-letter ::     
     :: words from an alphabet of 32 letters, each letter determined  ::     
     :: by a designated string of 5 consecutive bits from the test    ::     
     :: file, elements of which are assumed 32-bit random integers.   ::     
     :: The mean number of missing words in a sequence of 2^21 four-  ::     
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::     
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::     
     :: extensive simulation.                                         ::     
     ::                                                               ::     
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::     
     :: determined by two designated bits in the sequence of random   ::     
     :: integers being tested.  It considers 10-letter words, so that ::     
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::     
     :: mean number of missing words from a string of 2^21  (over-    ::     
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::     
     :: The standard deviation sigma=339 was determined as for OQSO   ::     
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::     
     :: three places), not determined by simulation.                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 OPSO test for generator PMMLCG7gen.bin           
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for PMMLCG7gen.bin  using bits 23 to 32        786523******* 1.0000
    OPSO for PMMLCG7gen.bin  using bits 22 to 31        141943   .116  .5462
    OPSO for PMMLCG7gen.bin  using bits 21 to 30        141774  -.467  .3204
    OPSO for PMMLCG7gen.bin  using bits 20 to 29        141131 -2.684  .0036
    OPSO for PMMLCG7gen.bin  using bits 19 to 28        141352 -1.922  .0273
    OPSO for PMMLCG7gen.bin  using bits 18 to 27        141432 -1.646  .0499
    OPSO for PMMLCG7gen.bin  using bits 17 to 26        141655  -.877  .1902
    OPSO for PMMLCG7gen.bin  using bits 16 to 25        141478 -1.487  .0685
    OPSO for PMMLCG7gen.bin  using bits 15 to 24        141979   .240  .5949
    OPSO for PMMLCG7gen.bin  using bits 14 to 23        141304 -2.087  .0184
    OPSO for PMMLCG7gen.bin  using bits 13 to 22        141693  -.746  .2278
    OPSO for PMMLCG7gen.bin  using bits 12 to 21        141895  -.049  .4803
    OPSO for PMMLCG7gen.bin  using bits 11 to 20        141752  -.543  .2937
    OPSO for PMMLCG7gen.bin  using bits 10 to 19        141891  -.063  .4748
    OPSO for PMMLCG7gen.bin  using bits  9 to 18        141715  -.670  .2514
    OPSO for PMMLCG7gen.bin  using bits  8 to 17        141336 -1.977  .0240
    OPSO for PMMLCG7gen.bin  using bits  7 to 16        142179   .930  .8238
    OPSO for PMMLCG7gen.bin  using bits  6 to 15        141491 -1.443  .0746
    OPSO for PMMLCG7gen.bin  using bits  5 to 14        141868  -.143  .4433
    OPSO for PMMLCG7gen.bin  using bits  4 to 13        141091 -2.822  .0024
    OPSO for PMMLCG7gen.bin  using bits  3 to 12        141558 -1.211  .1129
    OPSO for PMMLCG7gen.bin  using bits  2 to 11        142249  1.171  .8793
    OPSO for PMMLCG7gen.bin  using bits  1 to 10        142279  1.275  .8988
 OQSO test for generator PMMLCG7gen.bin           
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for PMMLCG7gen.bin  using bits 28 to 32        983040******* 1.0000
    OQSO for PMMLCG7gen.bin  using bits 27 to 31        141986   .260  .6025
    OQSO for PMMLCG7gen.bin  using bits 26 to 30        142089   .609  .7288
    OQSO for PMMLCG7gen.bin  using bits 25 to 29        141414 -1.679  .0466
    OQSO for PMMLCG7gen.bin  using bits 24 to 28        141784  -.425  .3355
    OQSO for PMMLCG7gen.bin  using bits 23 to 27        142603  2.351  .9906
    OQSO for PMMLCG7gen.bin  using bits 22 to 26        141806  -.350  .3631
    OQSO for PMMLCG7gen.bin  using bits 21 to 25        141682  -.771  .2205
    OQSO for PMMLCG7gen.bin  using bits 20 to 24        141618  -.988  .1617
    OQSO for PMMLCG7gen.bin  using bits 19 to 23        141813  -.327  .3720
    OQSO for PMMLCG7gen.bin  using bits 18 to 22        141662  -.838  .2009
    OQSO for PMMLCG7gen.bin  using bits 17 to 21        141809  -.340  .3669
    OQSO for PMMLCG7gen.bin  using bits 16 to 20        142498  1.995  .9770
    OQSO for PMMLCG7gen.bin  using bits 15 to 19        142067   .534  .7035
    OQSO for PMMLCG7gen.bin  using bits 14 to 18        141921   .040  .5158
    OQSO for PMMLCG7gen.bin  using bits 13 to 17        142112   .687  .7540
    OQSO for PMMLCG7gen.bin  using bits 12 to 16        141984   .253  .5999
    OQSO for PMMLCG7gen.bin  using bits 11 to 15        141618  -.988  .1617
    OQSO for PMMLCG7gen.bin  using bits 10 to 14        141759  -.510  .3052
    OQSO for PMMLCG7gen.bin  using bits  9 to 13        141808  -.343  .3656
    OQSO for PMMLCG7gen.bin  using bits  8 to 12        141808  -.343  .3656
    OQSO for PMMLCG7gen.bin  using bits  7 to 11        141555 -1.201  .1149
    OQSO for PMMLCG7gen.bin  using bits  6 to 10        141356 -1.876  .0303
    OQSO for PMMLCG7gen.bin  using bits  5 to  9        141735  -.591  .2773
    OQSO for PMMLCG7gen.bin  using bits  4 to  8        141845  -.218  .4137
    OQSO for PMMLCG7gen.bin  using bits  3 to  7        141663  -.835  .2019
    OQSO for PMMLCG7gen.bin  using bits  2 to  6        142539  2.134  .9836
    OQSO for PMMLCG7gen.bin  using bits  1 to  5        141269 -2.171  .0150
  DNA test for generator PMMLCG7gen.bin           
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for PMMLCG7gen.bin  using bits 31 to 32       1047552******* 1.0000
     DNA for PMMLCG7gen.bin  using bits 30 to 31        141911   .005  .5020
     DNA for PMMLCG7gen.bin  using bits 29 to 30        141313 -1.759  .0393
     DNA for PMMLCG7gen.bin  using bits 28 to 29        141751  -.467  .3202
     DNA for PMMLCG7gen.bin  using bits 27 to 28        141878  -.092  .4632
     DNA for PMMLCG7gen.bin  using bits 26 to 27        141855  -.160  .4363
     DNA for PMMLCG7gen.bin  using bits 25 to 26        141731  -.526  .2994
     DNA for PMMLCG7gen.bin  using bits 24 to 25        142463  1.633  .9488
     DNA for PMMLCG7gen.bin  using bits 23 to 24        141998   .262  .6032
     DNA for PMMLCG7gen.bin  using bits 22 to 23        142450  1.595  .9446
     DNA for PMMLCG7gen.bin  using bits 21 to 22        142272  1.070  .8577
     DNA for PMMLCG7gen.bin  using bits 20 to 21        141694  -.635  .2627
     DNA for PMMLCG7gen.bin  using bits 19 to 20        141729  -.532  .2974
     DNA for PMMLCG7gen.bin  using bits 18 to 19        141860  -.146  .4422
     DNA for PMMLCG7gen.bin  using bits 17 to 18        142297  1.144  .8736
     DNA for PMMLCG7gen.bin  using bits 16 to 17        141979   .206  .5814
     DNA for PMMLCG7gen.bin  using bits 15 to 16        142292  1.129  .8705
     DNA for PMMLCG7gen.bin  using bits 14 to 15        142407  1.468  .9290
     DNA for PMMLCG7gen.bin  using bits 13 to 14        141783  -.373  .3547
     DNA for PMMLCG7gen.bin  using bits 12 to 13        142001   .270  .6066
     DNA for PMMLCG7gen.bin  using bits 11 to 12        142206   .875  .8093
     DNA for PMMLCG7gen.bin  using bits 10 to 11        141597  -.921  .1784
     DNA for PMMLCG7gen.bin  using bits  9 to 10        142315  1.197  .8843
     DNA for PMMLCG7gen.bin  using bits  8 to  9        142193   .837  .7986
     DNA for PMMLCG7gen.bin  using bits  7 to  8        142180   .798  .7877
     DNA for PMMLCG7gen.bin  using bits  6 to  7        141574  -.989  .1613
     DNA for PMMLCG7gen.bin  using bits  5 to  6        141889  -.060  .4761
     DNA for PMMLCG7gen.bin  using bits  4 to  5        141498 -1.213  .1125
     DNA for PMMLCG7gen.bin  using bits  3 to  4        142324  1.223  .8894
     DNA for PMMLCG7gen.bin  using bits  2 to  3        141617  -.862  .1943
     DNA for PMMLCG7gen.bin  using bits  1 to  2        141709  -.591  .2773

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::     
     :: Consider the file under test as a stream of bytes (four per   ::     
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::     
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::     
     :: the stream of bytes provide a string of overlapping  5-letter ::     
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::     
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::     
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::     
     :: we have a monkey at a typewriter hitting five keys with vari- ::     
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::     
     :: possible 5-letter words, and from a string of 256,000 (over-  ::     
     :: lapping) 5-letter words, counts are made on the frequencies   ::     
     :: for each word.   The quadratic form in the weak inverse of    ::     
     :: the covariance matrix of the cell counts provides a chisquare ::     
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::     
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
   Test results for PMMLCG7gen.bin 
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for PMMLCG7gen.bin  23676.91    299.487     1.000000
 byte stream for PMMLCG7gen.bin  24520.39    311.415     1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::     
     :: Consider the file under test as a stream of 32-bit integers.  ::     
     :: From each integer, a specific byte is chosen , say the left-  ::     
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::     
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::     
     :: the specified bytes from successive integers provide a string ::     
     :: of (overlapping) 5-letter words, each "letter" taking values  ::     
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::     
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::     
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::     
     :: hitting five keys with with various probabilities::  37,56,70,::     
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::     
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::     
     :: are made on the frequencies for each word. The quadratic form ::     
     :: in the weak inverse of the covariance matrix of the cell      ::     
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::     
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::     
     :: and 4-letter cell counts.                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2532.35       .458      .676349
           bits  2 to  9  2656.09      2.207      .986358
           bits  3 to 10  2608.73      1.538      .937933
           bits  4 to 11  2563.99       .905      .817243
           bits  5 to 12  2519.31       .273      .607589
           bits  6 to 13  2438.23      -.874      .191181
           bits  7 to 14  2432.17      -.959      .168717
           bits  8 to 15  2472.93      -.383      .350935
           bits  9 to 16  2501.73       .024      .509761
           bits 10 to 17  2451.36      -.688      .245786
           bits 11 to 18  2486.50      -.191      .424297
           bits 12 to 19  2582.86      1.172      .879360
           bits 13 to 20  2531.82       .450      .673640
           bits 14 to 21  2432.23      -.958      .168910
           bits 15 to 22  2343.34     -2.216      .013361
           bits 16 to 23  2427.31     -1.028      .151966
           bits 17 to 24  2375.40     -1.762      .039030
           bits 18 to 25  2583.68      1.183      .881688
           bits 19 to 26  2576.00      1.075      .858756
           bits 20 to 27  2521.67       .306      .620357
           bits 21 to 28  2509.52       .135      .553555
           bits 22 to 29  2548.16       .681      .752088
           bits 23 to 30  2730.21      3.256      .999434
           bits 24 to 31  2528.95       .409      .658886
           bits 25 to 32 51694.73    695.719     1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THIS IS A PARKING LOT TEST                      ::     
     :: In a square of side 100, randomly "park" a car---a circle of  ::     
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::     
     :: time parking "by ear".  That is, if an attempt to park a car  ::     
     :: causes a crash with one already parked, try again at a new    ::     
     :: random location. (To avoid path problems, consider parking    ::     
     :: helicopters rather than cars.)   Each attempt leads to either ::     
     :: a crash or a success, the latter followed by an increment to  ::     
     :: the list of cars already parked. If we plot n:  the number of ::     
     :: attempts, versus k::  the number successfully parked, we get a::     
     :: curve that should be similar to those provided by a perfect   ::     
     :: random number generator.  Theory for the behavior of such a   ::     
     :: random curve seems beyond reach, and as graphics displays are ::     
     :: not available for this battery of tests, a simple characteriz ::     
     :: ation of the random experiment is used: k, the number of cars ::     
     :: successfully parked after n=12,000 attempts. Simulation shows ::     
     :: that k should average 3523 with sigma 21.9 and is very close  ::     
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::     
     :: andard normal variable, which, converted to a uniform varia-  ::     
     :: ble, provides input to a KSTEST based on a sample of 10.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           CDPARK: result of ten tests on file PMMLCG7gen.bin 
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3511    z-score:  -.548 p-value: .291865
            Successes: 3524    z-score:   .046 p-value: .518210
            Successes: 3526    z-score:   .137 p-value: .554479
            Successes: 3507    z-score:  -.731 p-value: .232514
            Successes: 3518    z-score:  -.228 p-value: .409702
            Successes: 3532    z-score:   .411 p-value: .659449
            Successes: 3548    z-score:  1.142 p-value: .873180
            Successes: 3533    z-score:   .457 p-value: .676028
            Successes: 3581    z-score:  2.648 p-value: .995956
            Successes: 3552    z-score:  1.324 p-value: .907282

           square size   avg. no.  parked   sample sigma
             100.            3533.200       20.988
            KSTEST for the above 10: p=  .677661

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THE MINIMUM DISTANCE TEST                       ::     
     :: It does this 100 times::   choose n=8000 random points in a   ::     
     :: square of side 10000.  Find d, the minimum distance between   ::     
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::     
     :: pendent uniform, then d^2, the square of the minimum distance ::     
     :: should be (very close to) exponentially distributed with mean ::     
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::     
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::     
     :: formity for random points in the square. Test numbers=0 mod 5 ::     
     :: are printed but the KSTEST is based on the full set of 100    ::     
     :: random choices of 8000 points in the 10000x10000 square.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               This is the MINIMUM DISTANCE test
              for random integers in the file PMMLCG7gen.bin 
     Sample no.    d^2     avg     equiv uni            
           5    1.3392   1.0265     .739695
          10    2.0892   1.2294     .877508
          15     .0532   1.0052     .052056
          20     .3699   1.0143     .310456
          25    2.6805    .9725     .932388
          30    2.6335   1.0155     .929115
          35     .7106    .9751     .510420
          40     .1587    .9474     .147393
          45     .6876    .9732     .498932
          50    2.5384    .9654     .922011
          55    1.5287    .9613     .784832
          60    2.6600   1.0056     .930977
          65    2.0038   1.0758     .866526
          70    1.5030   1.0434     .779215
          75    2.0708   1.0608     .875217
          80     .3821   1.0325     .318858
          85     .6342   1.0322     .471329
          90    2.6588   1.0312     .930895
          95     .6344   1.0410     .471433
         100     .6959   1.0209     .503138
     MINIMUM DISTANCE TEST for PMMLCG7gen.bin 
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .762516

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::              THE 3DSPHERES TEST                               ::     
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::     
     :: point, center a sphere large enough to reach the next closest ::     
     :: point. Then the volume of the smallest such sphere is (very   ::     
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::     
     :: the radius cubed is exponential with mean 30. (The mean is    ::     
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::     
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::     
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::     
     ::  KSTEST is done on the 20 p-values.                           ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               The 3DSPHERES test for file PMMLCG7gen.bin 
 sample no:  1     r^3=  12.264     p-value= .33556
 sample no:  2     r^3=  51.573     p-value= .82077
 sample no:  3     r^3=  14.409     p-value= .38140
 sample no:  4     r^3=  80.157     p-value= .93088
 sample no:  5     r^3=  65.508     p-value= .88736
 sample no:  6     r^3=  28.680     p-value= .61558
 sample no:  7     r^3=  20.976     p-value= .50301
 sample no:  8     r^3= 125.768     p-value= .98489
 sample no:  9     r^3=  38.629     p-value= .72408
 sample no: 10     r^3=  48.077     p-value= .79862
 sample no: 11     r^3=   8.712     p-value= .25203
 sample no: 12     r^3=  28.592     p-value= .61444
 sample no: 13     r^3=  37.629     p-value= .71472
 sample no: 14     r^3=  47.787     p-value= .79667
 sample no: 15     r^3=  69.022     p-value= .89981
 sample no: 16     r^3=  32.420     p-value= .66063
 sample no: 17     r^3=  31.228     p-value= .64688
 sample no: 18     r^3=   3.907     p-value= .12211
 sample no: 19     r^3= 191.870     p-value= .99833
 sample no: 20     r^3=  11.220     p-value= .31202
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file PMMLCG7gen.bin       p-value= .969950
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::      This is the SQEEZE test                                  ::     
     ::  Random integers are floated to get uniforms on [0,1). Start- ::     
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::     
     ::  iterations necessary to reduce k to 1, using the reduction   ::     
     ::  k=ceiling(k*U), with U provided by floating integers from    ::     
     ::  the file being tested.  Such j's are found 100,000 times,    ::     
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::     
     ::  are used to provide a chi-square test for cell frequencies.  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
            RESULTS OF SQUEEZE TEST FOR PMMLCG7gen.bin 
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
     -.8     3.0     -.4     1.6     1.8    -2.0
     -.9    -1.4      .7      .7     -.6      .6
     1.9    -1.0      .5      .9     -.7    -2.0
    -1.7      .1      .4      .9      .3     1.2
      .7    -1.8      .2     -.1      .7      .0
     1.2      .1    -1.1     -.4      .2     2.2
     -.7      .2     1.7    -1.3    -1.3    -1.0
     1.8
           Chi-square with 42 degrees of freedom: 62.527
              z-score=  2.240  p-value= .978450
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The  OVERLAPPING SUMS test                        ::     
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::     
     :: form [0,1) variables.  Then overlapping sums,                 ::     
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::     
     :: The S's are virtually normal with a certain covariance mat-   ::     
     :: rix.  A linear transformation of the S's converts them to a   ::     
     :: sequence of independent standard normals, which are converted ::     
     :: to uniform variables for a KSTEST. The  p-values from ten     ::     
     :: KSTESTs are given still another KSTEST.                       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Test no.  1      p-value  .563471
                Test no.  2      p-value  .439901
                Test no.  3      p-value  .167710
                Test no.  4      p-value  .026445
                Test no.  5      p-value  .996095
                Test no.  6      p-value  .932445
                Test no.  7      p-value  .809603
                Test no.  8      p-value  .081718
                Test no.  9      p-value  .842170
                Test no. 10      p-value  .808119
   Results of the OSUM test for PMMLCG7gen.bin 
        KSTEST on the above 10 p-values:  .673259

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the RUNS test.  It counts runs up, and runs down, ::     
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::     
     :: ing the 32-bit integers in the specified file. This example   ::     
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::     
     :: contains an up-run of length 3, a down-run of length 2 and an ::     
     :: up-run of (at least) 2, depending on the next values.  The    ::     
     :: covariance matrices for the runs-up and runs-down are well    ::     
     :: known, leading to chisquare tests for quadratic forms in the  ::     
     :: weak inverses of the covariance matrices.  Runs are counted   ::     
     :: for sequences of length 10,000.  This is done ten times. Then ::     
     :: repeated.                                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           The RUNS test for file PMMLCG7gen.bin 
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for PMMLCG7gen.bin :
       runs up; ks test for 10 p's: .822322
     runs down; ks test for 10 p's: .197760
                 Run test for PMMLCG7gen.bin :
       runs up; ks test for 10 p's: .149158
     runs down; ks test for 10 p's: .531436

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::     
     :: the number of wins and the number of throws necessary to end  ::     
     :: each game.  The number of wins should be (very close to) a    ::     
     :: normal with mean 200000p and variance 200000p(1-p), with      ::     
     :: p=244/495.  Throws necessary to complete the game can vary    ::     
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::     
     :: A chi-square test is made on the no.-of-throws cell counts.   ::     
     :: Each 32-bit integer from the test file provides the value for ::     
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::     
     :: and taking 1 plus the integer part of the result.             ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Results of craps test for PMMLCG7gen.bin 
  No. of wins:  Observed Expected
                                98761    98585.86
                  98761= No. of wins, z-score=  .783 pvalue= .78328
   Analysis of Throws-per-Game:
 Chisq=  16.46 for 20 degrees of freedom, p=  .31239
               Throws Observed Expected  Chisq     Sum
                  1    66806    66666.7    .291     .291
                  2    37702    37654.3    .060     .352
                  3    26922    26954.7    .040     .391
                  4    19444    19313.5    .882    1.274
                  5    13752    13851.4    .714    1.987
                  6     9895     9943.5    .237    2.224
                  7     7179     7145.0    .162    2.386
                  8     5073     5139.1    .849    3.235
                  9     3727     3699.9    .199    3.434
                 10     2674     2666.3    .022    3.456
                 11     1914     1923.3    .045    3.502
                 12     1334     1388.7   2.158    5.659
                 13      996     1003.7    .059    5.719
                 14      685      726.1   2.331    8.050
                 15      506      525.8    .748    8.798
                 16      353      381.2   2.079   10.877
                 17      262      276.5    .764   11.641
                 18      223      200.8   2.447   14.089
                 19      144      146.0    .027   14.116
                 20      122      106.2   2.346   16.462
                 21      287      287.1    .000   16.462
            SUMMARY  FOR PMMLCG7gen.bin 
                p-value for no. of wins: .783284
                p-value for throws/game: .312393

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file PMMLCG7gen.all 
