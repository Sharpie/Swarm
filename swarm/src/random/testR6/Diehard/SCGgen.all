       NOTE: Most of the tests in DIEHARD return a p-value, which            
       should be uniform on [0,1) if the input file contains truly           
       independent random bits.   Those p-values are obtained by             
       p=F(X), where F is the assumed distribution of the sample             
       random variable X---often normal. But that assumed F is just          
       an asymptotic approximation, for which the fit will be worst          
       in the tails. Thus you should not be surprised with                   
       occasional p-values near 0 or 1, such as .0012 or .9983.              
       When a bit stream really FAILS BIG, you will get p's of 0 or          
       1 to six or more places.  By all means, do not, as a                  
       Statistician might, think that a p < .025 or p> .975 means            
       that the RNG has "failed the test at the .05 level".  Such            
       p's happen among the hundreds that DIEHARD produces, even             
       with good RNG's.  So keep in mind that " p happens".                  
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            This is the BIRTHDAY SPACINGS TEST                 ::     
     :: Choose m birthdays in a year of n days.  List the spacings    ::     
     :: between the birthdays.  If j is the number of values that     ::     
     :: occur more than once in that list, then j is asymptotically   ::     
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::     
     :: must be quite large, say n>=2^18, for comparing the results   ::     
     :: to the Poisson distribution with that mean.  This test uses   ::     
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::     
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::     
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::     
     :: provides a p value.  The first test uses bits 1-24 (counting  ::     
     :: from the left) from integers in the specified file.           ::     
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::     
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::     
     :: Each set of bits provides a p-value, and the nine p-values    ::     
     :: provide a sample for a KSTEST.                                ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for SCGgen.bin     
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  1 to 24   3.570
  duplicate       number       number 
  spacings       observed     expected
        0          15.       67.668
        1          51.      135.335
        2          85.      135.335
        3         114.       90.224
        4          92.       45.112
        5          60.       18.045
  6 to INF         83.        8.282
 Chisquare with  6 d.o.f. =   938.92 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  2 to 25   3.170
  duplicate       number       number 
  spacings       observed     expected
        0          21.       67.668
        1          59.      135.335
        2         105.      135.335
        3         121.       90.224
        4          87.       45.112
        5          62.       18.045
  6 to INF         45.        8.282
 Chisquare with  6 d.o.f. =   401.30 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  3 to 26   2.946
  duplicate       number       number 
  spacings       observed     expected
        0          32.       67.668
        1          71.      135.335
        2         107.      135.335
        3         113.       90.224
        4          93.       45.112
        5          50.       18.045
  6 to INF         34.        8.282
 Chisquare with  6 d.o.f. =   248.36 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  4 to 27   2.890
  duplicate       number       number 
  spacings       observed     expected
        0          27.       67.668
        1          77.      135.335
        2         119.      135.335
        3         120.       90.224
        4          76.       45.112
        5          47.       18.045
  6 to INF         34.        8.282
 Chisquare with  6 d.o.f. =   208.86 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  5 to 28   3.042
  duplicate       number       number 
  spacings       observed     expected
        0          20.       67.668
        1          75.      135.335
        2         114.      135.335
        3         117.       90.224
        4          74.       45.112
        5          52.       18.045
  6 to INF         48.        8.282
 Chisquare with  6 d.o.f. =   344.66 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  6 to 29   3.144
  duplicate       number       number 
  spacings       observed     expected
        0          22.       67.668
        1          71.      135.335
        2         104.      135.335
        3         121.       90.224
        4          75.       45.112
        5          54.       18.045
  6 to INF         53.        8.282
 Chisquare with  6 d.o.f. =   412.06 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  7 to 30   3.372
  duplicate       number       number 
  spacings       observed     expected
        0          13.       67.668
        1          62.      135.335
        2         101.      135.335
        3         101.       90.224
        4         102.       45.112
        5          59.       18.045
  6 to INF         62.        8.282
 Chisquare with  6 d.o.f. =   607.03 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  8 to 31   5.208
  duplicate       number       number 
  spacings       observed     expected
        0           2.       67.668
        1          12.      135.335
        2          29.      135.335
        3          55.       90.224
        4          94.       45.112
        5         106.       18.045
  6 to INF        202.        8.282
 Chisquare with  6 d.o.f. =  5286.35 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
          SCGgen.bin       using bits  9 to 32   9.264
  duplicate       number       number 
  spacings       observed     expected
        0           1.       67.668
        1           0.      135.335
        2           2.      135.335
        3           6.       90.224
        4           7.       45.112
        5          19.       18.045
  6 to INF        465.        8.282
 Chisquare with  6 d.o.f. = 25629.96 p-value= 1.000000
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
       1.000000  1.000000  1.000000  1.000000  1.000000
       1.000000  1.000000  1.000000  1.000000
  A KSTEST for the 9 p-values yields 1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::     
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::     
     :: ion 32-bit random integers.  Each set of five consecutive     ::     
     :: integers can be in one of 120 states, for the 5! possible or- ::     
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::     
     :: each provide a state. As many thousands of state transitions  ::     
     :: are observed,  cumulative counts are made of the number of    ::     
     :: occurences of each state.  Then the quadratic form in the     ::     
     :: weak inverse of the 120x120 covariance matrix yields a test   ::     
     :: equivalent to the likelihood ratio test that the 120 cell     ::     
     :: counts came from the specified (asymptotically) normal dis-   ::     
     :: tribution with the specified 120x120 covariance matrix (with  ::     
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           OPERM5 test for file SCGgen.bin     
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 99.712; p-value= .538983
           OPERM5 test for file SCGgen.bin     
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 97.117; p-value= .465217
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::     
     :: 31 bits of 31 random integers from the test sequence are used ::     
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::     
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::     
     :: are rare, and their counts are pooled with those for rank 28. ::     
     :: Ranks are found for 40,000 such random matrices and a chisqua-::     
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for SCGgen.bin     
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28      1521     211.4********** 8111.916
        29     15351    5134.0**********28444.344
        30     23128   23103.0   .02695128444.371
        31         0   11551.5**********39995.895
  chisquare=****** for 3 d. of f.; p-value=1.000000
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::     
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::     
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::     
     :: less than 29 are rare, and their counts are pooled with those ::     
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::     
     :: and a chisquare test is performed on counts for ranks  32,31, ::     
     :: 30 and <=29.                                                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
    Binary rank test for SCGgen.bin     
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29      9251     211.4*******************
        30     30749    5134.0*******************
        31         0   23103.0*******************
        32         0   11551.5*******************
  chisquare=****** for 3 d. of f.; p-value=1.000000
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::     
     :: six random 32-bit integers from the generator under test, a   ::     
     :: specified byte is chosen, and the resulting six bytes form a  ::     
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::     
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::     
     :: pooled with those for rank 4. Ranks are found for 100,000     ::     
     :: random matrices, and a chi-square test is performed on        ::     
     :: counts for ranks 6,5 and <=4.                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
         Binary Rank Test for SCGgen.bin     
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          978       944.3       1.203       1.203
          r =5        22011     21743.9       3.281       4.484
          r =6        77011     77311.8       1.170       5.654
                        p=1-exp(-SUM/2)= .94081
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          977       944.3       1.132       1.132
          r =5        21935     21743.9       1.680       2.812
          r =6        77088     77311.8        .648       3.460
                        p=1-exp(-SUM/2)= .82269
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          980       944.3       1.350       1.350
          r =5        22030     21743.9       3.764       5.114
          r =6        76990     77311.8       1.339       6.453
                        p=1-exp(-SUM/2)= .96031
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          933       944.3        .135        .135
          r =5        21954     21743.9       2.030       2.165
          r =6        77113     77311.8        .511       2.677
                        p=1-exp(-SUM/2)= .73770
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          979       944.3       1.275       1.275
          r =5        21980     21743.9       2.564       3.839
          r =6        77041     77311.8        .949       4.787
                        p=1-exp(-SUM/2)= .90870
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          967       944.3        .546        .546
          r =5        21717     21743.9        .033        .579
          r =6        77316     77311.8        .000        .579
                        p=1-exp(-SUM/2)= .25141
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          950       944.3        .034        .034
          r =5        21717     21743.9        .033        .068
          r =6        77333     77311.8        .006        .073
                        p=1-exp(-SUM/2)= .03607
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          897       944.3       2.369       2.369
          r =5        21776     21743.9        .047       2.417
          r =6        77327     77311.8        .003       2.420
                        p=1-exp(-SUM/2)= .70177
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          967       944.3        .546        .546
          r =5        21844     21743.9        .461       1.006
          r =6        77189     77311.8        .195       1.202
                        p=1-exp(-SUM/2)= .45160
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          937       944.3        .056        .056
          r =5        21921     21743.9       1.442       1.499
          r =6        77142     77311.8        .373       1.872
                        p=1-exp(-SUM/2)= .60778
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          917       944.3        .789        .789
          r =5        21863     21743.9        .652       1.442
          r =6        77220     77311.8        .109       1.551
                        p=1-exp(-SUM/2)= .53946
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          911       944.3       1.174       1.174
          r =5        21751     21743.9        .002       1.177
          r =6        77338     77311.8        .009       1.186
                        p=1-exp(-SUM/2)= .44722
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          969       944.3        .646        .646
          r =5        21709     21743.9        .056        .702
          r =6        77322     77311.8        .001        .703
                        p=1-exp(-SUM/2)= .29650
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          921       944.3        .575        .575
          r =5        21744     21743.9        .000        .575
          r =6        77335     77311.8        .007        .582
                        p=1-exp(-SUM/2)= .25246
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1009       944.3       4.433       4.433
          r =5        21618     21743.9        .729       5.162
          r =6        77373     77311.8        .048       5.210
                        p=1-exp(-SUM/2)= .92611
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          991       944.3       2.309       2.309
          r =5        21608     21743.9        .849       3.159
          r =6        77401     77311.8        .103       3.262
                        p=1-exp(-SUM/2)= .80424
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          934       944.3        .112        .112
          r =5        21843     21743.9        .452        .564
          r =6        77223     77311.8        .102        .666
                        p=1-exp(-SUM/2)= .28324
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          940       944.3        .020        .020
          r =5        21759     21743.9        .010        .030
          r =6        77301     77311.8        .002        .032
                        p=1-exp(-SUM/2)= .01567
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          948       944.3        .014        .014
          r =5        21873     21743.9        .767        .781
          r =6        77179     77311.8        .228       1.009
                        p=1-exp(-SUM/2)= .39623
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          924       944.3        .436        .436
          r =5        21782     21743.9        .067        .503
          r =6        77294     77311.8        .004        .507
                        p=1-exp(-SUM/2)= .22404
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          901       944.3       1.986       1.986
          r =5        22004     21743.9       3.111       5.097
          r =6        77095     77311.8        .608       5.705
                        p=1-exp(-SUM/2)= .94230
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          970       944.3        .699        .699
          r =5        21881     21743.9        .864       1.564
          r =6        77149     77311.8        .343       1.907
                        p=1-exp(-SUM/2)= .61454
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          899       944.3       2.173       2.173
          r =5        21958     21743.9       2.108       4.281
          r =6        77143     77311.8        .369       4.650
                        p=1-exp(-SUM/2)= .90221
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         3712       944.3    8111.983    8111.983
          r =5        38345     21743.9   12674.658   20786.641
          r =6        57943     77311.8    4852.436   25639.076
                        p=1-exp(-SUM/2)=1.00000
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG SCGgen.bin     
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4        12823       944.3  149426.359  149426.359
          r =5        58096     21743.9   60774.527  210200.891
          r =6        29081     77311.8   30088.686  240289.578
                        p=1-exp(-SUM/2)=1.00000
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .940809     .822685     .960313     .737702     .908700
     .251411     .036074     .701766     .451601     .607776
     .539456     .447217     .296499     .252460     .926106
     .804236     .283243     .015670     .396228     .224040
     .942297     .614544     .902214    1.000000    1.000000
   brank test summary for SCGgen.bin     
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .999927

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::                   THE BITSTREAM TEST                          ::     
     :: The file under test is viewed as a stream of bits. Call them  ::     
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::     
     :: and think of the stream of bits as a succession of 20-letter  ::     
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::     
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::     
     :: the number of missing 20-letter (20-bit) words in a string of ::     
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::     
     :: letter words.  For a truly random string of 2^21+19 bits, the ::     
     :: number of missing words j should be (very close to) normally  ::     
     :: distributed with mean 141,909 and sigma 428.  Thus            ::     
     ::  (j-141909)/428 should be a standard normal variate (z score) ::     
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::     
     :: twenty times.                                                 ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
       THE OVERLAPPING 20-tuples BITSTREAM TEST,
            20 BITS PER WORD, 2^21 words.
    This test samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
-----------------------------------        ---------------
 tst no  1:  176830 missing words,   81.59 sigmas from mean, p-value=1.00000
 tst no  2:  175906 missing words,   79.43 sigmas from mean, p-value=1.00000
 tst no  3:  176073 missing words,   79.82 sigmas from mean, p-value=1.00000
 tst no  4:  175005 missing words,   77.33 sigmas from mean, p-value=1.00000
 tst no  5:  176573 missing words,   80.99 sigmas from mean, p-value=1.00000
 tst no  6:  176608 missing words,   81.07 sigmas from mean, p-value=1.00000
 tst no  7:  175738 missing words,   79.04 sigmas from mean, p-value=1.00000
 tst no  8:  176615 missing words,   81.09 sigmas from mean, p-value=1.00000
 tst no  9:  175178 missing words,   77.73 sigmas from mean, p-value=1.00000
 tst no 10:  175235 missing words,   77.86 sigmas from mean, p-value=1.00000
 tst no 11:  175719 missing words,   78.99 sigmas from mean, p-value=1.00000
 tst no 12:  175253 missing words,   77.91 sigmas from mean, p-value=1.00000
 tst no 13:  175065 missing words,   77.47 sigmas from mean, p-value=1.00000
 tst no 14:  177135 missing words,   82.30 sigmas from mean, p-value=1.00000
 tst no 15:  175793 missing words,   79.17 sigmas from mean, p-value=1.00000
 tst no 16:  175913 missing words,   79.45 sigmas from mean, p-value=1.00000
 tst no 17:  175822 missing words,   79.24 sigmas from mean, p-value=1.00000
 tst no 18:  176061 missing words,   79.79 sigmas from mean, p-value=1.00000
 tst no 19:  175751 missing words,   79.07 sigmas from mean, p-value=1.00000
 tst no 20:  176904 missing words,   81.76 sigmas from mean, p-value=1.00000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The tests OPSO, OQSO and DNA                      ::     
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::     
     :: The OPSO test considers 2-letter words from an alphabet of    ::     
     :: 1024 letters.  Each letter is determined by a specified ten   ::     
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::     
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::     
     :: "keystrokes")  and counts the number of missing words---that  ::     
     :: is 2-letter words which do not appear in the entire sequence. ::     
     :: That count should be very close to normally distributed with  ::     
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::     
     :: be a standard normal variable. The OPSO test takes 32 bits at ::     
     :: a time from the test file and uses a designated set of ten    ::     
     :: consecutive bits. It then restarts the file for the next de-  ::     
     :: signated 10 bits, and so on.                                  ::     
     ::                                                               ::     
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::     
     ::   The test OQSO is similar, except that it considers 4-letter ::     
     :: words from an alphabet of 32 letters, each letter determined  ::     
     :: by a designated string of 5 consecutive bits from the test    ::     
     :: file, elements of which are assumed 32-bit random integers.   ::     
     :: The mean number of missing words in a sequence of 2^21 four-  ::     
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::     
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::     
     :: extensive simulation.                                         ::     
     ::                                                               ::     
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::     
     :: determined by two designated bits in the sequence of random   ::     
     :: integers being tested.  It considers 10-letter words, so that ::     
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::     
     :: mean number of missing words from a string of 2^21  (over-    ::     
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::     
     :: The standard deviation sigma=339 was determined as for OQSO   ::     
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::     
     :: three places), not determined by simulation.                  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 OPSO test for generator SCGgen.bin               
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for SCGgen.bin      using bits 23 to 32        983040******* 1.0000
    OPSO for SCGgen.bin      using bits 22 to 31        786519******* 1.0000
    OPSO for SCGgen.bin      using bits 21 to 30        141671  -.822  .2056
    OPSO for SCGgen.bin      using bits 20 to 29        141585 -1.118  .1317
    OPSO for SCGgen.bin      using bits 19 to 28        142146   .816  .7928
    OPSO for SCGgen.bin      using bits 18 to 27        141631  -.960  .1686
    OPSO for SCGgen.bin      using bits 17 to 26        142344  1.499  .9330
    OPSO for SCGgen.bin      using bits 16 to 25        142225  1.089  .8618
    OPSO for SCGgen.bin      using bits 15 to 24        142315  1.399  .9191
    OPSO for SCGgen.bin      using bits 14 to 23        141947   .130  .5517
    OPSO for SCGgen.bin      using bits 13 to 22        142169   .895  .8147
    OPSO for SCGgen.bin      using bits 12 to 21        141278 -2.177  .0147
    OPSO for SCGgen.bin      using bits 11 to 20        142041   .454  .6751
    OPSO for SCGgen.bin      using bits 10 to 19        141898  -.039  .4844
    OPSO for SCGgen.bin      using bits  9 to 18        141673  -.815  .2076
    OPSO for SCGgen.bin      using bits  8 to 17        141784  -.432  .3328
    OPSO for SCGgen.bin      using bits  7 to 16        141809  -.346  .3647
    OPSO for SCGgen.bin      using bits  6 to 15        141942   .113  .5449
    OPSO for SCGgen.bin      using bits  5 to 14        142291  1.316  .9059
    OPSO for SCGgen.bin      using bits  4 to 13        144591  9.247 1.0000
    OPSO for SCGgen.bin      using bits  3 to 12        151302 32.389 1.0000
    OPSO for SCGgen.bin      using bits  2 to 11        167765 89.157 1.0000
    OPSO for SCGgen.bin      using bits  1 to 10        229486301.989 1.0000
 OQSO test for generator SCGgen.bin               
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for SCGgen.bin      using bits 28 to 32       1044480******* 1.0000
    OQSO for SCGgen.bin      using bits 27 to 31        983040******* 1.0000
    OQSO for SCGgen.bin      using bits 26 to 30        141167 -2.516  .0059
    OQSO for SCGgen.bin      using bits 25 to 29        142323  1.402  .9196
    OQSO for SCGgen.bin      using bits 24 to 28        141842  -.228  .4097
    OQSO for SCGgen.bin      using bits 23 to 27        141742  -.567  .2853
    OQSO for SCGgen.bin      using bits 22 to 26        141665  -.828  .2038
    OQSO for SCGgen.bin      using bits 21 to 25        142098   .640  .7388
    OQSO for SCGgen.bin      using bits 20 to 24        141916   .023  .5090
    OQSO for SCGgen.bin      using bits 19 to 23        142005   .324  .6271
    OQSO for SCGgen.bin      using bits 18 to 22        141715  -.659  .2550
    OQSO for SCGgen.bin      using bits 17 to 21        141155 -2.557  .0053
    OQSO for SCGgen.bin      using bits 16 to 20        141717  -.652  .2572
    OQSO for SCGgen.bin      using bits 15 to 19        141767  -.482  .3147
    OQSO for SCGgen.bin      using bits 14 to 18        141934   .084  .5333
    OQSO for SCGgen.bin      using bits 13 to 17        141694  -.730  .2327
    OQSO for SCGgen.bin      using bits 12 to 16        141498 -1.394  .0816
    OQSO for SCGgen.bin      using bits 11 to 15        141905  -.015  .4941
    OQSO for SCGgen.bin      using bits 10 to 14        141607 -1.025  .1527
    OQSO for SCGgen.bin      using bits  9 to 13        142154   .829  .7966
    OQSO for SCGgen.bin      using bits  8 to 12        141909  -.001  .4996
    OQSO for SCGgen.bin      using bits  7 to 11        141939   .101  .5401
    OQSO for SCGgen.bin      using bits  6 to 10        142055   .494  .6893
    OQSO for SCGgen.bin      using bits  5 to  9        142397  1.653  .9508
    OQSO for SCGgen.bin      using bits  4 to  8        146518 15.623 1.0000
    OQSO for SCGgen.bin      using bits  3 to  7        158884 57.541 1.0000
    OQSO for SCGgen.bin      using bits  2 to  6        187812155.602 1.0000
    OQSO for SCGgen.bin      using bits  1 to  5        300140536.375 1.0000
  DNA test for generator SCGgen.bin               
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for SCGgen.bin      using bits 31 to 32       1048575******* 1.0000
     DNA for SCGgen.bin      using bits 30 to 31       1047552******* 1.0000
     DNA for SCGgen.bin      using bits 29 to 30        141458 -1.331  .0915
     DNA for SCGgen.bin      using bits 28 to 29        142125   .636  .7377
     DNA for SCGgen.bin      using bits 27 to 28        142211   .890  .8132
     DNA for SCGgen.bin      using bits 26 to 27        141777  -.390  .3481
     DNA for SCGgen.bin      using bits 25 to 26        141645  -.780  .2178
     DNA for SCGgen.bin      using bits 24 to 25        142103   .571  .7161
     DNA for SCGgen.bin      using bits 23 to 24        141858  -.151  .4398
     DNA for SCGgen.bin      using bits 22 to 23        141133 -2.290  .0110
     DNA for SCGgen.bin      using bits 21 to 22        141335 -1.694  .0451
     DNA for SCGgen.bin      using bits 20 to 21        141835  -.219  .4132
     DNA for SCGgen.bin      using bits 19 to 20        142234   .958  .8309
     DNA for SCGgen.bin      using bits 18 to 19        142119   .619  .7319
     DNA for SCGgen.bin      using bits 17 to 18        142221   .919  .8211
     DNA for SCGgen.bin      using bits 16 to 17        141557 -1.039  .1493
     DNA for SCGgen.bin      using bits 15 to 16        141811  -.290  .3859
     DNA for SCGgen.bin      using bits 14 to 15        142560  1.919  .9725
     DNA for SCGgen.bin      using bits 13 to 14        142131   .654  .7434
     DNA for SCGgen.bin      using bits 12 to 13        141664  -.724  .2346
     DNA for SCGgen.bin      using bits 11 to 12        141540 -1.089  .1380
     DNA for SCGgen.bin      using bits 10 to 11        141822  -.258  .3984
     DNA for SCGgen.bin      using bits  9 to 10        141800  -.323  .3735
     DNA for SCGgen.bin      using bits  8 to  9        142021   .329  .6291
     DNA for SCGgen.bin      using bits  7 to  8        142263  1.043  .8516
     DNA for SCGgen.bin      using bits  6 to  7        142275  1.079  .8596
     DNA for SCGgen.bin      using bits  5 to  6        142418  1.501  .9333
     DNA for SCGgen.bin      using bits  4 to  5        152457 31.114 1.0000
     DNA for SCGgen.bin      using bits  3 to  4        179241110.123 1.0000
     DNA for SCGgen.bin      using bits  2 to  3        190241142.571 1.0000
     DNA for SCGgen.bin      using bits  1 to  2        189803141.279 1.0000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::     
     :: Consider the file under test as a stream of bytes (four per   ::     
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::     
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::     
     :: the stream of bytes provide a string of overlapping  5-letter ::     
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::     
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::     
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::     
     :: we have a monkey at a typewriter hitting five keys with vari- ::     
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::     
     :: possible 5-letter words, and from a string of 256,000 (over-  ::     
     :: lapping) 5-letter words, counts are made on the frequencies   ::     
     :: for each word.   The quadratic form in the weak inverse of    ::     
     :: the covariance matrix of the cell counts provides a chisquare ::     
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::     
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
   Test results for SCGgen.bin     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for SCGgen.bin     149779.59   2082.848     1.000000
 byte stream for SCGgen.bin     148261.44   2061.378     1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::     
     :: Consider the file under test as a stream of 32-bit integers.  ::     
     :: From each integer, a specific byte is chosen , say the left-  ::     
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::     
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::     
     :: the specified bytes from successive integers provide a string ::     
     :: of (overlapping) 5-letter words, each "letter" taking values  ::     
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::     
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::     
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::     
     :: hitting five keys with with various probabilities::  37,56,70,::     
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::     
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::     
     :: are made on the frequencies for each word. The quadratic form ::     
     :: in the weak inverse of the covariance matrix of the cell      ::     
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::     
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::     
     :: and 4-letter cell counts.                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  6327.21     54.125     1.000000
           bits  2 to  9  4417.92     27.124     1.000000
           bits  3 to 10  3331.07     11.753     1.000000
           bits  4 to 11  2713.89      3.025      .998756
           bits  5 to 12  2451.09      -.692      .244565
           bits  6 to 13  2464.28      -.505      .306721
           bits  7 to 14  2347.05     -2.163      .015271
           bits  8 to 15  2567.51       .955      .830141
           bits  9 to 16  2376.62     -1.745      .040510
           bits 10 to 17  2603.39      1.462      .928147
           bits 11 to 18  2428.71     -1.008      .156667
           bits 12 to 19  2566.88       .946      .827889
           bits 13 to 20  2578.37      1.108      .866134
           bits 14 to 21  2609.50      1.549      .939265
           bits 15 to 22  2577.63      1.098      .863861
           bits 16 to 23  2590.39      1.278      .899422
           bits 17 to 24  2548.64       .688      .754229
           bits 18 to 25  2401.17     -1.398      .081105
           bits 19 to 26  2421.59     -1.109      .133744
           bits 20 to 27  2499.24      -.011      .495730
           bits 21 to 28  2590.49      1.280      .899680
           bits 22 to 29  2451.53      -.685      .246528
           bits 23 to 30  2540.01       .566      .714227
           bits 24 to 31 50026.69    672.129     1.000000
           bits 25 to 32656283.12   9245.890     1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THIS IS A PARKING LOT TEST                      ::     
     :: In a square of side 100, randomly "park" a car---a circle of  ::     
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::     
     :: time parking "by ear".  That is, if an attempt to park a car  ::     
     :: causes a crash with one already parked, try again at a new    ::     
     :: random location. (To avoid path problems, consider parking    ::     
     :: helicopters rather than cars.)   Each attempt leads to either ::     
     :: a crash or a success, the latter followed by an increment to  ::     
     :: the list of cars already parked. If we plot n:  the number of ::     
     :: attempts, versus k::  the number successfully parked, we get a::     
     :: curve that should be similar to those provided by a perfect   ::     
     :: random number generator.  Theory for the behavior of such a   ::     
     :: random curve seems beyond reach, and as graphics displays are ::     
     :: not available for this battery of tests, a simple characteriz ::     
     :: ation of the random experiment is used: k, the number of cars ::     
     :: successfully parked after n=12,000 attempts. Simulation shows ::     
     :: that k should average 3523 with sigma 21.9 and is very close  ::     
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::     
     :: andard normal variable, which, converted to a uniform varia-  ::     
     :: ble, provides input to a KSTEST based on a sample of 10.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           CDPARK: result of ten tests on file SCGgen.bin     
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3223    z-score:-13.699 p-value: .000000
            Successes: 3246    z-score:-12.648 p-value: .000000
            Successes: 3223    z-score:-13.699 p-value: .000000
            Successes: 3216    z-score:-14.018 p-value: .000000
            Successes: 3206    z-score:-14.475 p-value: .000000
            Successes: 3225    z-score:-13.607 p-value: .000000
            Successes: 3240    z-score:-12.922 p-value: .000000
            Successes: 3239    z-score:-12.968 p-value: .000000
            Successes: 3253    z-score:-12.329 p-value: .000000
            Successes: 3239    z-score:-12.968 p-value: .000000

           square size   avg. no.  parked   sample sigma
             100.            3231.000       13.878
            KSTEST for the above 10: p= 1.000000

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::               THE MINIMUM DISTANCE TEST                       ::     
     :: It does this 100 times::   choose n=8000 random points in a   ::     
     :: square of side 10000.  Find d, the minimum distance between   ::     
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::     
     :: pendent uniform, then d^2, the square of the minimum distance ::     
     :: should be (very close to) exponentially distributed with mean ::     
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::     
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::     
     :: formity for random points in the square. Test numbers=0 mod 5 ::     
     :: are printed but the KSTEST is based on the full set of 100    ::     
     :: random choices of 8000 points in the 10000x10000 square.      ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               This is the MINIMUM DISTANCE test
              for random integers in the file SCGgen.bin     
     Sample no.    d^2     avg     equiv uni            
           5     .1761    .5423     .162198
          10     .4293    .5645     .350458
          15     .2369    .5145     .211845
          20     .1868    .6275     .171146
          25     .2273    .6184     .204225
          30    1.3465    .6634     .741601
          35     .0885    .6291     .085120
          40     .0717    .6961     .069501
          45     .4802    .7169     .382848
          50     .2592    .7875     .229331
          55     .9696    .7891     .622597
          60     .2119    .7889     .191797
          65     .1830    .7888     .167972
          70     .1104    .8634     .105063
          75    1.2335    .8402     .710533
          80    2.0247    .8662     .869298
          85    2.1302    .8569     .882448
          90     .3809    .8345     .318028
          95    2.4166    .9155     .911849
         100     .1069    .9034     .101880
     MINIMUM DISTANCE TEST for SCGgen.bin     
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .919004

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::              THE 3DSPHERES TEST                               ::     
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::     
     :: point, center a sphere large enough to reach the next closest ::     
     :: point. Then the volume of the smallest such sphere is (very   ::     
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::     
     :: the radius cubed is exponential with mean 30. (The mean is    ::     
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::     
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::     
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::     
     ::  KSTEST is done on the 20 p-values.                           ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
               The 3DSPHERES test for file SCGgen.bin     
 sample no:  1     r^3=  43.147     p-value= .76265
 sample no:  2     r^3=  24.973     p-value= .56501
 sample no:  3     r^3=   1.282     p-value= .04184
 sample no:  4     r^3=   5.170     p-value= .15831
 sample no:  5     r^3=  19.757     p-value= .48241
 sample no:  6     r^3=   8.779     p-value= .25370
 sample no:  7     r^3=   3.694     p-value= .11585
 sample no:  8     r^3=   7.626     p-value= .22447
 sample no:  9     r^3=   1.178     p-value= .03851
 sample no: 10     r^3=  11.624     p-value= .32123
 sample no: 11     r^3=  11.313     p-value= .31416
 sample no: 12     r^3=   1.841     p-value= .05951
 sample no: 13     r^3=  16.374     p-value= .42062
 sample no: 14     r^3=   9.489     p-value= .27117
 sample no: 15     r^3=  25.776     p-value= .57650
 sample no: 16     r^3=    .821     p-value= .02699
 sample no: 17     r^3=  32.148     p-value= .65754
 sample no: 18     r^3=  68.342     p-value= .89752
 sample no: 19     r^3=   1.720     p-value= .05572
 sample no: 20     r^3=   3.650     p-value= .11456
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file SCGgen.bin           p-value= .993955
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::      This is the SQEEZE test                                  ::     
     ::  Random integers are floated to get uniforms on [0,1). Start- ::     
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::     
     ::  iterations necessary to reduce k to 1, using the reduction   ::     
     ::  k=ceiling(k*U), with U provided by floating integers from    ::     
     ::  the file being tested.  Such j's are found 100,000 times,    ::     
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::     
     ::  are used to provide a chi-square test for cell frequencies.  ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
            RESULTS OF SQUEEZE TEST FOR SCGgen.bin     
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
      .6      .5     2.0     3.4      .0     5.9
     4.7     7.0     5.9     6.1     7.2     5.9
     5.4     4.9     5.5      .5      .5    -2.3
    -3.0    -4.1    -5.3    -5.2    -6.4    -3.9
    -3.8    -3.8    -4.6    -1.7    -2.0     -.7
    -2.8      .0     -.5     -.8     -.5      .6
     1.0      .8     2.1    -1.3      .1      .0
     2.7
           Chi-square with 42 degrees of freedom:588.242
              z-score= 59.600  p-value=1.000000
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::             The  OVERLAPPING SUMS test                        ::     
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::     
     :: form [0,1) variables.  Then overlapping sums,                 ::     
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::     
     :: The S's are virtually normal with a certain covariance mat-   ::     
     :: rix.  A linear transformation of the S's converts them to a   ::     
     :: sequence of independent standard normals, which are converted ::     
     :: to uniform variables for a KSTEST. The  p-values from ten     ::     
     :: KSTESTs are given still another KSTEST.                       ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Test no.  1      p-value  .843805
                Test no.  2      p-value  .821054
                Test no.  3      p-value  .579891
                Test no.  4      p-value  .878212
                Test no.  5      p-value  .070382
                Test no.  6      p-value  .973293
                Test no.  7      p-value  .984148
                Test no.  8      p-value  .962868
                Test no.  9      p-value  .996423
                Test no. 10      p-value  .947685
   Results of the OSUM test for SCGgen.bin     
        KSTEST on the above 10 p-values:  .999929

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     ::     This is the RUNS test.  It counts runs up, and runs down, ::     
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::     
     :: ing the 32-bit integers in the specified file. This example   ::     
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::     
     :: contains an up-run of length 3, a down-run of length 2 and an ::     
     :: up-run of (at least) 2, depending on the next values.  The    ::     
     :: covariance matrices for the runs-up and runs-down are well    ::     
     :: known, leading to chisquare tests for quadratic forms in the  ::     
     :: weak inverses of the covariance matrices.  Runs are counted   ::     
     :: for sequences of length 10,000.  This is done ten times. Then ::     
     :: repeated.                                                     ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
           The RUNS test for file SCGgen.bin     
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for SCGgen.bin     :
       runs up; ks test for 10 p's: .850256
     runs down; ks test for 10 p's: .980512
                 Run test for SCGgen.bin     :
       runs up; ks test for 10 p's: .217561
     runs down; ks test for 10 p's: .051781

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::     
     :: the number of wins and the number of throws necessary to end  ::     
     :: each game.  The number of wins should be (very close to) a    ::     
     :: normal with mean 200000p and variance 200000p(1-p), with      ::     
     :: p=244/495.  Throws necessary to complete the game can vary    ::     
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::     
     :: A chi-square test is made on the no.-of-throws cell counts.   ::     
     :: Each 32-bit integer from the test file provides the value for ::     
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::     
     :: and taking 1 plus the integer part of the result.             ::     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::     
                Results of craps test for SCGgen.bin     
  No. of wins:  Observed Expected
                                97557    98585.86
                  97557= No. of wins, z-score=-4.602 pvalue= .00000
   Analysis of Throws-per-Game:
 Chisq= 619.15 for 20 degrees of freedom, p=  .99999
               Throws Observed Expected  Chisq     Sum
                  1    71666    66666.7 374.899  374.899
                  2    35736    37654.3  97.730  472.629
                  3    25892    26954.7  41.900  514.529
                  4    18430    19313.5  40.412  554.942
                  5    13218    13851.4  28.966  583.908
                  6     9704     9943.5   5.771  589.678
                  7     7030     7145.0   1.852  591.530
                  8     4949     5139.1   7.030  598.560
                  9     3637     3699.9   1.068  599.628
                 10     2692     2666.3    .248  599.876
                 11     1942     1923.3    .181  600.057
                 12     1351     1388.7   1.026  601.083
                 13      991     1003.7    .161  601.244
                 14      739      726.1    .228  601.471
                 15      558      525.8   1.967  603.439
                 16      353      381.2   2.079  605.518
                 17      307      276.5   3.355  608.873
                 18      196      200.8    .116  608.989
                 19      168      146.0   3.320  612.310
                 20      110      106.2    .135  612.444
                 21      331      287.1   6.708  619.152
            SUMMARY  FOR SCGgen.bin     
                p-value for no. of wins: .000002
                p-value for throws/game: .999986

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file SCGgen.all     
