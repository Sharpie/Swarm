-*- outline -*-or

This file attempts to describe the rules to use when hacking Swarm.
Don't put this file into the distribution.  Don't mention it in the
ChangeLog.

* Administrivia

** If you incorporate a change from somebody on the net:
First, if it is a large change, we need to determine what we do about
copyright.  Currently all code is (C) Swarm Development Group, we need
to determine whether we need to do formal copyright assignment or not.

Second, be sure to add their name and/or email address to THANKS.

** Bug reports
If somebody reports a new bug, mention his name in the ChangeLog entry
and in the test case you write.  Put him/her into THANKS.

The correct response to most actual bugs is to write a new test case
which demonstrates the bug.  Then fix the bug, re-run the test suite,
and check everything in.

** Update the NEWS file
All user-visible changes (which include serious bug fixes), should be
mentioned in NEWS.

** Portability issues
Discoveries in portability matters should be written down in the
documentation (what fails, why it fails, *where* it fails, and what's
to be written instead?).

* Autoconfiscation

** autogen.sh
Update with versions of latest tools.  Don't mention changes to
autogen.sh in ChangeLog.

** Automake/autoconf versions currently known to work:

*** Red Hat Linux 8.0
Paul (?) awaiting your text?

*** Fedora 8
Not all tools might be installed by default, make sure to add these
packages for install.

emacs
gcc-objc
gperf
zsh

Put automake/autoconf/libtool tools in their own install area.
libtool-2.2.2
autoconf-2.62
automake-1.9.6


*** MacOS X 10.4
autoconf 2.59
automake 1.9.6
libtool 1.5.22

*** MacOS X 10.4, native Apple ObjC runtime port
Porting of Swarm to use the Apple ObjC runtime is an extended project,
so it has its own CVS branch at the moment.

cvs -z3 checkout -r apple_port-branch -d swarm-apple swarm

Then go into the macosx directory and read README.AppleObjc.

*** GNUstep
GNUstep integration with Swarm is an extended project, so it has its
own CVS branch at the moment.  This allows for checkins without
intefering with the stable Swarm for other platforms.

cvs -z3 checkout -r gnustep_port-branch -d swarm-gnustep swarm

Then go into the swarm/GNUstep directory and read the README.

*** Objective-C Runtime Abstraction
With MacOS X 10.5 came Apple's new ObjC 2.0 which greatly altered the
interface with the ObjC runtime library.  Primarily, it made many of
the data structures opaque and enhanced the API with additional
functions.  This project is to convert Swarm to use a purely API-based
interaction with the ObjC runtime library, both for GNU and Apple.  An
ObjC runtime abstraction API will be defined which Swarm uses, then
this API will be implemented for all three runtimes GNU, Apple ObjC
1.0 and Apple ObjC 2.0.  The abstraction will also allow other
technologies to be utilized for the underlying object system.

Because of the extensive changes required, this work will be performed on a
separate branch.

##cvs -z3 checkout -r objc_abstraction-branch -d swarm-objc swarm

Not CVS anymore but SVN in branche/objc_abstraction-branch

* Test suite

** make check
Use liberally.  We really should fix the test suite if they are
broken.

* Release Procedure

When we get around to making a *real* release...

** Tests
See above.

** Update NEWS
The version number, *and* the date of the release (including for
betas).

** Update ChangeLog
Should have an entry similar to `Version 2.2'.
Check all this in once `make distcheck' passes.

** Bump the version number
In configure.in.

** Announce
Send message to: announce@swarm.org

-----
