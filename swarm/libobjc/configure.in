AC_INIT(objc/objc.h)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(libobjc, 1.2)

test "x$ACLOCAL" = xaclocal && ACLOCAL="aclocal -I m4"

AC_PROG_CC
AM_CONFIG_HEADER(config.h objc/externvar.h)
AC_PROG_INSTALL
LT_AC_PROG_SED
AC_SUBST(SED)

#gccdir=`$CC -print-libgcc-file-name | sed 's/\/libgcc.a//'`
#AC_SUBST(gccdir)
#AC_MSG_CHECKING(if cc1obj -print-objc-runtime-info reports enough information)
#if $gccdir/cc1obj -print-objc-runtime-info </dev/null | grep INVISIBLE_STRUCT_RETURN > /dev/null; then
#  AC_MSG_RESULT(yes)
#else
#  AC_MSG_RESULT(no)
#fi

# AC_DISABLE_SHARED

AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL

test -n "$OBJC" || OBJC="$CC"
AC_SUBST(OBJC)
test -n "$OBJCFLAGS" || OBJCFLAGS="$CFLAGS"
OBJCFLAGS="$OBJCFLAGS -fgnu-runtime -fno-strict-aliasing -Wall -Wno-import -Wno-protocol -Wno-long-long"
AC_SUBST(OBJCFLAGS)   

# Pass with no value to take the default
# Pass with a value to specify a thread package
AC_ARG_ENABLE(threads,
[  --enable-threads        enable thread usage for target GCC.
  --enable-threads=LIB    use LIB thread package for target GCC.],
if test x$enable_threads = xno; then
        enable_threads=''
fi,
enable_threads='')

enable_threads_flag=$enable_threads

# Check if a valid thread package
case x${enable_threads_flag} in
        x | xno)
                # No threads
                target_thread_file='single'
                ;;
        xyes)
                # default
                target_thread_file=''
                ;;
        xdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \
        xsolaris | xwin32 | xdce | xvxworks)
                target_thread_file=$enable_threads_flag
                ;;
        *)
                echo "$enable_threads is an unknown thread package" 1>&2
                exit 1
                ;;
esac

OBJC_THREAD_FILE=thr-$target_thread_file
AC_SUBST(OBJC_THREAD_FILE)

AC_ARG_ENABLE(objc-gc,
[  --enable-objc-gc       enable the use of Boehm's garbage collector with
                          the GNU Objective-C runtime.],
if [[[ x$enable_objc_gc = xyes ]]]; then
        CPPFLAGS="$CPPFLAGS -DOBJC_WITH_GC"
fi)

md_CREATE_LIBOBJC_HEADERS

AC_ARG_ENABLE(onelib,
[  --enable-onelib       build as a single library],
  , enable_onelib=no)
if test x$enable_onelib = xyes; then
	ONELIB=yes
else
	ONELIB=no
fi

md_CHECK_DLL

if test $USEDLL = yes; then
  inst_LIBS=libswarmobjc.la
  inst_LDFLAGS = '-version-info $(CURRENT):$(REVISION):$(AGE) -rpath $(DESTDIR)$(libdir) -no-undefined # -L$(dir $(shell $(CC) -print-libgcc-file-name))'
  OBJC_DLL=objc.dll
else
	if test  x$ONELIB = xyes; then
	  noinst_LIBS=libswarmobjc.la
	  inst_LDFLAGS =
	  OBJC_DLL=
	else
	  inst_LIBS=libswarmobjc.la
	  inst_LDFLAGS='-version-info $(CURRENT):$(REVISION):$(AGE) -rpath $(DESTDIR)$(libdir) -no-undefined # -L$(dir $(shell $(CC) -print-libgcc-file-name))'
	  OBJC_DLL=
	fi
fi

AC_SUBST(inst_LIBS)
AC_SUBST(inst_LDFLAGS)
AC_SUBST(noinst_LIBS)
AC_SUBST(OBJC_DLL)
AC_SUBST(ONELIB)

OBJCDEPMODE='depmode=gcc3'
AC_SUBST(OBJCDEPMODE)

AC_CHECK_HEADERS(sys/sigevent.h)
AC_OUTPUT([Makefile objc/Makefile doc/Makefile m4/Makefile])

